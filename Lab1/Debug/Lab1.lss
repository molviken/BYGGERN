
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000a12  00000aa6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080012a  0080012a  00000ad0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  00000b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ead  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b5e  00000000  00000000  00002bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b26  00000000  00000000  00003733  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000540  00000000  00000000  0000425c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000060f  00000000  00000000  0000479c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000102b  00000000  00000000  00004dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00005dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_1>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
  78:	00 06       	cpc	r0, r16
  7a:	5f 5f       	subi	r21, 0xFF	; 255
  7c:	06 00       	.word	0x0006	; ????
  7e:	00 00       	nop
  80:	00 07       	cpc	r16, r16
  82:	07 00       	.word	0x0007	; ????
  84:	07 07       	cpc	r16, r23
  86:	00 00       	nop
  88:	14 7f       	andi	r17, 0xF4	; 244
  8a:	7f 14       	cp	r7, r15
  8c:	7f 7f       	andi	r23, 0xFF	; 255
  8e:	14 00       	.word	0x0014	; ????
  90:	24 2e       	mov	r2, r20
  92:	6b 6b       	ori	r22, 0xBB	; 187
  94:	3a 12       	cpse	r3, r26
  96:	00 00       	nop
  98:	46 66       	ori	r20, 0x66	; 102
  9a:	30 18       	sub	r3, r0
  9c:	0c 66       	ori	r16, 0x6C	; 108
  9e:	62 00       	.word	0x0062	; ????
  a0:	30 7a       	andi	r19, 0xA0	; 160
  a2:	4f 5d       	subi	r20, 0xDF	; 223
  a4:	37 7a       	andi	r19, 0xA7	; 167
  a6:	48 00       	.word	0x0048	; ????
  a8:	04 07       	cpc	r16, r20
  aa:	03 00       	.word	0x0003	; ????
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 1c       	adc	r0, r0
  b2:	3e 63       	ori	r19, 0x3E	; 62
  b4:	41 00       	.word	0x0041	; ????
  b6:	00 00       	nop
  b8:	00 41       	sbci	r16, 0x10	; 16
  ba:	63 3e       	cpi	r22, 0xE3	; 227
  bc:	1c 00       	.word	0x001c	; ????
  be:	00 00       	nop
  c0:	08 2a       	or	r0, r24
  c2:	3e 1c       	adc	r3, r14
  c4:	1c 3e       	cpi	r17, 0xEC	; 236
  c6:	2a 08       	sbc	r2, r10
  c8:	08 08       	sbc	r0, r8
  ca:	3e 3e       	cpi	r19, 0xEE	; 238
  cc:	08 08       	sbc	r0, r8
  ce:	00 00       	nop
  d0:	00 a0       	ldd	r0, Z+32	; 0x20
  d2:	e0 60       	ori	r30, 0x00	; 0
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	08 08       	sbc	r0, r8
  da:	08 08       	sbc	r0, r8
  dc:	08 08       	sbc	r0, r8
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	60 60       	ori	r22, 0x00	; 0
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	60 30       	cpi	r22, 0x00	; 0
  ea:	18 0c       	add	r1, r8
  ec:	06 03       	mulsu	r16, r22
  ee:	01 00       	.word	0x0001	; ????
  f0:	3e 7f       	andi	r19, 0xFE	; 254
  f2:	59 4d       	sbci	r21, 0xD9	; 217
  f4:	7f 3e       	cpi	r23, 0xEF	; 239
  f6:	00 00       	nop
  f8:	42 42       	sbci	r20, 0x22	; 34
  fa:	7f 7f       	andi	r23, 0xFF	; 255
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	00 00       	nop
 100:	62 73       	andi	r22, 0x32	; 50
 102:	59 49       	sbci	r21, 0x99	; 153
 104:	6f 66       	ori	r22, 0x6F	; 111
 106:	00 00       	nop
 108:	22 63       	ori	r18, 0x32	; 50
 10a:	49 49       	sbci	r20, 0x99	; 153
 10c:	7f 36       	cpi	r23, 0x6F	; 111
 10e:	00 00       	nop
 110:	18 1c       	adc	r1, r8
 112:	16 13       	cpse	r17, r22
 114:	7f 7f       	andi	r23, 0xFF	; 255
 116:	10 00       	.word	0x0010	; ????
 118:	27 67       	ori	r18, 0x77	; 119
 11a:	45 45       	sbci	r20, 0x55	; 85
 11c:	7d 39       	cpi	r23, 0x9D	; 157
 11e:	00 00       	nop
 120:	3c 7e       	andi	r19, 0xEC	; 236
 122:	4b 49       	sbci	r20, 0x9B	; 155
 124:	79 30       	cpi	r23, 0x09	; 9
 126:	00 00       	nop
 128:	03 63       	ori	r16, 0x33	; 51
 12a:	71 19       	sub	r23, r1
 12c:	0f 07       	cpc	r16, r31
 12e:	00 00       	nop
 130:	36 7f       	andi	r19, 0xF6	; 246
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	7f 36       	cpi	r23, 0x6F	; 111
 136:	00 00       	nop
 138:	06 4f       	sbci	r16, 0xF6	; 246
 13a:	49 69       	ori	r20, 0x99	; 153
 13c:	3f 1e       	adc	r3, r31
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	6c 6c       	ori	r22, 0xCC	; 204
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 a0       	ldd	r0, Z+32	; 0x20
 14a:	ec 6c       	ori	r30, 0xCC	; 204
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	08 1c       	adc	r0, r8
 152:	36 63       	ori	r19, 0x36	; 54
 154:	41 00       	.word	0x0041	; ????
 156:	00 00       	nop
 158:	14 14       	cp	r1, r4
 15a:	14 14       	cp	r1, r4
 15c:	14 14       	cp	r1, r4
 15e:	00 00       	nop
 160:	00 41       	sbci	r16, 0x10	; 16
 162:	63 36       	cpi	r22, 0x63	; 99
 164:	1c 08       	sbc	r1, r12
 166:	00 00       	nop
 168:	02 03       	mulsu	r16, r18
 16a:	51 59       	subi	r21, 0x91	; 145
 16c:	0f 06       	cpc	r0, r31
 16e:	00 00       	nop
 170:	3e 7f       	andi	r19, 0xFE	; 254
 172:	41 5d       	subi	r20, 0xD1	; 209
 174:	5d 1f       	adc	r21, r29
 176:	1e 00       	.word	0x001e	; ????
 178:	7c 7e       	andi	r23, 0xEC	; 236
 17a:	13 13       	cpse	r17, r19
 17c:	7e 7c       	andi	r23, 0xCE	; 206
 17e:	00 00       	nop
 180:	41 7f       	andi	r20, 0xF1	; 241
 182:	7f 49       	sbci	r23, 0x9F	; 159
 184:	49 7f       	andi	r20, 0xF9	; 249
 186:	36 00       	.word	0x0036	; ????
 188:	1c 3e       	cpi	r17, 0xEC	; 236
 18a:	63 41       	sbci	r22, 0x13	; 19
 18c:	41 63       	ori	r20, 0x31	; 49
 18e:	22 00       	.word	0x0022	; ????
 190:	41 7f       	andi	r20, 0xF1	; 241
 192:	7f 41       	sbci	r23, 0x1F	; 31
 194:	63 7f       	andi	r22, 0xF3	; 243
 196:	1c 00       	.word	0x001c	; ????
 198:	41 7f       	andi	r20, 0xF1	; 241
 19a:	7f 49       	sbci	r23, 0x9F	; 159
 19c:	5d 41       	sbci	r21, 0x1D	; 29
 19e:	63 00       	.word	0x0063	; ????
 1a0:	41 7f       	andi	r20, 0xF1	; 241
 1a2:	7f 49       	sbci	r23, 0x9F	; 159
 1a4:	1d 01       	movw	r2, r26
 1a6:	03 00       	.word	0x0003	; ????
 1a8:	1c 3e       	cpi	r17, 0xEC	; 236
 1aa:	63 41       	sbci	r22, 0x13	; 19
 1ac:	51 73       	andi	r21, 0x31	; 49
 1ae:	72 00       	.word	0x0072	; ????
 1b0:	7f 7f       	andi	r23, 0xFF	; 255
 1b2:	08 08       	sbc	r0, r8
 1b4:	7f 7f       	andi	r23, 0xFF	; 255
 1b6:	00 00       	nop
 1b8:	00 41       	sbci	r16, 0x10	; 16
 1ba:	7f 7f       	andi	r23, 0xFF	; 255
 1bc:	41 00       	.word	0x0041	; ????
 1be:	00 00       	nop
 1c0:	30 70       	andi	r19, 0x00	; 0
 1c2:	40 41       	sbci	r20, 0x10	; 16
 1c4:	7f 3f       	cpi	r23, 0xFF	; 255
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	41 7f       	andi	r20, 0xF1	; 241
 1ca:	7f 08       	sbc	r7, r15
 1cc:	1c 77       	andi	r17, 0x7C	; 124
 1ce:	63 00       	.word	0x0063	; ????
 1d0:	41 7f       	andi	r20, 0xF1	; 241
 1d2:	7f 41       	sbci	r23, 0x1F	; 31
 1d4:	40 60       	ori	r20, 0x00	; 0
 1d6:	70 00       	.word	0x0070	; ????
 1d8:	7f 7f       	andi	r23, 0xFF	; 255
 1da:	06 0c       	add	r0, r6
 1dc:	06 7f       	andi	r16, 0xF6	; 246
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 7f       	andi	r23, 0xFF	; 255
 1e2:	06 0c       	add	r0, r6
 1e4:	18 7f       	andi	r17, 0xF8	; 248
 1e6:	7f 00       	.word	0x007f	; ????
 1e8:	1c 3e       	cpi	r17, 0xEC	; 236
 1ea:	63 41       	sbci	r22, 0x13	; 19
 1ec:	63 3e       	cpi	r22, 0xE3	; 227
 1ee:	1c 00       	.word	0x001c	; ????
 1f0:	41 7f       	andi	r20, 0xF1	; 241
 1f2:	7f 49       	sbci	r23, 0x9F	; 159
 1f4:	09 0f       	add	r16, r25
 1f6:	06 00       	.word	0x0006	; ????
 1f8:	1e 3f       	cpi	r17, 0xFE	; 254
 1fa:	21 71       	andi	r18, 0x11	; 17
 1fc:	7f 5e       	subi	r23, 0xEF	; 239
 1fe:	00 00       	nop
 200:	41 7f       	andi	r20, 0xF1	; 241
 202:	7f 19       	sub	r23, r15
 204:	39 6f       	ori	r19, 0xF9	; 249
 206:	46 00       	.word	0x0046	; ????
 208:	26 67       	ori	r18, 0x76	; 118
 20a:	4d 59       	subi	r20, 0x9D	; 157
 20c:	7b 32       	cpi	r23, 0x2B	; 43
 20e:	00 00       	nop
 210:	03 41       	sbci	r16, 0x13	; 19
 212:	7f 7f       	andi	r23, 0xFF	; 255
 214:	41 03       	mulsu	r20, r17
 216:	00 00       	nop
 218:	7f 7f       	andi	r23, 0xFF	; 255
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	7f 7f       	andi	r23, 0xFF	; 255
 21e:	00 00       	nop
 220:	1f 3f       	cpi	r17, 0xFF	; 255
 222:	60 60       	ori	r22, 0x00	; 0
 224:	3f 1f       	adc	r19, r31
 226:	00 00       	nop
 228:	7f 7f       	andi	r23, 0xFF	; 255
 22a:	30 18       	sub	r3, r0
 22c:	30 7f       	andi	r19, 0xF0	; 240
 22e:	7f 00       	.word	0x007f	; ????
 230:	63 77       	andi	r22, 0x73	; 115
 232:	1c 08       	sbc	r1, r12
 234:	1c 77       	andi	r17, 0x7C	; 124
 236:	63 00       	.word	0x0063	; ????
 238:	07 4f       	sbci	r16, 0xF7	; 247
 23a:	78 78       	andi	r23, 0x88	; 136
 23c:	4f 07       	cpc	r20, r31
 23e:	00 00       	nop
 240:	67 73       	andi	r22, 0x37	; 55
 242:	59 4d       	sbci	r21, 0xD9	; 217
 244:	47 63       	ori	r20, 0x37	; 55
 246:	71 00       	.word	0x0071	; ????
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	7f 41       	sbci	r23, 0x1F	; 31
 24c:	41 00       	.word	0x0041	; ????
 24e:	00 00       	nop
 250:	01 03       	mulsu	r16, r17
 252:	06 0c       	add	r0, r6
 254:	18 30       	cpi	r17, 0x08	; 8
 256:	60 00       	.word	0x0060	; ????
 258:	00 41       	sbci	r16, 0x10	; 16
 25a:	41 7f       	andi	r20, 0xF1	; 241
 25c:	7f 00       	.word	0x007f	; ????
 25e:	00 00       	nop
 260:	08 0c       	add	r0, r8
 262:	06 03       	mulsu	r16, r22
 264:	06 0c       	add	r0, r6
 266:	08 00       	.word	0x0008	; ????
 268:	80 80       	ld	r8, Z
 26a:	80 80       	ld	r8, Z
 26c:	80 80       	ld	r8, Z
 26e:	80 80       	ld	r8, Z
 270:	00 00       	nop
 272:	03 07       	cpc	r16, r19
 274:	04 00       	.word	0x0004	; ????
 276:	00 00       	nop
 278:	20 74       	andi	r18, 0x40	; 64
 27a:	54 54       	subi	r21, 0x44	; 68
 27c:	3c 78       	andi	r19, 0x8C	; 140
 27e:	40 00       	.word	0x0040	; ????
 280:	41 3f       	cpi	r20, 0xF1	; 241
 282:	7f 44       	sbci	r23, 0x4F	; 79
 284:	44 7c       	andi	r20, 0xC4	; 196
 286:	38 00       	.word	0x0038	; ????
 288:	38 7c       	andi	r19, 0xC8	; 200
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	6c 28       	or	r6, r12
 28e:	00 00       	nop
 290:	30 78       	andi	r19, 0x80	; 128
 292:	48 49       	sbci	r20, 0x98	; 152
 294:	3f 7f       	andi	r19, 0xFF	; 255
 296:	40 00       	.word	0x0040	; ????
 298:	38 7c       	andi	r19, 0xC8	; 200
 29a:	54 54       	subi	r21, 0x44	; 68
 29c:	5c 18       	sub	r5, r12
 29e:	00 00       	nop
 2a0:	48 7e       	andi	r20, 0xE8	; 232
 2a2:	7f 49       	sbci	r23, 0x9F	; 159
 2a4:	03 02       	muls	r16, r19
 2a6:	00 00       	nop
 2a8:	98 bc       	out	0x28, r9	; 40
 2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2ac:	f8 7c       	andi	r31, 0xC8	; 200
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	41 7f       	andi	r20, 0xF1	; 241
 2b2:	7f 08       	sbc	r7, r15
 2b4:	04 7c       	andi	r16, 0xC4	; 196
 2b6:	78 00       	.word	0x0078	; ????
 2b8:	00 44       	sbci	r16, 0x40	; 64
 2ba:	7d 7d       	andi	r23, 0xDD	; 221
 2bc:	40 00       	.word	0x0040	; ????
 2be:	00 00       	nop
 2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <__data_load_end+0x106>
 2c2:	84 fd       	sbrc	r24, 4
 2c4:	7d 00       	.word	0x007d	; ????
 2c6:	00 00       	nop
 2c8:	41 7f       	andi	r20, 0xF1	; 241
 2ca:	7f 10       	cpse	r7, r15
 2cc:	38 6c       	ori	r19, 0xC8	; 200
 2ce:	44 00       	.word	0x0044	; ????
 2d0:	00 41       	sbci	r16, 0x10	; 16
 2d2:	7f 7f       	andi	r23, 0xFF	; 255
 2d4:	40 00       	.word	0x0040	; ????
 2d6:	00 00       	nop
 2d8:	7c 7c       	andi	r23, 0xCC	; 204
 2da:	0c 18       	sub	r0, r12
 2dc:	0c 7c       	andi	r16, 0xCC	; 204
 2de:	78 00       	.word	0x0078	; ????
 2e0:	7c 7c       	andi	r23, 0xCC	; 204
 2e2:	04 04       	cpc	r0, r4
 2e4:	7c 78       	andi	r23, 0x8C	; 140
 2e6:	00 00       	nop
 2e8:	38 7c       	andi	r19, 0xC8	; 200
 2ea:	44 44       	sbci	r20, 0x44	; 68
 2ec:	7c 38       	cpi	r23, 0x8C	; 140
 2ee:	00 00       	nop
 2f0:	84 fc       	sbrc	r8, 4
 2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
 2f4:	24 3c       	cpi	r18, 0xC4	; 196
 2f6:	18 00       	.word	0x0018	; ????
 2f8:	18 3c       	cpi	r17, 0xC8	; 200
 2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
 2fc:	f8 fc       	.word	0xfcf8	; ????
 2fe:	84 00       	.word	0x0084	; ????
 300:	44 7c       	andi	r20, 0xC4	; 196
 302:	78 44       	sbci	r23, 0x48	; 72
 304:	1c 18       	sub	r1, r12
 306:	00 00       	nop
 308:	48 5c       	subi	r20, 0xC8	; 200
 30a:	54 54       	subi	r21, 0x44	; 68
 30c:	74 24       	eor	r7, r4
 30e:	00 00       	nop
 310:	00 04       	cpc	r0, r0
 312:	3e 7f       	andi	r19, 0xFE	; 254
 314:	44 24       	eor	r4, r4
 316:	00 00       	nop
 318:	3c 7c       	andi	r19, 0xCC	; 204
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	3c 7c       	andi	r19, 0xCC	; 204
 31e:	40 00       	.word	0x0040	; ????
 320:	1c 3c       	cpi	r17, 0xCC	; 204
 322:	60 60       	ori	r22, 0x00	; 0
 324:	3c 1c       	adc	r3, r12
 326:	00 00       	nop
 328:	3c 7c       	andi	r19, 0xCC	; 204
 32a:	60 30       	cpi	r22, 0x00	; 0
 32c:	60 7c       	andi	r22, 0xC0	; 192
 32e:	3c 00       	.word	0x003c	; ????
 330:	44 6c       	ori	r20, 0xC4	; 196
 332:	38 10       	cpse	r3, r8
 334:	38 6c       	ori	r19, 0xC8	; 200
 336:	44 00       	.word	0x0044	; ????
 338:	9c bc       	out	0x2c, r9	; 44
 33a:	a0 a0       	ldd	r10, Z+32	; 0x20
 33c:	fc 7c       	andi	r31, 0xCC	; 204
 33e:	00 00       	nop
 340:	4c 64       	ori	r20, 0x4C	; 76
 342:	74 5c       	subi	r23, 0xC4	; 196
 344:	4c 64       	ori	r20, 0x4C	; 76
 346:	00 00       	nop
 348:	08 08       	sbc	r0, r8
 34a:	3e 77       	andi	r19, 0x7E	; 126
 34c:	41 41       	sbci	r20, 0x11	; 17
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 77       	andi	r16, 0x70	; 112
 354:	77 00       	.word	0x0077	; ????
 356:	00 00       	nop
 358:	41 41       	sbci	r20, 0x11	; 17
 35a:	77 3e       	cpi	r23, 0xE7	; 231
 35c:	08 08       	sbc	r0, r8
 35e:	00 00       	nop
 360:	02 03       	mulsu	r16, r18
 362:	01 03       	mulsu	r16, r17
 364:	02 03       	mulsu	r16, r18
 366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	e2 e1       	ldi	r30, 0x12	; 18
 37c:	fa e0       	ldi	r31, 0x0A	; 10
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	aa 32       	cpi	r26, 0x2A	; 42
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	aa e2       	ldi	r26, 0x2A	; 42
 38e:	b1 e0       	ldi	r27, 0x01	; 1
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	aa 33       	cpi	r26, 0x3A	; 58
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 2a 02 	call	0x454	; 0x454 <main>
 39e:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
#include "adc.h"
#include <string.h>
//#include "uart.h"

void adc_init(void){
	set_bit(MCUCR,SRE);
 3a6:	85 b7       	in	r24, 0x35	; 53
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
 3ac:	80 b7       	in	r24, 0x30	; 48
 3ae:	80 62       	ori	r24, 0x20	; 32
 3b0:	80 bf       	out	0x30, r24	; 48
	clear_bit(DDRE,DDE0);
 3b2:	30 98       	cbi	0x06, 0	; 6
 3b4:	08 95       	ret

000003b6 <CAN_init>:
#include "MCPkontroll.h"

uint8_t rx_flag = 0;

void CAN_init(){
	MCP_init();
 3b6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <MCP_init>
	// Turn mask/filters off
	MCP_bit_mod(MCP_RXB0CTRL, 0b01100100, 0xFF);
 3ba:	4f ef       	ldi	r20, 0xFF	; 255
 3bc:	64 e6       	ldi	r22, 0x64	; 100
 3be:	80 e6       	ldi	r24, 0x60	; 96
 3c0:	0e 94 4c 02 	call	0x498	; 0x498 <MCP_bit_mod>
	// Set LoopBack mode on
	MCP_bit_mod(MCP_CANCTRL, MODE_MASK, MODE_LOOPBACK); // MCP_CANCTRL = MODE_LOOPBACK;
 3c4:	40 e4       	ldi	r20, 0x40	; 64
 3c6:	60 ee       	ldi	r22, 0xE0	; 224
 3c8:	8f e0       	ldi	r24, 0x0F	; 15
 3ca:	0e 94 4c 02 	call	0x498	; 0x498 <MCP_bit_mod>
	// Enable interrupt when a valid message has been received
	MCP_bit_mod(MCP_CANINTE, 0x01, 0x01);
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	61 e0       	ldi	r22, 0x01	; 1
 3d2:	8b e2       	ldi	r24, 0x2B	; 43
 3d4:	0e 94 4c 02 	call	0x498	; 0x498 <MCP_bit_mod>
 3d8:	08 95       	ret

000003da <CAN_int_vect>:
	}
}

void CAN_int_vect(void){
	// clear interrupt flag in buffer 0
	MCP_bit_mod(MCP_CANINTF, 0x01, 0);
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	8c e2       	ldi	r24, 0x2C	; 44
 3e0:	0e 94 4c 02 	call	0x498	; 0x498 <MCP_bit_mod>
	rx_flag = 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 2a 01 	sts	0x012A, r24
 3ea:	08 95       	ret

000003ec <__vector_1>:
	}
	return new_message;
}

// Interrupt service
ISR(INT0_vect){
 3ec:	1f 92       	push	r1
 3ee:	0f 92       	push	r0
 3f0:	0f b6       	in	r0, 0x3f	; 63
 3f2:	0f 92       	push	r0
 3f4:	11 24       	eor	r1, r1
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40e:	83 ec       	ldi	r24, 0xC3	; 195
 410:	99 e0       	ldi	r25, 0x09	; 9
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__vector_1+0x26>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__vector_1+0x2c>
 418:	00 00       	nop
	_delay_ms(10);
	CAN_int_vect();
 41a:	0e 94 ed 01 	call	0x3da	; 0x3da <CAN_int_vect>
 41e:	ff 91       	pop	r31
 420:	ef 91       	pop	r30
 422:	bf 91       	pop	r27
 424:	af 91       	pop	r26
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	7f 91       	pop	r23
 42c:	6f 91       	pop	r22
 42e:	5f 91       	pop	r21
 430:	4f 91       	pop	r20
 432:	3f 91       	pop	r19
 434:	2f 91       	pop	r18
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <initialize_menu>:
	global_slider.slider2 = slider2;
	return global_slider;
	//printf("Slider 1: %i, Slider 2: %i \n", slider1,slider2);
}
void initialize_menu(){
	oled_print_letter('#',0x01,0x00,0x08);
 440:	28 e0       	ldi	r18, 0x08	; 8
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	83 e2       	ldi	r24, 0x23	; 35
 448:	0e 94 c4 02 	call	0x588	; 0x588 <oled_print_letter>
	pos.current_page = 0x01;
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	80 93 2b 01 	sts	0x012B, r24
 452:	08 95       	ret

00000454 <main>:
volatile char* adc_adresse = 0x1400;
volatile char* ram_adresse = 0x1800;
int main(void)
{

	DDRB = 0b00000000;
 454:	17 ba       	out	0x17, r1	; 23
	adc_init();
 456:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	CAN_init();
 45a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <CAN_init>
	CAN_int_vect();
 45e:	0e 94 ed 01 	call	0x3da	; 0x3da <CAN_int_vect>
	EXT_MEM_Init();
 462:	0e 94 2b 03 	call	0x656	; 0x656 <EXT_MEM_Init>
    USART_Init(31);
 466:	8f e1       	ldi	r24, 0x1F	; 31
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	0e 94 3a 03 	call	0x674	; 0x674 <USART_Init>
	oled_init();
 46e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <oled_init>
	oled_reset();
 472:	0e 94 ad 02 	call	0x55a	; 0x55a <oled_reset>
	oled_print("KALVEN MIN ER VELDIG HYGGELIG");
 476:	86 e0       	ldi	r24, 0x06	; 6
 478:	91 e0       	ldi	r25, 0x01	; 1
 47a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <oled_print>
	initialize_menu();
 47e:	0e 94 20 02 	call	0x440	; 0x440 <initialize_menu>
	printf("first message data[0] = %x", first_message.data[0]) 
	printf("copy message data[0} = %x \n", copy_message.data[0]);*/
	
	while(1)
    {
		printf("Hallo\n");
 482:	84 e2       	ldi	r24, 0x24	; 36
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	0e 94 90 03 	call	0x720	; 0x720 <puts>
 48a:	87 ea       	ldi	r24, 0xA7	; 167
 48c:	91 e6       	ldi	r25, 0x61	; 97
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <main+0x3a>
 492:	00 c0       	rjmp	.+0      	; 0x494 <main+0x40>
 494:	00 00       	nop
 496:	f5 cf       	rjmp	.-22     	; 0x482 <main+0x2e>

00000498 <MCP_bit_mod>:
	SPI_MasterTransmit(MCP_READ_STATUS);
	set_bit(PORTB,PB4);	
	return SPI_MasterReceive();
}

void MCP_bit_mod(uint8_t address, uint8_t m_byte, uint8_t d_byte){
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	18 2f       	mov	r17, r24
 4a0:	d6 2f       	mov	r29, r22
 4a2:	c4 2f       	mov	r28, r20
	clear_bit(PORTB, PB4);
 4a4:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_BITMOD);
 4a6:	85 e0       	ldi	r24, 0x05	; 5
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 4ae:	81 2f       	mov	r24, r17
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_MasterTransmit>
	SPI_MasterTransmit(m_byte);
 4b6:	8d 2f       	mov	r24, r29
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_MasterTransmit>
	SPI_MasterTransmit(d_byte);
 4be:	8c 2f       	mov	r24, r28
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_MasterTransmit>
	set_bit(PORTB,PB4);	
 4c6:	c4 9a       	sbi	0x18, 4	; 24
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	08 95       	ret

000004d0 <MCP_reset>:

void MCP_reset(){
	clear_bit(PORTB, PB4);
 4d0:	c4 98       	cbi	0x18, 4	; 24
	SPI_MasterTransmit(MCP_RESET);
 4d2:	80 ec       	ldi	r24, 0xC0	; 192
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 27 03 	call	0x64e	; 0x64e <SPI_MasterTransmit>
 4da:	08 95       	ret

000004dc <MCP_init>:
 */ 
#include "MCPkontroll.h"
#include "MCP2515.h"

void MCP_init(){
	SPI_MasterInit();
 4dc:	0e 94 22 03 	call	0x644	; 0x644 <SPI_MasterInit>
	MCP_reset();
 4e0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <MCP_reset>
 4e4:	08 95       	ret

000004e6 <oled_init>:
#include "oled.h"
#include "fonts.h"
int coloumn_counter = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
 4e6:	e0 e0       	ldi	r30, 0x00	; 0
 4e8:	f0 e1       	ldi	r31, 0x10	; 16
 4ea:	8e ea       	ldi	r24, 0xAE	; 174
 4ec:	80 83       	st	Z, r24
 4ee:	81 ea       	ldi	r24, 0xA1	; 161
 4f0:	80 83       	st	Z, r24
 4f2:	8a ed       	ldi	r24, 0xDA	; 218
 4f4:	80 83       	st	Z, r24
 4f6:	82 e1       	ldi	r24, 0x12	; 18
 4f8:	80 83       	st	Z, r24
 4fa:	88 ec       	ldi	r24, 0xC8	; 200
 4fc:	80 83       	st	Z, r24
 4fe:	88 ea       	ldi	r24, 0xA8	; 168
 500:	80 83       	st	Z, r24
 502:	8f e3       	ldi	r24, 0x3F	; 63
 504:	80 83       	st	Z, r24
 506:	85 ed       	ldi	r24, 0xD5	; 213
 508:	80 83       	st	Z, r24
 50a:	80 e8       	ldi	r24, 0x80	; 128
 50c:	80 83       	st	Z, r24
 50e:	81 e8       	ldi	r24, 0x81	; 129
 510:	80 83       	st	Z, r24
 512:	80 e5       	ldi	r24, 0x50	; 80
 514:	80 83       	st	Z, r24
 516:	89 ed       	ldi	r24, 0xD9	; 217
 518:	80 83       	st	Z, r24
 51a:	81 e2       	ldi	r24, 0x21	; 33
 51c:	80 83       	st	Z, r24
 51e:	80 e2       	ldi	r24, 0x20	; 32
 520:	80 83       	st	Z, r24
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	80 83       	st	Z, r24
 526:	8b ed       	ldi	r24, 0xDB	; 219
 528:	80 83       	st	Z, r24
 52a:	80 e3       	ldi	r24, 0x30	; 48
 52c:	80 83       	st	Z, r24
 52e:	8d ea       	ldi	r24, 0xAD	; 173
 530:	80 83       	st	Z, r24
 532:	10 82       	st	Z, r1
 534:	84 ea       	ldi	r24, 0xA4	; 164
 536:	80 83       	st	Z, r24
 538:	86 ea       	ldi	r24, 0xA6	; 166
 53a:	80 83       	st	Z, r24
 53c:	8f ea       	ldi	r24, 0xAF	; 175
 53e:	80 83       	st	Z, r24
 540:	08 95       	ret

00000542 <oled_clear_page>:
		oled_clear_page(i);
	}
	//oled_init();
}
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
 542:	80 55       	subi	r24, 0x50	; 80
#include "oled.h"
#include "fonts.h"
int coloumn_counter = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
 544:	80 93 00 10 	sts	0x1000, r24
 548:	80 e8       	ldi	r24, 0x80	; 128
 54a:	90 e0       	ldi	r25, 0x00	; 0
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
 54c:	e0 e0       	ldi	r30, 0x00	; 0
 54e:	f2 e1       	ldi	r31, 0x12	; 18
 550:	10 82       	st	Z, r1
 552:	01 97       	sbiw	r24, 0x01	; 1
	write_c(coloumn_start);
	write_c(coloumn_end);
}
void oled_clear_page(page){
	oled_goto_page(page);
		for (int i = 0;i<128;i++){
 554:	00 97       	sbiw	r24, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <oled_clear_page+0xe>
			write_d(0x00);
		}
}
 558:	08 95       	ret

0000055a <oled_reset>:
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
 55a:	cf 93       	push	r28
 55c:	df 93       	push	r29
	for (int i=0; i<8;i++){
 55e:	c0 e0       	ldi	r28, 0x00	; 0
 560:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_page(i);
 562:	ce 01       	movw	r24, r28
 564:	0e 94 a1 02 	call	0x542	; 0x542 <oled_clear_page>
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
	for (int i=0; i<8;i++){
 568:	21 96       	adiw	r28, 0x01	; 1
 56a:	c8 30       	cpi	r28, 0x08	; 8
 56c:	d1 05       	cpc	r29, r1
 56e:	c9 f7       	brne	.-14     	; 0x562 <oled_reset+0x8>
		oled_clear_page(i);
	}
	//oled_init();
}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <oled_pos>:
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
 576:	80 55       	subi	r24, 0x50	; 80
#include "oled.h"
#include "fonts.h"
int coloumn_counter = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
 578:	e0 e0       	ldi	r30, 0x00	; 0
 57a:	f0 e1       	ldi	r31, 0x10	; 16
 57c:	80 83       	st	Z, r24
 57e:	81 e2       	ldi	r24, 0x21	; 33
 580:	80 83       	st	Z, r24
 582:	60 83       	st	Z, r22
 584:	40 83       	st	Z, r20
 586:	08 95       	ret

00000588 <oled_print_letter>:
		for (int i = 0;i<128;i++){
			write_d(0x00);
		}
}

void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
 588:	cf 93       	push	r28
 58a:	c8 2f       	mov	r28, r24
 58c:	86 2f       	mov	r24, r22
 58e:	64 2f       	mov	r22, r20
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
 590:	42 2f       	mov	r20, r18
 592:	0e 94 bb 02 	call	0x576	; 0x576 <oled_pos>
 596:	ec 2f       	mov	r30, r28
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	ee 0f       	add	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	e0 59       	subi	r30, 0x90	; 144
 5a8:	f0 40       	sbci	r31, 0x00	; 0
	int ltr;
	for (int i = 0;i<8;i++){
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	90 e0       	ldi	r25, 0x00	; 0
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
 5ae:	a0 e0       	ldi	r26, 0x00	; 0
 5b0:	b2 e1       	ldi	r27, 0x12	; 18
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
		ltr = pgm_read_byte(&(font8[letter-32][i]));
 5b2:	24 91       	lpm	r18, Z
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
 5b4:	2c 93       	st	X, r18
void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	31 96       	adiw	r30, 0x01	; 1
 5ba:	88 30       	cpi	r24, 0x08	; 8
 5bc:	91 05       	cpc	r25, r1
 5be:	c9 f7       	brne	.-14     	; 0x5b2 <oled_print_letter+0x2a>
		ltr = pgm_read_byte(&(font8[letter-32][i]));
		write_d(ltr);
	}
}
 5c0:	cf 91       	pop	r28
 5c2:	08 95       	ret

000005c4 <oled_print>:
void oled_pos(uint8_t page,uint8_t coloumn_start,uint8_t coloumn_end){
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
 5c4:	bf 92       	push	r11
 5c6:	cf 92       	push	r12
 5c8:	df 92       	push	r13
 5ca:	ef 92       	push	r14
 5cc:	ff 92       	push	r15
 5ce:	0f 93       	push	r16
 5d0:	1f 93       	push	r17
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	fc 01       	movw	r30, r24
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
 5d8:	80 81       	ld	r24, Z
 5da:	88 23       	and	r24, r24
 5dc:	49 f1       	breq	.+82     	; 0x630 <oled_print+0x6c>
 5de:	ef 01       	movw	r28, r30
 5e0:	21 96       	adiw	r28, 0x01	; 1
 5e2:	8f 01       	movw	r16, r30
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
 5e4:	dd 24       	eor	r13, r13
 5e6:	d3 94       	inc	r13
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
 5e8:	0f 2e       	mov	r0, r31
 5ea:	f1 e1       	ldi	r31, 0x11	; 17
 5ec:	ef 2e       	mov	r14, r31
 5ee:	f0 2d       	mov	r31, r0
void oled_pos(uint8_t page,uint8_t coloumn_start,uint8_t coloumn_end){
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
 5f0:	0f 2e       	mov	r0, r31
 5f2:	f9 e0       	ldi	r31, 0x09	; 9
 5f4:	ff 2e       	mov	r15, r31
 5f6:	f0 2d       	mov	r31, r0
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
			coloumn_start = 0x09;
			coloumn_end = 0x11;
 5f8:	0f 2e       	mov	r0, r31
 5fa:	f1 e1       	ldi	r31, 0x11	; 17
 5fc:	bf 2e       	mov	r11, r31
 5fe:	f0 2d       	mov	r31, r0
		coloumn_start += 0x09;
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
			coloumn_start = 0x09;
 600:	0f 2e       	mov	r0, r31
 602:	f9 e0       	ldi	r31, 0x09	; 9
 604:	cf 2e       	mov	r12, r31
 606:	f0 2d       	mov	r31, r0
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
		oled_print_letter(word[i], page, coloumn_start,coloumn_end);
 608:	2e 2d       	mov	r18, r14
 60a:	4f 2d       	mov	r20, r15
 60c:	6d 2d       	mov	r22, r13
 60e:	0e 94 c4 02 	call	0x588	; 0x588 <oled_print_letter>
		coloumn_start += 0x09;
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
 612:	f8 01       	movw	r30, r16
 614:	80 81       	ld	r24, Z
 616:	80 32       	cpi	r24, 0x20	; 32
 618:	21 f0       	breq	.+8      	; 0x622 <oled_print+0x5e>
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
		oled_print_letter(word[i], page, coloumn_start,coloumn_end);
		coloumn_start += 0x09;
 61a:	f9 e0       	ldi	r31, 0x09	; 9
 61c:	ff 0e       	add	r15, r31
		coloumn_end += 0x09;
 61e:	ef 0e       	add	r14, r31
 620:	03 c0       	rjmp	.+6      	; 0x628 <oled_print+0x64>
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
 622:	d3 94       	inc	r13
			coloumn_start = 0x09;
			coloumn_end = 0x11;
 624:	eb 2c       	mov	r14, r11
		coloumn_start += 0x09;
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
			coloumn_start = 0x09;
 626:	fc 2c       	mov	r15, r12
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
 628:	8e 01       	movw	r16, r28
 62a:	89 91       	ld	r24, Y+
 62c:	81 11       	cpse	r24, r1
 62e:	ec cf       	rjmp	.-40     	; 0x608 <oled_print+0x44>
			coloumn_start = 0x09;
			coloumn_end = 0x11;
		}
	}
	
}
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	1f 91       	pop	r17
 636:	0f 91       	pop	r16
 638:	ff 90       	pop	r15
 63a:	ef 90       	pop	r14
 63c:	df 90       	pop	r13
 63e:	cf 90       	pop	r12
 640:	bf 90       	pop	r11
 642:	08 95       	ret

00000644 <SPI_MasterInit>:
#include "SPI.h"

void SPI_MasterInit(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<DD_MOSI)|(1<<DD_SCK);
 644:	80 ea       	ldi	r24, 0xA0	; 160
 646:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 648:	81 e5       	ldi	r24, 0x51	; 81
 64a:	8d b9       	out	0x0d, r24	; 13
 64c:	08 95       	ret

0000064e <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData){
	/* Start transmission */
	SPDR = cData;
 64e:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while	(!(SPSR & (1<<SPIF)));
 650:	77 9b       	sbis	0x0e, 7	; 14
 652:	fe cf       	rjmp	.-4      	; 0x650 <SPI_MasterTransmit+0x2>
}
 654:	08 95       	ret

00000656 <EXT_MEM_Init>:
#include <avr/io.h>
#include <stdlib.h>
#include "uart.h"

void EXT_MEM_Init(void){
	set_bit(MCUCR,SRE);
 656:	85 b7       	in	r24, 0x35	; 53
 658:	80 68       	ori	r24, 0x80	; 128
 65a:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
 65c:	80 b7       	in	r24, 0x30	; 48
 65e:	80 62       	ori	r24, 0x20	; 32
 660:	80 bf       	out	0x30, r24	; 48
 662:	08 95       	ret

00000664 <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

// Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 664:	5d 9b       	sbis	0x0b, 5	; 11
 666:	fe cf       	rjmp	.-4      	; 0x664 <USART_Transmit>
  
//Put data into buffer, sends the data
	UDR0 = data;
 668:	8c b9       	out	0x0c, r24	; 12
 66a:	08 95       	ret

0000066c <USART_Receive>:
}

unsigned char USART_Receive( void ){

//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 66c:	5f 9b       	sbis	0x0b, 7	; 11
 66e:	fe cf       	rjmp	.-4      	; 0x66c <USART_Receive>
//Get and return received data from buffer
	return UDR0;
 670:	8c b1       	in	r24, 0x0c	; 12
 672:	08 95       	ret

00000674 <USART_Init>:
	//set_bit(SFIOR,XMM2);
	////set_bit(SFIOR,XMM0);
//}
void USART_Init( unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 674:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 676:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter	*/
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 678:	88 e1       	ldi	r24, 0x18	; 24
 67a:	8a b9       	out	0x0a, r24	; 10
	fdevopen(USART_Transmit,USART_Receive);
 67c:	66 e3       	ldi	r22, 0x36	; 54
 67e:	73 e0       	ldi	r23, 0x03	; 3
 680:	82 e3       	ldi	r24, 0x32	; 50
 682:	93 e0       	ldi	r25, 0x03	; 3
 684:	0e 94 45 03 	call	0x68a	; 0x68a <fdevopen>
 688:	08 95       	ret

0000068a <fdevopen>:
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	ec 01       	movw	r28, r24
 694:	8b 01       	movw	r16, r22
 696:	00 97       	sbiw	r24, 0x00	; 0
 698:	31 f4       	brne	.+12     	; 0x6a6 <fdevopen+0x1c>
 69a:	61 15       	cp	r22, r1
 69c:	71 05       	cpc	r23, r1
 69e:	19 f4       	brne	.+6      	; 0x6a6 <fdevopen+0x1c>
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	38 c0       	rjmp	.+112    	; 0x716 <fdevopen+0x8c>
 6a6:	6e e0       	ldi	r22, 0x0E	; 14
 6a8:	70 e0       	ldi	r23, 0x00	; 0
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 bd 03 	call	0x77a	; 0x77a <calloc>
 6b2:	fc 01       	movw	r30, r24
 6b4:	00 97       	sbiw	r24, 0x00	; 0
 6b6:	a1 f3       	breq	.-24     	; 0x6a0 <fdevopen+0x16>
 6b8:	80 e8       	ldi	r24, 0x80	; 128
 6ba:	83 83       	std	Z+3, r24	; 0x03
 6bc:	01 15       	cp	r16, r1
 6be:	11 05       	cpc	r17, r1
 6c0:	71 f0       	breq	.+28     	; 0x6de <fdevopen+0x54>
 6c2:	13 87       	std	Z+11, r17	; 0x0b
 6c4:	02 87       	std	Z+10, r16	; 0x0a
 6c6:	81 e8       	ldi	r24, 0x81	; 129
 6c8:	83 83       	std	Z+3, r24	; 0x03
 6ca:	80 91 30 01 	lds	r24, 0x0130
 6ce:	90 91 31 01 	lds	r25, 0x0131
 6d2:	89 2b       	or	r24, r25
 6d4:	21 f4       	brne	.+8      	; 0x6de <fdevopen+0x54>
 6d6:	f0 93 31 01 	sts	0x0131, r31
 6da:	e0 93 30 01 	sts	0x0130, r30
 6de:	20 97       	sbiw	r28, 0x00	; 0
 6e0:	c9 f0       	breq	.+50     	; 0x714 <fdevopen+0x8a>
 6e2:	d1 87       	std	Z+9, r29	; 0x09
 6e4:	c0 87       	std	Z+8, r28	; 0x08
 6e6:	83 81       	ldd	r24, Z+3	; 0x03
 6e8:	82 60       	ori	r24, 0x02	; 2
 6ea:	83 83       	std	Z+3, r24	; 0x03
 6ec:	80 91 32 01 	lds	r24, 0x0132
 6f0:	90 91 33 01 	lds	r25, 0x0133
 6f4:	89 2b       	or	r24, r25
 6f6:	71 f4       	brne	.+28     	; 0x714 <fdevopen+0x8a>
 6f8:	f0 93 33 01 	sts	0x0133, r31
 6fc:	e0 93 32 01 	sts	0x0132, r30
 700:	80 91 34 01 	lds	r24, 0x0134
 704:	90 91 35 01 	lds	r25, 0x0135
 708:	89 2b       	or	r24, r25
 70a:	21 f4       	brne	.+8      	; 0x714 <fdevopen+0x8a>
 70c:	f0 93 35 01 	sts	0x0135, r31
 710:	e0 93 34 01 	sts	0x0134, r30
 714:	cf 01       	movw	r24, r30
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <puts>:
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	e0 91 32 01 	lds	r30, 0x0132
 72c:	f0 91 33 01 	lds	r31, 0x0133
 730:	23 81       	ldd	r18, Z+3	; 0x03
 732:	21 ff       	sbrs	r18, 1
 734:	1b c0       	rjmp	.+54     	; 0x76c <puts+0x4c>
 736:	ec 01       	movw	r28, r24
 738:	00 e0       	ldi	r16, 0x00	; 0
 73a:	10 e0       	ldi	r17, 0x00	; 0
 73c:	89 91       	ld	r24, Y+
 73e:	60 91 32 01 	lds	r22, 0x0132
 742:	70 91 33 01 	lds	r23, 0x0133
 746:	db 01       	movw	r26, r22
 748:	18 96       	adiw	r26, 0x08	; 8
 74a:	ed 91       	ld	r30, X+
 74c:	fc 91       	ld	r31, X
 74e:	19 97       	sbiw	r26, 0x09	; 9
 750:	88 23       	and	r24, r24
 752:	31 f0       	breq	.+12     	; 0x760 <puts+0x40>
 754:	09 95       	icall
 756:	89 2b       	or	r24, r25
 758:	89 f3       	breq	.-30     	; 0x73c <puts+0x1c>
 75a:	0f ef       	ldi	r16, 0xFF	; 255
 75c:	1f ef       	ldi	r17, 0xFF	; 255
 75e:	ee cf       	rjmp	.-36     	; 0x73c <puts+0x1c>
 760:	8a e0       	ldi	r24, 0x0A	; 10
 762:	09 95       	icall
 764:	89 2b       	or	r24, r25
 766:	11 f4       	brne	.+4      	; 0x76c <puts+0x4c>
 768:	c8 01       	movw	r24, r16
 76a:	02 c0       	rjmp	.+4      	; 0x770 <puts+0x50>
 76c:	8f ef       	ldi	r24, 0xFF	; 255
 76e:	9f ef       	ldi	r25, 0xFF	; 255
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	08 95       	ret

0000077a <calloc>:
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	86 9f       	mul	r24, r22
 784:	80 01       	movw	r16, r0
 786:	87 9f       	mul	r24, r23
 788:	10 0d       	add	r17, r0
 78a:	96 9f       	mul	r25, r22
 78c:	10 0d       	add	r17, r0
 78e:	11 24       	eor	r1, r1
 790:	c8 01       	movw	r24, r16
 792:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <malloc>
 796:	ec 01       	movw	r28, r24
 798:	00 97       	sbiw	r24, 0x00	; 0
 79a:	29 f0       	breq	.+10     	; 0x7a6 <calloc+0x2c>
 79c:	a8 01       	movw	r20, r16
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	0e 94 00 05 	call	0xa00	; 0xa00 <memset>
 7a6:	ce 01       	movw	r24, r28
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	1f 91       	pop	r17
 7ae:	0f 91       	pop	r16
 7b0:	08 95       	ret

000007b2 <malloc>:
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	82 30       	cpi	r24, 0x02	; 2
 7b8:	91 05       	cpc	r25, r1
 7ba:	10 f4       	brcc	.+4      	; 0x7c0 <malloc+0xe>
 7bc:	82 e0       	ldi	r24, 0x02	; 2
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	e0 91 38 01 	lds	r30, 0x0138
 7c4:	f0 91 39 01 	lds	r31, 0x0139
 7c8:	20 e0       	ldi	r18, 0x00	; 0
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	a0 e0       	ldi	r26, 0x00	; 0
 7ce:	b0 e0       	ldi	r27, 0x00	; 0
 7d0:	30 97       	sbiw	r30, 0x00	; 0
 7d2:	39 f1       	breq	.+78     	; 0x822 <malloc+0x70>
 7d4:	40 81       	ld	r20, Z
 7d6:	51 81       	ldd	r21, Z+1	; 0x01
 7d8:	48 17       	cp	r20, r24
 7da:	59 07       	cpc	r21, r25
 7dc:	b8 f0       	brcs	.+46     	; 0x80c <malloc+0x5a>
 7de:	48 17       	cp	r20, r24
 7e0:	59 07       	cpc	r21, r25
 7e2:	71 f4       	brne	.+28     	; 0x800 <malloc+0x4e>
 7e4:	82 81       	ldd	r24, Z+2	; 0x02
 7e6:	93 81       	ldd	r25, Z+3	; 0x03
 7e8:	10 97       	sbiw	r26, 0x00	; 0
 7ea:	29 f0       	breq	.+10     	; 0x7f6 <malloc+0x44>
 7ec:	13 96       	adiw	r26, 0x03	; 3
 7ee:	9c 93       	st	X, r25
 7f0:	8e 93       	st	-X, r24
 7f2:	12 97       	sbiw	r26, 0x02	; 2
 7f4:	2c c0       	rjmp	.+88     	; 0x84e <malloc+0x9c>
 7f6:	90 93 39 01 	sts	0x0139, r25
 7fa:	80 93 38 01 	sts	0x0138, r24
 7fe:	27 c0       	rjmp	.+78     	; 0x84e <malloc+0x9c>
 800:	21 15       	cp	r18, r1
 802:	31 05       	cpc	r19, r1
 804:	31 f0       	breq	.+12     	; 0x812 <malloc+0x60>
 806:	42 17       	cp	r20, r18
 808:	53 07       	cpc	r21, r19
 80a:	18 f0       	brcs	.+6      	; 0x812 <malloc+0x60>
 80c:	a9 01       	movw	r20, r18
 80e:	db 01       	movw	r26, r22
 810:	01 c0       	rjmp	.+2      	; 0x814 <malloc+0x62>
 812:	ef 01       	movw	r28, r30
 814:	9a 01       	movw	r18, r20
 816:	bd 01       	movw	r22, r26
 818:	df 01       	movw	r26, r30
 81a:	02 80       	ldd	r0, Z+2	; 0x02
 81c:	f3 81       	ldd	r31, Z+3	; 0x03
 81e:	e0 2d       	mov	r30, r0
 820:	d7 cf       	rjmp	.-82     	; 0x7d0 <malloc+0x1e>
 822:	21 15       	cp	r18, r1
 824:	31 05       	cpc	r19, r1
 826:	f9 f0       	breq	.+62     	; 0x866 <malloc+0xb4>
 828:	28 1b       	sub	r18, r24
 82a:	39 0b       	sbc	r19, r25
 82c:	24 30       	cpi	r18, 0x04	; 4
 82e:	31 05       	cpc	r19, r1
 830:	80 f4       	brcc	.+32     	; 0x852 <malloc+0xa0>
 832:	8a 81       	ldd	r24, Y+2	; 0x02
 834:	9b 81       	ldd	r25, Y+3	; 0x03
 836:	61 15       	cp	r22, r1
 838:	71 05       	cpc	r23, r1
 83a:	21 f0       	breq	.+8      	; 0x844 <malloc+0x92>
 83c:	fb 01       	movw	r30, r22
 83e:	93 83       	std	Z+3, r25	; 0x03
 840:	82 83       	std	Z+2, r24	; 0x02
 842:	04 c0       	rjmp	.+8      	; 0x84c <malloc+0x9a>
 844:	90 93 39 01 	sts	0x0139, r25
 848:	80 93 38 01 	sts	0x0138, r24
 84c:	fe 01       	movw	r30, r28
 84e:	32 96       	adiw	r30, 0x02	; 2
 850:	44 c0       	rjmp	.+136    	; 0x8da <malloc+0x128>
 852:	fe 01       	movw	r30, r28
 854:	e2 0f       	add	r30, r18
 856:	f3 1f       	adc	r31, r19
 858:	81 93       	st	Z+, r24
 85a:	91 93       	st	Z+, r25
 85c:	22 50       	subi	r18, 0x02	; 2
 85e:	31 09       	sbc	r19, r1
 860:	39 83       	std	Y+1, r19	; 0x01
 862:	28 83       	st	Y, r18
 864:	3a c0       	rjmp	.+116    	; 0x8da <malloc+0x128>
 866:	20 91 36 01 	lds	r18, 0x0136
 86a:	30 91 37 01 	lds	r19, 0x0137
 86e:	23 2b       	or	r18, r19
 870:	41 f4       	brne	.+16     	; 0x882 <malloc+0xd0>
 872:	20 91 02 01 	lds	r18, 0x0102
 876:	30 91 03 01 	lds	r19, 0x0103
 87a:	30 93 37 01 	sts	0x0137, r19
 87e:	20 93 36 01 	sts	0x0136, r18
 882:	20 91 00 01 	lds	r18, 0x0100
 886:	30 91 01 01 	lds	r19, 0x0101
 88a:	21 15       	cp	r18, r1
 88c:	31 05       	cpc	r19, r1
 88e:	41 f4       	brne	.+16     	; 0x8a0 <malloc+0xee>
 890:	2d b7       	in	r18, 0x3d	; 61
 892:	3e b7       	in	r19, 0x3e	; 62
 894:	40 91 04 01 	lds	r20, 0x0104
 898:	50 91 05 01 	lds	r21, 0x0105
 89c:	24 1b       	sub	r18, r20
 89e:	35 0b       	sbc	r19, r21
 8a0:	e0 91 36 01 	lds	r30, 0x0136
 8a4:	f0 91 37 01 	lds	r31, 0x0137
 8a8:	e2 17       	cp	r30, r18
 8aa:	f3 07       	cpc	r31, r19
 8ac:	a0 f4       	brcc	.+40     	; 0x8d6 <malloc+0x124>
 8ae:	2e 1b       	sub	r18, r30
 8b0:	3f 0b       	sbc	r19, r31
 8b2:	28 17       	cp	r18, r24
 8b4:	39 07       	cpc	r19, r25
 8b6:	78 f0       	brcs	.+30     	; 0x8d6 <malloc+0x124>
 8b8:	ac 01       	movw	r20, r24
 8ba:	4e 5f       	subi	r20, 0xFE	; 254
 8bc:	5f 4f       	sbci	r21, 0xFF	; 255
 8be:	24 17       	cp	r18, r20
 8c0:	35 07       	cpc	r19, r21
 8c2:	48 f0       	brcs	.+18     	; 0x8d6 <malloc+0x124>
 8c4:	4e 0f       	add	r20, r30
 8c6:	5f 1f       	adc	r21, r31
 8c8:	50 93 37 01 	sts	0x0137, r21
 8cc:	40 93 36 01 	sts	0x0136, r20
 8d0:	81 93       	st	Z+, r24
 8d2:	91 93       	st	Z+, r25
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <malloc+0x128>
 8d6:	e0 e0       	ldi	r30, 0x00	; 0
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	cf 01       	movw	r24, r30
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	08 95       	ret

000008e2 <free>:
 8e2:	cf 93       	push	r28
 8e4:	df 93       	push	r29
 8e6:	00 97       	sbiw	r24, 0x00	; 0
 8e8:	09 f4       	brne	.+2      	; 0x8ec <free+0xa>
 8ea:	87 c0       	rjmp	.+270    	; 0x9fa <free+0x118>
 8ec:	fc 01       	movw	r30, r24
 8ee:	32 97       	sbiw	r30, 0x02	; 2
 8f0:	13 82       	std	Z+3, r1	; 0x03
 8f2:	12 82       	std	Z+2, r1	; 0x02
 8f4:	c0 91 38 01 	lds	r28, 0x0138
 8f8:	d0 91 39 01 	lds	r29, 0x0139
 8fc:	20 97       	sbiw	r28, 0x00	; 0
 8fe:	81 f4       	brne	.+32     	; 0x920 <free+0x3e>
 900:	20 81       	ld	r18, Z
 902:	31 81       	ldd	r19, Z+1	; 0x01
 904:	28 0f       	add	r18, r24
 906:	39 1f       	adc	r19, r25
 908:	80 91 36 01 	lds	r24, 0x0136
 90c:	90 91 37 01 	lds	r25, 0x0137
 910:	82 17       	cp	r24, r18
 912:	93 07       	cpc	r25, r19
 914:	79 f5       	brne	.+94     	; 0x974 <free+0x92>
 916:	f0 93 37 01 	sts	0x0137, r31
 91a:	e0 93 36 01 	sts	0x0136, r30
 91e:	6d c0       	rjmp	.+218    	; 0x9fa <free+0x118>
 920:	de 01       	movw	r26, r28
 922:	20 e0       	ldi	r18, 0x00	; 0
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	ae 17       	cp	r26, r30
 928:	bf 07       	cpc	r27, r31
 92a:	50 f4       	brcc	.+20     	; 0x940 <free+0x5e>
 92c:	12 96       	adiw	r26, 0x02	; 2
 92e:	4d 91       	ld	r20, X+
 930:	5c 91       	ld	r21, X
 932:	13 97       	sbiw	r26, 0x03	; 3
 934:	9d 01       	movw	r18, r26
 936:	41 15       	cp	r20, r1
 938:	51 05       	cpc	r21, r1
 93a:	09 f1       	breq	.+66     	; 0x97e <free+0x9c>
 93c:	da 01       	movw	r26, r20
 93e:	f3 cf       	rjmp	.-26     	; 0x926 <free+0x44>
 940:	b3 83       	std	Z+3, r27	; 0x03
 942:	a2 83       	std	Z+2, r26	; 0x02
 944:	40 81       	ld	r20, Z
 946:	51 81       	ldd	r21, Z+1	; 0x01
 948:	84 0f       	add	r24, r20
 94a:	95 1f       	adc	r25, r21
 94c:	8a 17       	cp	r24, r26
 94e:	9b 07       	cpc	r25, r27
 950:	71 f4       	brne	.+28     	; 0x96e <free+0x8c>
 952:	8d 91       	ld	r24, X+
 954:	9c 91       	ld	r25, X
 956:	11 97       	sbiw	r26, 0x01	; 1
 958:	84 0f       	add	r24, r20
 95a:	95 1f       	adc	r25, r21
 95c:	02 96       	adiw	r24, 0x02	; 2
 95e:	91 83       	std	Z+1, r25	; 0x01
 960:	80 83       	st	Z, r24
 962:	12 96       	adiw	r26, 0x02	; 2
 964:	8d 91       	ld	r24, X+
 966:	9c 91       	ld	r25, X
 968:	13 97       	sbiw	r26, 0x03	; 3
 96a:	93 83       	std	Z+3, r25	; 0x03
 96c:	82 83       	std	Z+2, r24	; 0x02
 96e:	21 15       	cp	r18, r1
 970:	31 05       	cpc	r19, r1
 972:	29 f4       	brne	.+10     	; 0x97e <free+0x9c>
 974:	f0 93 39 01 	sts	0x0139, r31
 978:	e0 93 38 01 	sts	0x0138, r30
 97c:	3e c0       	rjmp	.+124    	; 0x9fa <free+0x118>
 97e:	d9 01       	movw	r26, r18
 980:	13 96       	adiw	r26, 0x03	; 3
 982:	fc 93       	st	X, r31
 984:	ee 93       	st	-X, r30
 986:	12 97       	sbiw	r26, 0x02	; 2
 988:	4d 91       	ld	r20, X+
 98a:	5d 91       	ld	r21, X+
 98c:	a4 0f       	add	r26, r20
 98e:	b5 1f       	adc	r27, r21
 990:	ea 17       	cp	r30, r26
 992:	fb 07       	cpc	r31, r27
 994:	79 f4       	brne	.+30     	; 0x9b4 <free+0xd2>
 996:	80 81       	ld	r24, Z
 998:	91 81       	ldd	r25, Z+1	; 0x01
 99a:	84 0f       	add	r24, r20
 99c:	95 1f       	adc	r25, r21
 99e:	02 96       	adiw	r24, 0x02	; 2
 9a0:	d9 01       	movw	r26, r18
 9a2:	11 96       	adiw	r26, 0x01	; 1
 9a4:	9c 93       	st	X, r25
 9a6:	8e 93       	st	-X, r24
 9a8:	82 81       	ldd	r24, Z+2	; 0x02
 9aa:	93 81       	ldd	r25, Z+3	; 0x03
 9ac:	13 96       	adiw	r26, 0x03	; 3
 9ae:	9c 93       	st	X, r25
 9b0:	8e 93       	st	-X, r24
 9b2:	12 97       	sbiw	r26, 0x02	; 2
 9b4:	e0 e0       	ldi	r30, 0x00	; 0
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ba:	9b 81       	ldd	r25, Y+3	; 0x03
 9bc:	00 97       	sbiw	r24, 0x00	; 0
 9be:	19 f0       	breq	.+6      	; 0x9c6 <free+0xe4>
 9c0:	fe 01       	movw	r30, r28
 9c2:	ec 01       	movw	r28, r24
 9c4:	f9 cf       	rjmp	.-14     	; 0x9b8 <free+0xd6>
 9c6:	ce 01       	movw	r24, r28
 9c8:	02 96       	adiw	r24, 0x02	; 2
 9ca:	28 81       	ld	r18, Y
 9cc:	39 81       	ldd	r19, Y+1	; 0x01
 9ce:	82 0f       	add	r24, r18
 9d0:	93 1f       	adc	r25, r19
 9d2:	20 91 36 01 	lds	r18, 0x0136
 9d6:	30 91 37 01 	lds	r19, 0x0137
 9da:	28 17       	cp	r18, r24
 9dc:	39 07       	cpc	r19, r25
 9de:	69 f4       	brne	.+26     	; 0x9fa <free+0x118>
 9e0:	30 97       	sbiw	r30, 0x00	; 0
 9e2:	29 f4       	brne	.+10     	; 0x9ee <free+0x10c>
 9e4:	10 92 39 01 	sts	0x0139, r1
 9e8:	10 92 38 01 	sts	0x0138, r1
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <free+0x110>
 9ee:	13 82       	std	Z+3, r1	; 0x03
 9f0:	12 82       	std	Z+2, r1	; 0x02
 9f2:	d0 93 37 01 	sts	0x0137, r29
 9f6:	c0 93 36 01 	sts	0x0136, r28
 9fa:	df 91       	pop	r29
 9fc:	cf 91       	pop	r28
 9fe:	08 95       	ret

00000a00 <memset>:
 a00:	dc 01       	movw	r26, r24
 a02:	01 c0       	rjmp	.+2      	; 0xa06 <memset+0x6>
 a04:	6d 93       	st	X+, r22
 a06:	41 50       	subi	r20, 0x01	; 1
 a08:	50 40       	sbci	r21, 0x00	; 0
 a0a:	e0 f7       	brcc	.-8      	; 0xa04 <memset+0x4>
 a0c:	08 95       	ret

00000a0e <_exit>:
 a0e:	f8 94       	cli

00000a10 <__stop_program>:
 a10:	ff cf       	rjmp	.-2      	; 0xa10 <__stop_program>
