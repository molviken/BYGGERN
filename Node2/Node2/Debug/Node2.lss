
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800200  00000c7e  00000d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800246  00800246  00000d58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e64  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006df  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b1  00000000  00000000  00002427  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b4  00000000  00000000  00002cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034e  00000000  00000000  00002f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000060e  00000000  00000000  000032da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	18 c1       	rjmp	.+560    	; 0x236 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e7       	ldi	r30, 0x7E	; 126
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 34       	cpi	r26, 0x46	; 70
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e4       	ldi	r26, 0x46	; 70
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 35       	cpi	r26, 0x51	; 81
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b8 d0       	rcall	.+368    	; 0x290 <main>
 120:	ac c5       	rjmp	.+2904   	; 0xc7a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
	}
	else{
		if(CAN_check_error()<0){return -1;}
	}
	return 0;
}
 124:	18 d1       	rcall	.+560    	; 0x356 <MCP_init>
 126:	4f ef       	ldi	r20, 0xFF	; 255
 128:	64 e6       	ldi	r22, 0x64	; 100
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	ee d0       	rcall	.+476    	; 0x30a <MCP_bit_mod>
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	60 ee       	ldi	r22, 0xE0	; 224
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	ea d0       	rcall	.+468    	; 0x30a <MCP_bit_mod>
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	8b e2       	ldi	r24, 0x2B	; 43
 13c:	e6 d0       	rcall	.+460    	; 0x30a <MCP_bit_mod>
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	64 e0       	ldi	r22, 0x04	; 4
 142:	8b e2       	ldi	r24, 0x2B	; 43
 144:	e2 d0       	rcall	.+452    	; 0x30a <MCP_bit_mod>
 146:	8e e0       	ldi	r24, 0x0E	; 14
 148:	d1 d0       	rcall	.+418    	; 0x2ec <MCP_read>
 14a:	80 7e       	andi	r24, 0xE0	; 224
 14c:	19 f0       	breq	.+6      	; 0x154 <CAN_init+0x30>
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	8a d1       	rcall	.+788    	; 0x468 <puts>
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	ca c0       	rjmp	.+404    	; 0x2ec <MCP_read>
 158:	08 95       	ret

0000015a <CAN_int_vect>:
	}
}

void CAN_int_vect(void){
	// clear interrupt flag in buffer 0
	MCP_bit_mod(MCP_CANINTF, 0x01, 0);
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	8c e2       	ldi	r24, 0x2C	; 44
 160:	d4 d0       	rcall	.+424    	; 0x30a <MCP_bit_mod>
	rx_flag = 1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	80 93 46 02 	sts	0x0246, r24
 168:	08 95       	ret

0000016a <CAN_receive>:
}

struct CAN_message CAN_receive(void){
 16a:	af 92       	push	r10
 16c:	bf 92       	push	r11
 16e:	cf 92       	push	r12
 170:	df 92       	push	r13
 172:	ef 92       	push	r14
 174:	ff 92       	push	r15
 176:	0f 93       	push	r16
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	2a 97       	sbiw	r28, 0x0a	; 10
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	7c 01       	movw	r14, r24
	struct CAN_message new_message;
	MCP_read(MCP_RXB0SIDL) >> 5;
 190:	82 e6       	ldi	r24, 0x62	; 98
 192:	ac d0       	rcall	.+344    	; 0x2ec <MCP_read>
	MCP_read(MCP_RXB0SIDH) << 3;
 194:	81 e6       	ldi	r24, 0x61	; 97
 196:	aa d0       	rcall	.+340    	; 0x2ec <MCP_read>

	if(MCP_read(MCP_CANINTF) & MCP_RX0IF){
 198:	8c e2       	ldi	r24, 0x2C	; 44
 19a:	a8 d0       	rcall	.+336    	; 0x2ec <MCP_read>
 19c:	80 ff       	sbrs	r24, 0
 19e:	2d c0       	rjmp	.+90     	; 0x1fa <CAN_receive+0x90>
	
		// writing the 8 bits we want from IDH and IDL
		new_message.id = MCP_read(MCP_RXB0SIDL) >> 5;
 1a0:	82 e6       	ldi	r24, 0x62	; 98
 1a2:	a4 d0       	rcall	.+328    	; 0x2ec <MCP_read>
 1a4:	a8 2e       	mov	r10, r24
		new_message.id |= MCP_read(MCP_RXB0SIDH) << 3;
 1a6:	81 e6       	ldi	r24, 0x61	; 97
 1a8:	a1 d0       	rcall	.+322    	; 0x2ec <MCP_read>
 1aa:	28 e0       	ldi	r18, 0x08	; 8
 1ac:	82 9f       	mul	r24, r18
 1ae:	c0 01       	movw	r24, r0
 1b0:	11 24       	eor	r1, r1
	MCP_read(MCP_RXB0SIDH) << 3;

	if(MCP_read(MCP_CANINTF) & MCP_RX0IF){
	
		// writing the 8 bits we want from IDH and IDL
		new_message.id = MCP_read(MCP_RXB0SIDL) >> 5;
 1b2:	a6 94       	lsr	r10
 1b4:	a6 94       	lsr	r10
 1b6:	a6 94       	lsr	r10
 1b8:	a6 94       	lsr	r10
 1ba:	a6 94       	lsr	r10
		new_message.id |= MCP_read(MCP_RXB0SIDH) << 3;
 1bc:	a8 2a       	or	r10, r24
		// Get the length (only last 4 bits)
		new_message.length = MCP_read(0x65);
 1be:	85 e6       	ldi	r24, 0x65	; 101
 1c0:	95 d0       	rcall	.+298    	; 0x2ec <MCP_read>
 1c2:	b8 2e       	mov	r11, r24
		
		// Get the required data from RXB0DM
		for(uint8_t i = 0; i < new_message.length; i++){
 1c4:	88 23       	and	r24, r24
 1c6:	a1 f0       	breq	.+40     	; 0x1f0 <CAN_receive+0x86>
 1c8:	8e 01       	movw	r16, r28
 1ca:	0d 5f       	subi	r16, 0xFD	; 253
 1cc:	1f 4f       	sbci	r17, 0xFF	; 255
 1ce:	0f 2e       	mov	r0, r31
 1d0:	f6 e6       	ldi	r31, 0x66	; 102
 1d2:	cf 2e       	mov	r12, r31
 1d4:	f0 2d       	mov	r31, r0
 1d6:	c8 0e       	add	r12, r24
 1d8:	0f 2e       	mov	r0, r31
 1da:	f6 e6       	ldi	r31, 0x66	; 102
 1dc:	df 2e       	mov	r13, r31
 1de:	f0 2d       	mov	r31, r0
			new_message.data[i] = MCP_read(MCP_RXB0D0 + i);
 1e0:	8d 2d       	mov	r24, r13
 1e2:	84 d0       	rcall	.+264    	; 0x2ec <MCP_read>
 1e4:	f8 01       	movw	r30, r16
 1e6:	81 93       	st	Z+, r24
 1e8:	8f 01       	movw	r16, r30
 1ea:	d3 94       	inc	r13
		new_message.id |= MCP_read(MCP_RXB0SIDH) << 3;
		// Get the length (only last 4 bits)
		new_message.length = MCP_read(0x65);
		
		// Get the required data from RXB0DM
		for(uint8_t i = 0; i < new_message.length; i++){
 1ec:	dc 10       	cpse	r13, r12
 1ee:	f8 cf       	rjmp	.-16     	; 0x1e0 <CAN_receive+0x76>
			new_message.data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		MCP_bit_mod(MCP_CANINTF, 0xff, 0);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	6f ef       	ldi	r22, 0xFF	; 255
 1f4:	8c e2       	ldi	r24, 0x2C	; 44
 1f6:	89 d0       	rcall	.+274    	; 0x30a <MCP_bit_mod>
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <CAN_receive+0x94>
	}
	else{
		// message not received
		new_message.id = -1;
 1fa:	aa 24       	eor	r10, r10
 1fc:	aa 94       	dec	r10
	}
	//_delay_ms(370);
	
	return new_message;
 1fe:	a9 82       	std	Y+1, r10	; 0x01
 200:	ba 82       	std	Y+2, r11	; 0x02
 202:	8a e0       	ldi	r24, 0x0A	; 10
 204:	fe 01       	movw	r30, r28
 206:	31 96       	adiw	r30, 0x01	; 1
 208:	d7 01       	movw	r26, r14
 20a:	01 90       	ld	r0, Z+
 20c:	0d 92       	st	X+, r0
 20e:	8a 95       	dec	r24
 210:	e1 f7       	brne	.-8      	; 0x20a <CAN_receive+0xa0>
}
 212:	c7 01       	movw	r24, r14
 214:	2a 96       	adiw	r28, 0x0a	; 10
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	bf 90       	pop	r11
 232:	af 90       	pop	r10
 234:	08 95       	ret

00000236 <__vector_1>:

// Interrupt service
ISR(INT0_vect){
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	0b b6       	in	r0, 0x3b	; 59
 242:	0f 92       	push	r0
 244:	2f 93       	push	r18
 246:	3f 93       	push	r19
 248:	4f 93       	push	r20
 24a:	5f 93       	push	r21
 24c:	6f 93       	push	r22
 24e:	7f 93       	push	r23
 250:	8f 93       	push	r24
 252:	9f 93       	push	r25
 254:	af 93       	push	r26
 256:	bf 93       	push	r27
 258:	ef 93       	push	r30
 25a:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	83 ec       	ldi	r24, 0xC3	; 195
 25e:	99 e0       	ldi	r25, 0x09	; 9
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <__vector_1+0x2a>
 264:	00 c0       	rjmp	.+0      	; 0x266 <__vector_1+0x30>
 266:	00 00       	nop
	_delay_ms(10);
	CAN_int_vect();
 268:	78 df       	rcall	.-272    	; 0x15a <CAN_int_vect>
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	bf 91       	pop	r27
 270:	af 91       	pop	r26
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	7f 91       	pop	r23
 278:	6f 91       	pop	r22
 27a:	5f 91       	pop	r21
 27c:	4f 91       	pop	r20
 27e:	3f 91       	pop	r19
 280:	2f 91       	pop	r18
 282:	0f 90       	pop	r0
 284:	0b be       	out	0x3b, r0	; 59
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <main>:
#include "joystick.h"
#include "MCP2515.h"
#include <avr/io.h>

int main(void)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	2a 97       	sbiw	r28, 0x0a	; 10
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
	USART_Init(103);
 2a4:	87 e6       	ldi	r24, 0x67	; 103
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	77 d0       	rcall	.+238    	; 0x398 <USART_Init>
	DDRB = 0b00000000;
 2aa:	14 b8       	out	0x04, r1	; 4
	CAN_init();
 2ac:	3b df       	rcall	.-394    	; 0x124 <CAN_init>
	struct CAN_message copy_message;
	
	while(1) {
		copy_message = CAN_receive();
		
		printf("X: %i	Y: %i	 \n",copy_message.data[0], copy_message.data[1]);
 2ae:	0c e1       	ldi	r16, 0x1C	; 28
 2b0:	12 e0       	ldi	r17, 0x02	; 2
	DDRB = 0b00000000;
	CAN_init();
	struct CAN_message copy_message;
	
	while(1) {
		copy_message = CAN_receive();
 2b2:	ce 01       	movw	r24, r28
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	59 df       	rcall	.-334    	; 0x16a <CAN_receive>
		
		printf("X: %i	Y: %i	 \n",copy_message.data[0], copy_message.data[1]);
 2b8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ba:	1f 92       	push	r1
 2bc:	8f 93       	push	r24
 2be:	8b 81       	ldd	r24, Y+3	; 0x03
 2c0:	1f 92       	push	r1
 2c2:	8f 93       	push	r24
 2c4:	1f 93       	push	r17
 2c6:	0f 93       	push	r16
 2c8:	be d0       	rcall	.+380    	; 0x446 <printf>
 2ca:	87 ea       	ldi	r24, 0xA7	; 167
 2cc:	91 e6       	ldi	r25, 0x61	; 97
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <main+0x3e>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x44>
 2d4:	00 00       	nop
 2d6:	0f 90       	pop	r0
 2d8:	0f 90       	pop	r0
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	e7 cf       	rjmp	.-50     	; 0x2b2 <main+0x22>

000002e4 <select_CAN>:
uint8_t MCP_read_status(){
	select_CAN();
	SPI_MasterTransmit(MCP_READ_STATUS);
	deselect_CAN();
	return SPI_MasterReceive();
}
 2e4:	2f 98       	cbi	0x05, 7	; 5
 2e6:	08 95       	ret

000002e8 <deselect_CAN>:
 2e8:	2f 9a       	sbi	0x05, 7	; 5
 2ea:	08 95       	ret

000002ec <MCP_read>:
 2ec:	cf 93       	push	r28
 2ee:	c8 2f       	mov	r28, r24
 2f0:	f9 df       	rcall	.-14     	; 0x2e4 <select_CAN>
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	37 d0       	rcall	.+110    	; 0x366 <SPI_MasterTransmit>
 2f8:	8c 2f       	mov	r24, r28
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	34 d0       	rcall	.+104    	; 0x366 <SPI_MasterTransmit>
 2fe:	38 d0       	rcall	.+112    	; 0x370 <SPI_MasterReceive>
 300:	c8 2f       	mov	r28, r24
 302:	f2 df       	rcall	.-28     	; 0x2e8 <deselect_CAN>
 304:	8c 2f       	mov	r24, r28
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <MCP_bit_mod>:

void MCP_bit_mod(uint8_t address, uint8_t m_byte, uint8_t d_byte){
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	18 2f       	mov	r17, r24
 312:	d6 2f       	mov	r29, r22
 314:	c4 2f       	mov	r28, r20
	select_CAN();
 316:	e6 df       	rcall	.-52     	; 0x2e4 <select_CAN>
	SPI_MasterTransmit(MCP_BITMOD);
 318:	85 e0       	ldi	r24, 0x05	; 5
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	24 d0       	rcall	.+72     	; 0x366 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 31e:	81 2f       	mov	r24, r17
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	21 d0       	rcall	.+66     	; 0x366 <SPI_MasterTransmit>
	SPI_MasterTransmit(m_byte);
 324:	8d 2f       	mov	r24, r29
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	1e d0       	rcall	.+60     	; 0x366 <SPI_MasterTransmit>
	SPI_MasterTransmit(d_byte);
 32a:	8c 2f       	mov	r24, r28
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	1b d0       	rcall	.+54     	; 0x366 <SPI_MasterTransmit>
	deselect_CAN();
 330:	db df       	rcall	.-74     	; 0x2e8 <deselect_CAN>
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	08 95       	ret

0000033a <MCP_reset>:

void MCP_reset(){
	select_CAN();
 33a:	d4 df       	rcall	.-88     	; 0x2e4 <select_CAN>
	SPI_MasterTransmit(MCP_RESET);
 33c:	80 ec       	ldi	r24, 0xC0	; 192
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	12 d0       	rcall	.+36     	; 0x366 <SPI_MasterTransmit>
	deselect_CAN();
 342:	d2 df       	rcall	.-92     	; 0x2e8 <deselect_CAN>
	uint8_t mode = MCP_read(MCP_CANSTAT);
 344:	8e e0       	ldi	r24, 0x0E	; 14
 346:	d2 df       	rcall	.-92     	; 0x2ec <MCP_read>
	if ((mode&MODE_MASK)!=MODE_CONFIG)
 348:	80 7e       	andi	r24, 0xE0	; 224
 34a:	80 38       	cpi	r24, 0x80	; 128
 34c:	19 f0       	breq	.+6      	; 0x354 <MCP_reset+0x1a>
	{
		printf("Not in config after reset\n");
 34e:	8b e2       	ldi	r24, 0x2B	; 43
 350:	92 e0       	ldi	r25, 0x02	; 2
 352:	8a c0       	rjmp	.+276    	; 0x468 <puts>
 354:	08 95       	ret

00000356 <MCP_init>:
void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
}

void MCP_init(){
	SPI_MasterInit();
 356:	02 d0       	rcall	.+4      	; 0x35c <SPI_MasterInit>
	MCP_reset();
 358:	f0 cf       	rjmp	.-32     	; 0x33a <MCP_reset>
 35a:	08 95       	ret

0000035c <SPI_MasterInit>:

#include "SPI.h"

void SPI_MasterInit(void){
	/* Set MOSI,SCK and SS output, all others input */
	DDRB = (1<<DD_MOSI) | (1<<DD_SCK) | (1 << DD_SS) | (1 << PB0);
 35c:	87 e8       	ldi	r24, 0x87	; 135
 35e:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 360:	81 e5       	ldi	r24, 0x51	; 81
 362:	8c bd       	out	0x2c, r24	; 44
 364:	08 95       	ret

00000366 <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData){
	/* Start transmission */
	SPDR = cData;
 366:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while	(!(SPSR & (1<<SPIF)));
 368:	0d b4       	in	r0, 0x2d	; 45
 36a:	07 fe       	sbrs	r0, 7
 36c:	fd cf       	rjmp	.-6      	; 0x368 <SPI_MasterTransmit+0x2>
}
 36e:	08 95       	ret

00000370 <SPI_MasterReceive>:

char SPI_MasterReceive(void){
	/* Send dummy data to read from slave */	
	SPI_MasterTransmit(0);
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	f9 df       	rcall	.-14     	; 0x366 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	// while	(!(SPSR & (1<<SPIF)));
	
	/* Return data register */
	return	SPDR;
 374:	8e b5       	in	r24, 0x2e	; 46
 376:	08 95       	ret

00000378 <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

// Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 378:	e0 ec       	ldi	r30, 0xC0	; 192
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	90 81       	ld	r25, Z
 37e:	95 ff       	sbrs	r25, 5
 380:	fd cf       	rjmp	.-6      	; 0x37c <USART_Transmit+0x4>
  
//Put data into buffer, sends the data
	UDR0 = data;
 382:	80 93 c6 00 	sts	0x00C6, r24
 386:	08 95       	ret

00000388 <USART_Receive>:
}

unsigned char USART_Receive( void ){

//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 388:	e0 ec       	ldi	r30, 0xC0	; 192
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	ec f7       	brge	.-6      	; 0x38c <USART_Receive+0x4>
//Get and return received data from buffer
	return UDR0;
 392:	80 91 c6 00 	lds	r24, 0x00C6
 396:	08 95       	ret

00000398 <USART_Init>:
	//set_bit(SFIOR,XMM2);
	////set_bit(SFIOR,XMM0);
//}
void USART_Init( unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 398:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 39c:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable receiver and transmitter	*/
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 3a0:	88 e1       	ldi	r24, 0x18	; 24
 3a2:	80 93 c1 00 	sts	0x00C1, r24
	fdevopen(USART_Transmit,USART_Receive);
 3a6:	64 ec       	ldi	r22, 0xC4	; 196
 3a8:	71 e0       	ldi	r23, 0x01	; 1
 3aa:	8c eb       	ldi	r24, 0xBC	; 188
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <fdevopen>
 3b0:	08 95       	ret

000003b2 <fdevopen>:
 3b2:	0f 93       	push	r16
 3b4:	1f 93       	push	r17
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	ec 01       	movw	r28, r24
 3bc:	8b 01       	movw	r16, r22
 3be:	00 97       	sbiw	r24, 0x00	; 0
 3c0:	31 f4       	brne	.+12     	; 0x3ce <fdevopen+0x1c>
 3c2:	61 15       	cp	r22, r1
 3c4:	71 05       	cpc	r23, r1
 3c6:	19 f4       	brne	.+6      	; 0x3ce <fdevopen+0x1c>
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	37 c0       	rjmp	.+110    	; 0x43c <fdevopen+0x8a>
 3ce:	6e e0       	ldi	r22, 0x0E	; 14
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	63 d2       	rcall	.+1222   	; 0x89e <calloc>
 3d8:	fc 01       	movw	r30, r24
 3da:	00 97       	sbiw	r24, 0x00	; 0
 3dc:	a9 f3       	breq	.-22     	; 0x3c8 <fdevopen+0x16>
 3de:	80 e8       	ldi	r24, 0x80	; 128
 3e0:	83 83       	std	Z+3, r24	; 0x03
 3e2:	01 15       	cp	r16, r1
 3e4:	11 05       	cpc	r17, r1
 3e6:	71 f0       	breq	.+28     	; 0x404 <fdevopen+0x52>
 3e8:	13 87       	std	Z+11, r17	; 0x0b
 3ea:	02 87       	std	Z+10, r16	; 0x0a
 3ec:	81 e8       	ldi	r24, 0x81	; 129
 3ee:	83 83       	std	Z+3, r24	; 0x03
 3f0:	80 91 47 02 	lds	r24, 0x0247
 3f4:	90 91 48 02 	lds	r25, 0x0248
 3f8:	89 2b       	or	r24, r25
 3fa:	21 f4       	brne	.+8      	; 0x404 <fdevopen+0x52>
 3fc:	f0 93 48 02 	sts	0x0248, r31
 400:	e0 93 47 02 	sts	0x0247, r30
 404:	20 97       	sbiw	r28, 0x00	; 0
 406:	c9 f0       	breq	.+50     	; 0x43a <fdevopen+0x88>
 408:	d1 87       	std	Z+9, r29	; 0x09
 40a:	c0 87       	std	Z+8, r28	; 0x08
 40c:	83 81       	ldd	r24, Z+3	; 0x03
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	83 83       	std	Z+3, r24	; 0x03
 412:	80 91 49 02 	lds	r24, 0x0249
 416:	90 91 4a 02 	lds	r25, 0x024A
 41a:	89 2b       	or	r24, r25
 41c:	71 f4       	brne	.+28     	; 0x43a <fdevopen+0x88>
 41e:	f0 93 4a 02 	sts	0x024A, r31
 422:	e0 93 49 02 	sts	0x0249, r30
 426:	80 91 4b 02 	lds	r24, 0x024B
 42a:	90 91 4c 02 	lds	r25, 0x024C
 42e:	89 2b       	or	r24, r25
 430:	21 f4       	brne	.+8      	; 0x43a <fdevopen+0x88>
 432:	f0 93 4c 02 	sts	0x024C, r31
 436:	e0 93 4b 02 	sts	0x024B, r30
 43a:	cf 01       	movw	r24, r30
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	08 95       	ret

00000446 <printf>:
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	cd b7       	in	r28, 0x3d	; 61
 44c:	de b7       	in	r29, 0x3e	; 62
 44e:	fe 01       	movw	r30, r28
 450:	36 96       	adiw	r30, 0x06	; 6
 452:	61 91       	ld	r22, Z+
 454:	71 91       	ld	r23, Z+
 456:	af 01       	movw	r20, r30
 458:	80 91 49 02 	lds	r24, 0x0249
 45c:	90 91 4a 02 	lds	r25, 0x024A
 460:	30 d0       	rcall	.+96     	; 0x4c2 <vfprintf>
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <puts>:
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	e0 91 49 02 	lds	r30, 0x0249
 474:	f0 91 4a 02 	lds	r31, 0x024A
 478:	23 81       	ldd	r18, Z+3	; 0x03
 47a:	21 ff       	sbrs	r18, 1
 47c:	1b c0       	rjmp	.+54     	; 0x4b4 <puts+0x4c>
 47e:	ec 01       	movw	r28, r24
 480:	00 e0       	ldi	r16, 0x00	; 0
 482:	10 e0       	ldi	r17, 0x00	; 0
 484:	89 91       	ld	r24, Y+
 486:	60 91 49 02 	lds	r22, 0x0249
 48a:	70 91 4a 02 	lds	r23, 0x024A
 48e:	db 01       	movw	r26, r22
 490:	18 96       	adiw	r26, 0x08	; 8
 492:	ed 91       	ld	r30, X+
 494:	fc 91       	ld	r31, X
 496:	19 97       	sbiw	r26, 0x09	; 9
 498:	88 23       	and	r24, r24
 49a:	31 f0       	breq	.+12     	; 0x4a8 <puts+0x40>
 49c:	19 95       	eicall
 49e:	89 2b       	or	r24, r25
 4a0:	89 f3       	breq	.-30     	; 0x484 <puts+0x1c>
 4a2:	0f ef       	ldi	r16, 0xFF	; 255
 4a4:	1f ef       	ldi	r17, 0xFF	; 255
 4a6:	ee cf       	rjmp	.-36     	; 0x484 <puts+0x1c>
 4a8:	8a e0       	ldi	r24, 0x0A	; 10
 4aa:	19 95       	eicall
 4ac:	89 2b       	or	r24, r25
 4ae:	11 f4       	brne	.+4      	; 0x4b4 <puts+0x4c>
 4b0:	c8 01       	movw	r24, r16
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <puts+0x50>
 4b4:	8f ef       	ldi	r24, 0xFF	; 255
 4b6:	9f ef       	ldi	r25, 0xFF	; 255
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

000004c2 <vfprintf>:
 4c2:	2f 92       	push	r2
 4c4:	3f 92       	push	r3
 4c6:	4f 92       	push	r4
 4c8:	5f 92       	push	r5
 4ca:	6f 92       	push	r6
 4cc:	7f 92       	push	r7
 4ce:	8f 92       	push	r8
 4d0:	9f 92       	push	r9
 4d2:	af 92       	push	r10
 4d4:	bf 92       	push	r11
 4d6:	cf 92       	push	r12
 4d8:	df 92       	push	r13
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	2c 97       	sbiw	r28, 0x0c	; 12
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	7c 01       	movw	r14, r24
 4f8:	6b 01       	movw	r12, r22
 4fa:	8a 01       	movw	r16, r20
 4fc:	fc 01       	movw	r30, r24
 4fe:	17 82       	std	Z+7, r1	; 0x07
 500:	16 82       	std	Z+6, r1	; 0x06
 502:	83 81       	ldd	r24, Z+3	; 0x03
 504:	81 ff       	sbrs	r24, 1
 506:	b0 c1       	rjmp	.+864    	; 0x868 <vfprintf+0x3a6>
 508:	ce 01       	movw	r24, r28
 50a:	01 96       	adiw	r24, 0x01	; 1
 50c:	4c 01       	movw	r8, r24
 50e:	f7 01       	movw	r30, r14
 510:	93 81       	ldd	r25, Z+3	; 0x03
 512:	f6 01       	movw	r30, r12
 514:	93 fd       	sbrc	r25, 3
 516:	85 91       	lpm	r24, Z+
 518:	93 ff       	sbrs	r25, 3
 51a:	81 91       	ld	r24, Z+
 51c:	6f 01       	movw	r12, r30
 51e:	88 23       	and	r24, r24
 520:	09 f4       	brne	.+2      	; 0x524 <vfprintf+0x62>
 522:	9e c1       	rjmp	.+828    	; 0x860 <vfprintf+0x39e>
 524:	85 32       	cpi	r24, 0x25	; 37
 526:	39 f4       	brne	.+14     	; 0x536 <vfprintf+0x74>
 528:	93 fd       	sbrc	r25, 3
 52a:	85 91       	lpm	r24, Z+
 52c:	93 ff       	sbrs	r25, 3
 52e:	81 91       	ld	r24, Z+
 530:	6f 01       	movw	r12, r30
 532:	85 32       	cpi	r24, 0x25	; 37
 534:	21 f4       	brne	.+8      	; 0x53e <vfprintf+0x7c>
 536:	b7 01       	movw	r22, r14
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0f d3       	rcall	.+1566   	; 0xb5a <fputc>
 53c:	e8 cf       	rjmp	.-48     	; 0x50e <vfprintf+0x4c>
 53e:	51 2c       	mov	r5, r1
 540:	31 2c       	mov	r3, r1
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	20 32       	cpi	r18, 0x20	; 32
 546:	a0 f4       	brcc	.+40     	; 0x570 <vfprintf+0xae>
 548:	8b 32       	cpi	r24, 0x2B	; 43
 54a:	69 f0       	breq	.+26     	; 0x566 <vfprintf+0xa4>
 54c:	30 f4       	brcc	.+12     	; 0x55a <vfprintf+0x98>
 54e:	80 32       	cpi	r24, 0x20	; 32
 550:	59 f0       	breq	.+22     	; 0x568 <vfprintf+0xa6>
 552:	83 32       	cpi	r24, 0x23	; 35
 554:	69 f4       	brne	.+26     	; 0x570 <vfprintf+0xae>
 556:	20 61       	ori	r18, 0x10	; 16
 558:	2c c0       	rjmp	.+88     	; 0x5b2 <vfprintf+0xf0>
 55a:	8d 32       	cpi	r24, 0x2D	; 45
 55c:	39 f0       	breq	.+14     	; 0x56c <vfprintf+0xaa>
 55e:	80 33       	cpi	r24, 0x30	; 48
 560:	39 f4       	brne	.+14     	; 0x570 <vfprintf+0xae>
 562:	21 60       	ori	r18, 0x01	; 1
 564:	26 c0       	rjmp	.+76     	; 0x5b2 <vfprintf+0xf0>
 566:	22 60       	ori	r18, 0x02	; 2
 568:	24 60       	ori	r18, 0x04	; 4
 56a:	23 c0       	rjmp	.+70     	; 0x5b2 <vfprintf+0xf0>
 56c:	28 60       	ori	r18, 0x08	; 8
 56e:	21 c0       	rjmp	.+66     	; 0x5b2 <vfprintf+0xf0>
 570:	27 fd       	sbrc	r18, 7
 572:	27 c0       	rjmp	.+78     	; 0x5c2 <vfprintf+0x100>
 574:	30 ed       	ldi	r19, 0xD0	; 208
 576:	38 0f       	add	r19, r24
 578:	3a 30       	cpi	r19, 0x0A	; 10
 57a:	78 f4       	brcc	.+30     	; 0x59a <vfprintf+0xd8>
 57c:	26 ff       	sbrs	r18, 6
 57e:	06 c0       	rjmp	.+12     	; 0x58c <vfprintf+0xca>
 580:	fa e0       	ldi	r31, 0x0A	; 10
 582:	5f 9e       	mul	r5, r31
 584:	30 0d       	add	r19, r0
 586:	11 24       	eor	r1, r1
 588:	53 2e       	mov	r5, r19
 58a:	13 c0       	rjmp	.+38     	; 0x5b2 <vfprintf+0xf0>
 58c:	8a e0       	ldi	r24, 0x0A	; 10
 58e:	38 9e       	mul	r3, r24
 590:	30 0d       	add	r19, r0
 592:	11 24       	eor	r1, r1
 594:	33 2e       	mov	r3, r19
 596:	20 62       	ori	r18, 0x20	; 32
 598:	0c c0       	rjmp	.+24     	; 0x5b2 <vfprintf+0xf0>
 59a:	8e 32       	cpi	r24, 0x2E	; 46
 59c:	21 f4       	brne	.+8      	; 0x5a6 <vfprintf+0xe4>
 59e:	26 fd       	sbrc	r18, 6
 5a0:	5f c1       	rjmp	.+702    	; 0x860 <vfprintf+0x39e>
 5a2:	20 64       	ori	r18, 0x40	; 64
 5a4:	06 c0       	rjmp	.+12     	; 0x5b2 <vfprintf+0xf0>
 5a6:	8c 36       	cpi	r24, 0x6C	; 108
 5a8:	11 f4       	brne	.+4      	; 0x5ae <vfprintf+0xec>
 5aa:	20 68       	ori	r18, 0x80	; 128
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <vfprintf+0xf0>
 5ae:	88 36       	cpi	r24, 0x68	; 104
 5b0:	41 f4       	brne	.+16     	; 0x5c2 <vfprintf+0x100>
 5b2:	f6 01       	movw	r30, r12
 5b4:	93 fd       	sbrc	r25, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	93 ff       	sbrs	r25, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	6f 01       	movw	r12, r30
 5be:	81 11       	cpse	r24, r1
 5c0:	c1 cf       	rjmp	.-126    	; 0x544 <vfprintf+0x82>
 5c2:	98 2f       	mov	r25, r24
 5c4:	9f 7d       	andi	r25, 0xDF	; 223
 5c6:	95 54       	subi	r25, 0x45	; 69
 5c8:	93 30       	cpi	r25, 0x03	; 3
 5ca:	28 f4       	brcc	.+10     	; 0x5d6 <vfprintf+0x114>
 5cc:	0c 5f       	subi	r16, 0xFC	; 252
 5ce:	1f 4f       	sbci	r17, 0xFF	; 255
 5d0:	ff e3       	ldi	r31, 0x3F	; 63
 5d2:	f9 83       	std	Y+1, r31	; 0x01
 5d4:	0d c0       	rjmp	.+26     	; 0x5f0 <vfprintf+0x12e>
 5d6:	83 36       	cpi	r24, 0x63	; 99
 5d8:	31 f0       	breq	.+12     	; 0x5e6 <vfprintf+0x124>
 5da:	83 37       	cpi	r24, 0x73	; 115
 5dc:	71 f0       	breq	.+28     	; 0x5fa <vfprintf+0x138>
 5de:	83 35       	cpi	r24, 0x53	; 83
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <vfprintf+0x122>
 5e2:	57 c0       	rjmp	.+174    	; 0x692 <vfprintf+0x1d0>
 5e4:	21 c0       	rjmp	.+66     	; 0x628 <vfprintf+0x166>
 5e6:	f8 01       	movw	r30, r16
 5e8:	80 81       	ld	r24, Z
 5ea:	89 83       	std	Y+1, r24	; 0x01
 5ec:	0e 5f       	subi	r16, 0xFE	; 254
 5ee:	1f 4f       	sbci	r17, 0xFF	; 255
 5f0:	44 24       	eor	r4, r4
 5f2:	43 94       	inc	r4
 5f4:	51 2c       	mov	r5, r1
 5f6:	54 01       	movw	r10, r8
 5f8:	14 c0       	rjmp	.+40     	; 0x622 <vfprintf+0x160>
 5fa:	38 01       	movw	r6, r16
 5fc:	f2 e0       	ldi	r31, 0x02	; 2
 5fe:	6f 0e       	add	r6, r31
 600:	71 1c       	adc	r7, r1
 602:	f8 01       	movw	r30, r16
 604:	a0 80       	ld	r10, Z
 606:	b1 80       	ldd	r11, Z+1	; 0x01
 608:	26 ff       	sbrs	r18, 6
 60a:	03 c0       	rjmp	.+6      	; 0x612 <vfprintf+0x150>
 60c:	65 2d       	mov	r22, r5
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <vfprintf+0x154>
 612:	6f ef       	ldi	r22, 0xFF	; 255
 614:	7f ef       	ldi	r23, 0xFF	; 255
 616:	c5 01       	movw	r24, r10
 618:	2c 87       	std	Y+12, r18	; 0x0c
 61a:	94 d2       	rcall	.+1320   	; 0xb44 <strnlen>
 61c:	2c 01       	movw	r4, r24
 61e:	83 01       	movw	r16, r6
 620:	2c 85       	ldd	r18, Y+12	; 0x0c
 622:	2f 77       	andi	r18, 0x7F	; 127
 624:	22 2e       	mov	r2, r18
 626:	16 c0       	rjmp	.+44     	; 0x654 <vfprintf+0x192>
 628:	38 01       	movw	r6, r16
 62a:	f2 e0       	ldi	r31, 0x02	; 2
 62c:	6f 0e       	add	r6, r31
 62e:	71 1c       	adc	r7, r1
 630:	f8 01       	movw	r30, r16
 632:	a0 80       	ld	r10, Z
 634:	b1 80       	ldd	r11, Z+1	; 0x01
 636:	26 ff       	sbrs	r18, 6
 638:	03 c0       	rjmp	.+6      	; 0x640 <vfprintf+0x17e>
 63a:	65 2d       	mov	r22, r5
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <vfprintf+0x182>
 640:	6f ef       	ldi	r22, 0xFF	; 255
 642:	7f ef       	ldi	r23, 0xFF	; 255
 644:	c5 01       	movw	r24, r10
 646:	2c 87       	std	Y+12, r18	; 0x0c
 648:	6b d2       	rcall	.+1238   	; 0xb20 <strnlen_P>
 64a:	2c 01       	movw	r4, r24
 64c:	2c 85       	ldd	r18, Y+12	; 0x0c
 64e:	20 68       	ori	r18, 0x80	; 128
 650:	22 2e       	mov	r2, r18
 652:	83 01       	movw	r16, r6
 654:	23 fc       	sbrc	r2, 3
 656:	19 c0       	rjmp	.+50     	; 0x68a <vfprintf+0x1c8>
 658:	83 2d       	mov	r24, r3
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	48 16       	cp	r4, r24
 65e:	59 06       	cpc	r5, r25
 660:	a0 f4       	brcc	.+40     	; 0x68a <vfprintf+0x1c8>
 662:	b7 01       	movw	r22, r14
 664:	80 e2       	ldi	r24, 0x20	; 32
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	78 d2       	rcall	.+1264   	; 0xb5a <fputc>
 66a:	3a 94       	dec	r3
 66c:	f5 cf       	rjmp	.-22     	; 0x658 <vfprintf+0x196>
 66e:	f5 01       	movw	r30, r10
 670:	27 fc       	sbrc	r2, 7
 672:	85 91       	lpm	r24, Z+
 674:	27 fe       	sbrs	r2, 7
 676:	81 91       	ld	r24, Z+
 678:	5f 01       	movw	r10, r30
 67a:	b7 01       	movw	r22, r14
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	6d d2       	rcall	.+1242   	; 0xb5a <fputc>
 680:	31 10       	cpse	r3, r1
 682:	3a 94       	dec	r3
 684:	f1 e0       	ldi	r31, 0x01	; 1
 686:	4f 1a       	sub	r4, r31
 688:	51 08       	sbc	r5, r1
 68a:	41 14       	cp	r4, r1
 68c:	51 04       	cpc	r5, r1
 68e:	79 f7       	brne	.-34     	; 0x66e <vfprintf+0x1ac>
 690:	de c0       	rjmp	.+444    	; 0x84e <vfprintf+0x38c>
 692:	84 36       	cpi	r24, 0x64	; 100
 694:	11 f0       	breq	.+4      	; 0x69a <vfprintf+0x1d8>
 696:	89 36       	cpi	r24, 0x69	; 105
 698:	31 f5       	brne	.+76     	; 0x6e6 <vfprintf+0x224>
 69a:	f8 01       	movw	r30, r16
 69c:	27 ff       	sbrs	r18, 7
 69e:	07 c0       	rjmp	.+14     	; 0x6ae <vfprintf+0x1ec>
 6a0:	60 81       	ld	r22, Z
 6a2:	71 81       	ldd	r23, Z+1	; 0x01
 6a4:	82 81       	ldd	r24, Z+2	; 0x02
 6a6:	93 81       	ldd	r25, Z+3	; 0x03
 6a8:	0c 5f       	subi	r16, 0xFC	; 252
 6aa:	1f 4f       	sbci	r17, 0xFF	; 255
 6ac:	08 c0       	rjmp	.+16     	; 0x6be <vfprintf+0x1fc>
 6ae:	60 81       	ld	r22, Z
 6b0:	71 81       	ldd	r23, Z+1	; 0x01
 6b2:	88 27       	eor	r24, r24
 6b4:	77 fd       	sbrc	r23, 7
 6b6:	80 95       	com	r24
 6b8:	98 2f       	mov	r25, r24
 6ba:	0e 5f       	subi	r16, 0xFE	; 254
 6bc:	1f 4f       	sbci	r17, 0xFF	; 255
 6be:	2f 76       	andi	r18, 0x6F	; 111
 6c0:	b2 2e       	mov	r11, r18
 6c2:	97 ff       	sbrs	r25, 7
 6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <vfprintf+0x216>
 6c6:	90 95       	com	r25
 6c8:	80 95       	com	r24
 6ca:	70 95       	com	r23
 6cc:	61 95       	neg	r22
 6ce:	7f 4f       	sbci	r23, 0xFF	; 255
 6d0:	8f 4f       	sbci	r24, 0xFF	; 255
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	20 68       	ori	r18, 0x80	; 128
 6d6:	b2 2e       	mov	r11, r18
 6d8:	2a e0       	ldi	r18, 0x0A	; 10
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	a4 01       	movw	r20, r8
 6de:	6f d2       	rcall	.+1246   	; 0xbbe <__ultoa_invert>
 6e0:	a8 2e       	mov	r10, r24
 6e2:	a8 18       	sub	r10, r8
 6e4:	43 c0       	rjmp	.+134    	; 0x76c <vfprintf+0x2aa>
 6e6:	85 37       	cpi	r24, 0x75	; 117
 6e8:	29 f4       	brne	.+10     	; 0x6f4 <vfprintf+0x232>
 6ea:	2f 7e       	andi	r18, 0xEF	; 239
 6ec:	b2 2e       	mov	r11, r18
 6ee:	2a e0       	ldi	r18, 0x0A	; 10
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	25 c0       	rjmp	.+74     	; 0x73e <vfprintf+0x27c>
 6f4:	f2 2f       	mov	r31, r18
 6f6:	f9 7f       	andi	r31, 0xF9	; 249
 6f8:	bf 2e       	mov	r11, r31
 6fa:	8f 36       	cpi	r24, 0x6F	; 111
 6fc:	c1 f0       	breq	.+48     	; 0x72e <vfprintf+0x26c>
 6fe:	18 f4       	brcc	.+6      	; 0x706 <vfprintf+0x244>
 700:	88 35       	cpi	r24, 0x58	; 88
 702:	79 f0       	breq	.+30     	; 0x722 <vfprintf+0x260>
 704:	ad c0       	rjmp	.+346    	; 0x860 <vfprintf+0x39e>
 706:	80 37       	cpi	r24, 0x70	; 112
 708:	19 f0       	breq	.+6      	; 0x710 <vfprintf+0x24e>
 70a:	88 37       	cpi	r24, 0x78	; 120
 70c:	21 f0       	breq	.+8      	; 0x716 <vfprintf+0x254>
 70e:	a8 c0       	rjmp	.+336    	; 0x860 <vfprintf+0x39e>
 710:	2f 2f       	mov	r18, r31
 712:	20 61       	ori	r18, 0x10	; 16
 714:	b2 2e       	mov	r11, r18
 716:	b4 fe       	sbrs	r11, 4
 718:	0d c0       	rjmp	.+26     	; 0x734 <vfprintf+0x272>
 71a:	8b 2d       	mov	r24, r11
 71c:	84 60       	ori	r24, 0x04	; 4
 71e:	b8 2e       	mov	r11, r24
 720:	09 c0       	rjmp	.+18     	; 0x734 <vfprintf+0x272>
 722:	24 ff       	sbrs	r18, 4
 724:	0a c0       	rjmp	.+20     	; 0x73a <vfprintf+0x278>
 726:	9f 2f       	mov	r25, r31
 728:	96 60       	ori	r25, 0x06	; 6
 72a:	b9 2e       	mov	r11, r25
 72c:	06 c0       	rjmp	.+12     	; 0x73a <vfprintf+0x278>
 72e:	28 e0       	ldi	r18, 0x08	; 8
 730:	30 e0       	ldi	r19, 0x00	; 0
 732:	05 c0       	rjmp	.+10     	; 0x73e <vfprintf+0x27c>
 734:	20 e1       	ldi	r18, 0x10	; 16
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	02 c0       	rjmp	.+4      	; 0x73e <vfprintf+0x27c>
 73a:	20 e1       	ldi	r18, 0x10	; 16
 73c:	32 e0       	ldi	r19, 0x02	; 2
 73e:	f8 01       	movw	r30, r16
 740:	b7 fe       	sbrs	r11, 7
 742:	07 c0       	rjmp	.+14     	; 0x752 <vfprintf+0x290>
 744:	60 81       	ld	r22, Z
 746:	71 81       	ldd	r23, Z+1	; 0x01
 748:	82 81       	ldd	r24, Z+2	; 0x02
 74a:	93 81       	ldd	r25, Z+3	; 0x03
 74c:	0c 5f       	subi	r16, 0xFC	; 252
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	06 c0       	rjmp	.+12     	; 0x75e <vfprintf+0x29c>
 752:	60 81       	ld	r22, Z
 754:	71 81       	ldd	r23, Z+1	; 0x01
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 5f       	subi	r16, 0xFE	; 254
 75c:	1f 4f       	sbci	r17, 0xFF	; 255
 75e:	a4 01       	movw	r20, r8
 760:	2e d2       	rcall	.+1116   	; 0xbbe <__ultoa_invert>
 762:	a8 2e       	mov	r10, r24
 764:	a8 18       	sub	r10, r8
 766:	fb 2d       	mov	r31, r11
 768:	ff 77       	andi	r31, 0x7F	; 127
 76a:	bf 2e       	mov	r11, r31
 76c:	b6 fe       	sbrs	r11, 6
 76e:	0b c0       	rjmp	.+22     	; 0x786 <vfprintf+0x2c4>
 770:	2b 2d       	mov	r18, r11
 772:	2e 7f       	andi	r18, 0xFE	; 254
 774:	a5 14       	cp	r10, r5
 776:	50 f4       	brcc	.+20     	; 0x78c <vfprintf+0x2ca>
 778:	b4 fe       	sbrs	r11, 4
 77a:	0a c0       	rjmp	.+20     	; 0x790 <vfprintf+0x2ce>
 77c:	b2 fc       	sbrc	r11, 2
 77e:	08 c0       	rjmp	.+16     	; 0x790 <vfprintf+0x2ce>
 780:	2b 2d       	mov	r18, r11
 782:	2e 7e       	andi	r18, 0xEE	; 238
 784:	05 c0       	rjmp	.+10     	; 0x790 <vfprintf+0x2ce>
 786:	7a 2c       	mov	r7, r10
 788:	2b 2d       	mov	r18, r11
 78a:	03 c0       	rjmp	.+6      	; 0x792 <vfprintf+0x2d0>
 78c:	7a 2c       	mov	r7, r10
 78e:	01 c0       	rjmp	.+2      	; 0x792 <vfprintf+0x2d0>
 790:	75 2c       	mov	r7, r5
 792:	24 ff       	sbrs	r18, 4
 794:	0d c0       	rjmp	.+26     	; 0x7b0 <vfprintf+0x2ee>
 796:	fe 01       	movw	r30, r28
 798:	ea 0d       	add	r30, r10
 79a:	f1 1d       	adc	r31, r1
 79c:	80 81       	ld	r24, Z
 79e:	80 33       	cpi	r24, 0x30	; 48
 7a0:	11 f4       	brne	.+4      	; 0x7a6 <vfprintf+0x2e4>
 7a2:	29 7e       	andi	r18, 0xE9	; 233
 7a4:	09 c0       	rjmp	.+18     	; 0x7b8 <vfprintf+0x2f6>
 7a6:	22 ff       	sbrs	r18, 2
 7a8:	06 c0       	rjmp	.+12     	; 0x7b6 <vfprintf+0x2f4>
 7aa:	73 94       	inc	r7
 7ac:	73 94       	inc	r7
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <vfprintf+0x2f6>
 7b0:	82 2f       	mov	r24, r18
 7b2:	86 78       	andi	r24, 0x86	; 134
 7b4:	09 f0       	breq	.+2      	; 0x7b8 <vfprintf+0x2f6>
 7b6:	73 94       	inc	r7
 7b8:	23 fd       	sbrc	r18, 3
 7ba:	12 c0       	rjmp	.+36     	; 0x7e0 <vfprintf+0x31e>
 7bc:	20 ff       	sbrs	r18, 0
 7be:	06 c0       	rjmp	.+12     	; 0x7cc <vfprintf+0x30a>
 7c0:	5a 2c       	mov	r5, r10
 7c2:	73 14       	cp	r7, r3
 7c4:	18 f4       	brcc	.+6      	; 0x7cc <vfprintf+0x30a>
 7c6:	53 0c       	add	r5, r3
 7c8:	57 18       	sub	r5, r7
 7ca:	73 2c       	mov	r7, r3
 7cc:	73 14       	cp	r7, r3
 7ce:	60 f4       	brcc	.+24     	; 0x7e8 <vfprintf+0x326>
 7d0:	b7 01       	movw	r22, r14
 7d2:	80 e2       	ldi	r24, 0x20	; 32
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	2c 87       	std	Y+12, r18	; 0x0c
 7d8:	c0 d1       	rcall	.+896    	; 0xb5a <fputc>
 7da:	73 94       	inc	r7
 7dc:	2c 85       	ldd	r18, Y+12	; 0x0c
 7de:	f6 cf       	rjmp	.-20     	; 0x7cc <vfprintf+0x30a>
 7e0:	73 14       	cp	r7, r3
 7e2:	10 f4       	brcc	.+4      	; 0x7e8 <vfprintf+0x326>
 7e4:	37 18       	sub	r3, r7
 7e6:	01 c0       	rjmp	.+2      	; 0x7ea <vfprintf+0x328>
 7e8:	31 2c       	mov	r3, r1
 7ea:	24 ff       	sbrs	r18, 4
 7ec:	11 c0       	rjmp	.+34     	; 0x810 <vfprintf+0x34e>
 7ee:	b7 01       	movw	r22, r14
 7f0:	80 e3       	ldi	r24, 0x30	; 48
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	2c 87       	std	Y+12, r18	; 0x0c
 7f6:	b1 d1       	rcall	.+866    	; 0xb5a <fputc>
 7f8:	2c 85       	ldd	r18, Y+12	; 0x0c
 7fa:	22 ff       	sbrs	r18, 2
 7fc:	16 c0       	rjmp	.+44     	; 0x82a <vfprintf+0x368>
 7fe:	21 ff       	sbrs	r18, 1
 800:	03 c0       	rjmp	.+6      	; 0x808 <vfprintf+0x346>
 802:	88 e5       	ldi	r24, 0x58	; 88
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	02 c0       	rjmp	.+4      	; 0x80c <vfprintf+0x34a>
 808:	88 e7       	ldi	r24, 0x78	; 120
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	b7 01       	movw	r22, r14
 80e:	0c c0       	rjmp	.+24     	; 0x828 <vfprintf+0x366>
 810:	82 2f       	mov	r24, r18
 812:	86 78       	andi	r24, 0x86	; 134
 814:	51 f0       	breq	.+20     	; 0x82a <vfprintf+0x368>
 816:	21 fd       	sbrc	r18, 1
 818:	02 c0       	rjmp	.+4      	; 0x81e <vfprintf+0x35c>
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	01 c0       	rjmp	.+2      	; 0x820 <vfprintf+0x35e>
 81e:	8b e2       	ldi	r24, 0x2B	; 43
 820:	27 fd       	sbrc	r18, 7
 822:	8d e2       	ldi	r24, 0x2D	; 45
 824:	b7 01       	movw	r22, r14
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	98 d1       	rcall	.+816    	; 0xb5a <fputc>
 82a:	a5 14       	cp	r10, r5
 82c:	30 f4       	brcc	.+12     	; 0x83a <vfprintf+0x378>
 82e:	b7 01       	movw	r22, r14
 830:	80 e3       	ldi	r24, 0x30	; 48
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	92 d1       	rcall	.+804    	; 0xb5a <fputc>
 836:	5a 94       	dec	r5
 838:	f8 cf       	rjmp	.-16     	; 0x82a <vfprintf+0x368>
 83a:	aa 94       	dec	r10
 83c:	f4 01       	movw	r30, r8
 83e:	ea 0d       	add	r30, r10
 840:	f1 1d       	adc	r31, r1
 842:	80 81       	ld	r24, Z
 844:	b7 01       	movw	r22, r14
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	88 d1       	rcall	.+784    	; 0xb5a <fputc>
 84a:	a1 10       	cpse	r10, r1
 84c:	f6 cf       	rjmp	.-20     	; 0x83a <vfprintf+0x378>
 84e:	33 20       	and	r3, r3
 850:	09 f4       	brne	.+2      	; 0x854 <vfprintf+0x392>
 852:	5d ce       	rjmp	.-838    	; 0x50e <vfprintf+0x4c>
 854:	b7 01       	movw	r22, r14
 856:	80 e2       	ldi	r24, 0x20	; 32
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	7f d1       	rcall	.+766    	; 0xb5a <fputc>
 85c:	3a 94       	dec	r3
 85e:	f7 cf       	rjmp	.-18     	; 0x84e <vfprintf+0x38c>
 860:	f7 01       	movw	r30, r14
 862:	86 81       	ldd	r24, Z+6	; 0x06
 864:	97 81       	ldd	r25, Z+7	; 0x07
 866:	02 c0       	rjmp	.+4      	; 0x86c <vfprintf+0x3aa>
 868:	8f ef       	ldi	r24, 0xFF	; 255
 86a:	9f ef       	ldi	r25, 0xFF	; 255
 86c:	2c 96       	adiw	r28, 0x0c	; 12
 86e:	0f b6       	in	r0, 0x3f	; 63
 870:	f8 94       	cli
 872:	de bf       	out	0x3e, r29	; 62
 874:	0f be       	out	0x3f, r0	; 63
 876:	cd bf       	out	0x3d, r28	; 61
 878:	df 91       	pop	r29
 87a:	cf 91       	pop	r28
 87c:	1f 91       	pop	r17
 87e:	0f 91       	pop	r16
 880:	ff 90       	pop	r15
 882:	ef 90       	pop	r14
 884:	df 90       	pop	r13
 886:	cf 90       	pop	r12
 888:	bf 90       	pop	r11
 88a:	af 90       	pop	r10
 88c:	9f 90       	pop	r9
 88e:	8f 90       	pop	r8
 890:	7f 90       	pop	r7
 892:	6f 90       	pop	r6
 894:	5f 90       	pop	r5
 896:	4f 90       	pop	r4
 898:	3f 90       	pop	r3
 89a:	2f 90       	pop	r2
 89c:	08 95       	ret

0000089e <calloc>:
 89e:	0f 93       	push	r16
 8a0:	1f 93       	push	r17
 8a2:	cf 93       	push	r28
 8a4:	df 93       	push	r29
 8a6:	86 9f       	mul	r24, r22
 8a8:	80 01       	movw	r16, r0
 8aa:	87 9f       	mul	r24, r23
 8ac:	10 0d       	add	r17, r0
 8ae:	96 9f       	mul	r25, r22
 8b0:	10 0d       	add	r17, r0
 8b2:	11 24       	eor	r1, r1
 8b4:	c8 01       	movw	r24, r16
 8b6:	0d d0       	rcall	.+26     	; 0x8d2 <malloc>
 8b8:	ec 01       	movw	r28, r24
 8ba:	00 97       	sbiw	r24, 0x00	; 0
 8bc:	21 f0       	breq	.+8      	; 0x8c6 <calloc+0x28>
 8be:	a8 01       	movw	r20, r16
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	70 e0       	ldi	r23, 0x00	; 0
 8c4:	38 d1       	rcall	.+624    	; 0xb36 <memset>
 8c6:	ce 01       	movw	r24, r28
 8c8:	df 91       	pop	r29
 8ca:	cf 91       	pop	r28
 8cc:	1f 91       	pop	r17
 8ce:	0f 91       	pop	r16
 8d0:	08 95       	ret

000008d2 <malloc>:
 8d2:	cf 93       	push	r28
 8d4:	df 93       	push	r29
 8d6:	82 30       	cpi	r24, 0x02	; 2
 8d8:	91 05       	cpc	r25, r1
 8da:	10 f4       	brcc	.+4      	; 0x8e0 <malloc+0xe>
 8dc:	82 e0       	ldi	r24, 0x02	; 2
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	e0 91 4f 02 	lds	r30, 0x024F
 8e4:	f0 91 50 02 	lds	r31, 0x0250
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	a0 e0       	ldi	r26, 0x00	; 0
 8ee:	b0 e0       	ldi	r27, 0x00	; 0
 8f0:	30 97       	sbiw	r30, 0x00	; 0
 8f2:	39 f1       	breq	.+78     	; 0x942 <malloc+0x70>
 8f4:	40 81       	ld	r20, Z
 8f6:	51 81       	ldd	r21, Z+1	; 0x01
 8f8:	48 17       	cp	r20, r24
 8fa:	59 07       	cpc	r21, r25
 8fc:	b8 f0       	brcs	.+46     	; 0x92c <malloc+0x5a>
 8fe:	48 17       	cp	r20, r24
 900:	59 07       	cpc	r21, r25
 902:	71 f4       	brne	.+28     	; 0x920 <malloc+0x4e>
 904:	82 81       	ldd	r24, Z+2	; 0x02
 906:	93 81       	ldd	r25, Z+3	; 0x03
 908:	10 97       	sbiw	r26, 0x00	; 0
 90a:	29 f0       	breq	.+10     	; 0x916 <malloc+0x44>
 90c:	13 96       	adiw	r26, 0x03	; 3
 90e:	9c 93       	st	X, r25
 910:	8e 93       	st	-X, r24
 912:	12 97       	sbiw	r26, 0x02	; 2
 914:	2c c0       	rjmp	.+88     	; 0x96e <malloc+0x9c>
 916:	90 93 50 02 	sts	0x0250, r25
 91a:	80 93 4f 02 	sts	0x024F, r24
 91e:	27 c0       	rjmp	.+78     	; 0x96e <malloc+0x9c>
 920:	21 15       	cp	r18, r1
 922:	31 05       	cpc	r19, r1
 924:	31 f0       	breq	.+12     	; 0x932 <malloc+0x60>
 926:	42 17       	cp	r20, r18
 928:	53 07       	cpc	r21, r19
 92a:	18 f0       	brcs	.+6      	; 0x932 <malloc+0x60>
 92c:	a9 01       	movw	r20, r18
 92e:	db 01       	movw	r26, r22
 930:	01 c0       	rjmp	.+2      	; 0x934 <malloc+0x62>
 932:	ef 01       	movw	r28, r30
 934:	9a 01       	movw	r18, r20
 936:	bd 01       	movw	r22, r26
 938:	df 01       	movw	r26, r30
 93a:	02 80       	ldd	r0, Z+2	; 0x02
 93c:	f3 81       	ldd	r31, Z+3	; 0x03
 93e:	e0 2d       	mov	r30, r0
 940:	d7 cf       	rjmp	.-82     	; 0x8f0 <malloc+0x1e>
 942:	21 15       	cp	r18, r1
 944:	31 05       	cpc	r19, r1
 946:	f9 f0       	breq	.+62     	; 0x986 <malloc+0xb4>
 948:	28 1b       	sub	r18, r24
 94a:	39 0b       	sbc	r19, r25
 94c:	24 30       	cpi	r18, 0x04	; 4
 94e:	31 05       	cpc	r19, r1
 950:	80 f4       	brcc	.+32     	; 0x972 <malloc+0xa0>
 952:	8a 81       	ldd	r24, Y+2	; 0x02
 954:	9b 81       	ldd	r25, Y+3	; 0x03
 956:	61 15       	cp	r22, r1
 958:	71 05       	cpc	r23, r1
 95a:	21 f0       	breq	.+8      	; 0x964 <malloc+0x92>
 95c:	fb 01       	movw	r30, r22
 95e:	93 83       	std	Z+3, r25	; 0x03
 960:	82 83       	std	Z+2, r24	; 0x02
 962:	04 c0       	rjmp	.+8      	; 0x96c <malloc+0x9a>
 964:	90 93 50 02 	sts	0x0250, r25
 968:	80 93 4f 02 	sts	0x024F, r24
 96c:	fe 01       	movw	r30, r28
 96e:	32 96       	adiw	r30, 0x02	; 2
 970:	44 c0       	rjmp	.+136    	; 0x9fa <malloc+0x128>
 972:	fe 01       	movw	r30, r28
 974:	e2 0f       	add	r30, r18
 976:	f3 1f       	adc	r31, r19
 978:	81 93       	st	Z+, r24
 97a:	91 93       	st	Z+, r25
 97c:	22 50       	subi	r18, 0x02	; 2
 97e:	31 09       	sbc	r19, r1
 980:	39 83       	std	Y+1, r19	; 0x01
 982:	28 83       	st	Y, r18
 984:	3a c0       	rjmp	.+116    	; 0x9fa <malloc+0x128>
 986:	20 91 4d 02 	lds	r18, 0x024D
 98a:	30 91 4e 02 	lds	r19, 0x024E
 98e:	23 2b       	or	r18, r19
 990:	41 f4       	brne	.+16     	; 0x9a2 <malloc+0xd0>
 992:	20 91 02 02 	lds	r18, 0x0202
 996:	30 91 03 02 	lds	r19, 0x0203
 99a:	30 93 4e 02 	sts	0x024E, r19
 99e:	20 93 4d 02 	sts	0x024D, r18
 9a2:	20 91 00 02 	lds	r18, 0x0200
 9a6:	30 91 01 02 	lds	r19, 0x0201
 9aa:	21 15       	cp	r18, r1
 9ac:	31 05       	cpc	r19, r1
 9ae:	41 f4       	brne	.+16     	; 0x9c0 <malloc+0xee>
 9b0:	2d b7       	in	r18, 0x3d	; 61
 9b2:	3e b7       	in	r19, 0x3e	; 62
 9b4:	40 91 04 02 	lds	r20, 0x0204
 9b8:	50 91 05 02 	lds	r21, 0x0205
 9bc:	24 1b       	sub	r18, r20
 9be:	35 0b       	sbc	r19, r21
 9c0:	e0 91 4d 02 	lds	r30, 0x024D
 9c4:	f0 91 4e 02 	lds	r31, 0x024E
 9c8:	e2 17       	cp	r30, r18
 9ca:	f3 07       	cpc	r31, r19
 9cc:	a0 f4       	brcc	.+40     	; 0x9f6 <malloc+0x124>
 9ce:	2e 1b       	sub	r18, r30
 9d0:	3f 0b       	sbc	r19, r31
 9d2:	28 17       	cp	r18, r24
 9d4:	39 07       	cpc	r19, r25
 9d6:	78 f0       	brcs	.+30     	; 0x9f6 <malloc+0x124>
 9d8:	ac 01       	movw	r20, r24
 9da:	4e 5f       	subi	r20, 0xFE	; 254
 9dc:	5f 4f       	sbci	r21, 0xFF	; 255
 9de:	24 17       	cp	r18, r20
 9e0:	35 07       	cpc	r19, r21
 9e2:	48 f0       	brcs	.+18     	; 0x9f6 <malloc+0x124>
 9e4:	4e 0f       	add	r20, r30
 9e6:	5f 1f       	adc	r21, r31
 9e8:	50 93 4e 02 	sts	0x024E, r21
 9ec:	40 93 4d 02 	sts	0x024D, r20
 9f0:	81 93       	st	Z+, r24
 9f2:	91 93       	st	Z+, r25
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <malloc+0x128>
 9f6:	e0 e0       	ldi	r30, 0x00	; 0
 9f8:	f0 e0       	ldi	r31, 0x00	; 0
 9fa:	cf 01       	movw	r24, r30
 9fc:	df 91       	pop	r29
 9fe:	cf 91       	pop	r28
 a00:	08 95       	ret

00000a02 <free>:
 a02:	cf 93       	push	r28
 a04:	df 93       	push	r29
 a06:	00 97       	sbiw	r24, 0x00	; 0
 a08:	09 f4       	brne	.+2      	; 0xa0c <free+0xa>
 a0a:	87 c0       	rjmp	.+270    	; 0xb1a <free+0x118>
 a0c:	fc 01       	movw	r30, r24
 a0e:	32 97       	sbiw	r30, 0x02	; 2
 a10:	13 82       	std	Z+3, r1	; 0x03
 a12:	12 82       	std	Z+2, r1	; 0x02
 a14:	c0 91 4f 02 	lds	r28, 0x024F
 a18:	d0 91 50 02 	lds	r29, 0x0250
 a1c:	20 97       	sbiw	r28, 0x00	; 0
 a1e:	81 f4       	brne	.+32     	; 0xa40 <free+0x3e>
 a20:	20 81       	ld	r18, Z
 a22:	31 81       	ldd	r19, Z+1	; 0x01
 a24:	28 0f       	add	r18, r24
 a26:	39 1f       	adc	r19, r25
 a28:	80 91 4d 02 	lds	r24, 0x024D
 a2c:	90 91 4e 02 	lds	r25, 0x024E
 a30:	82 17       	cp	r24, r18
 a32:	93 07       	cpc	r25, r19
 a34:	79 f5       	brne	.+94     	; 0xa94 <free+0x92>
 a36:	f0 93 4e 02 	sts	0x024E, r31
 a3a:	e0 93 4d 02 	sts	0x024D, r30
 a3e:	6d c0       	rjmp	.+218    	; 0xb1a <free+0x118>
 a40:	de 01       	movw	r26, r28
 a42:	20 e0       	ldi	r18, 0x00	; 0
 a44:	30 e0       	ldi	r19, 0x00	; 0
 a46:	ae 17       	cp	r26, r30
 a48:	bf 07       	cpc	r27, r31
 a4a:	50 f4       	brcc	.+20     	; 0xa60 <free+0x5e>
 a4c:	12 96       	adiw	r26, 0x02	; 2
 a4e:	4d 91       	ld	r20, X+
 a50:	5c 91       	ld	r21, X
 a52:	13 97       	sbiw	r26, 0x03	; 3
 a54:	9d 01       	movw	r18, r26
 a56:	41 15       	cp	r20, r1
 a58:	51 05       	cpc	r21, r1
 a5a:	09 f1       	breq	.+66     	; 0xa9e <free+0x9c>
 a5c:	da 01       	movw	r26, r20
 a5e:	f3 cf       	rjmp	.-26     	; 0xa46 <free+0x44>
 a60:	b3 83       	std	Z+3, r27	; 0x03
 a62:	a2 83       	std	Z+2, r26	; 0x02
 a64:	40 81       	ld	r20, Z
 a66:	51 81       	ldd	r21, Z+1	; 0x01
 a68:	84 0f       	add	r24, r20
 a6a:	95 1f       	adc	r25, r21
 a6c:	8a 17       	cp	r24, r26
 a6e:	9b 07       	cpc	r25, r27
 a70:	71 f4       	brne	.+28     	; 0xa8e <free+0x8c>
 a72:	8d 91       	ld	r24, X+
 a74:	9c 91       	ld	r25, X
 a76:	11 97       	sbiw	r26, 0x01	; 1
 a78:	84 0f       	add	r24, r20
 a7a:	95 1f       	adc	r25, r21
 a7c:	02 96       	adiw	r24, 0x02	; 2
 a7e:	91 83       	std	Z+1, r25	; 0x01
 a80:	80 83       	st	Z, r24
 a82:	12 96       	adiw	r26, 0x02	; 2
 a84:	8d 91       	ld	r24, X+
 a86:	9c 91       	ld	r25, X
 a88:	13 97       	sbiw	r26, 0x03	; 3
 a8a:	93 83       	std	Z+3, r25	; 0x03
 a8c:	82 83       	std	Z+2, r24	; 0x02
 a8e:	21 15       	cp	r18, r1
 a90:	31 05       	cpc	r19, r1
 a92:	29 f4       	brne	.+10     	; 0xa9e <free+0x9c>
 a94:	f0 93 50 02 	sts	0x0250, r31
 a98:	e0 93 4f 02 	sts	0x024F, r30
 a9c:	3e c0       	rjmp	.+124    	; 0xb1a <free+0x118>
 a9e:	d9 01       	movw	r26, r18
 aa0:	13 96       	adiw	r26, 0x03	; 3
 aa2:	fc 93       	st	X, r31
 aa4:	ee 93       	st	-X, r30
 aa6:	12 97       	sbiw	r26, 0x02	; 2
 aa8:	4d 91       	ld	r20, X+
 aaa:	5d 91       	ld	r21, X+
 aac:	a4 0f       	add	r26, r20
 aae:	b5 1f       	adc	r27, r21
 ab0:	ea 17       	cp	r30, r26
 ab2:	fb 07       	cpc	r31, r27
 ab4:	79 f4       	brne	.+30     	; 0xad4 <free+0xd2>
 ab6:	80 81       	ld	r24, Z
 ab8:	91 81       	ldd	r25, Z+1	; 0x01
 aba:	84 0f       	add	r24, r20
 abc:	95 1f       	adc	r25, r21
 abe:	02 96       	adiw	r24, 0x02	; 2
 ac0:	d9 01       	movw	r26, r18
 ac2:	11 96       	adiw	r26, 0x01	; 1
 ac4:	9c 93       	st	X, r25
 ac6:	8e 93       	st	-X, r24
 ac8:	82 81       	ldd	r24, Z+2	; 0x02
 aca:	93 81       	ldd	r25, Z+3	; 0x03
 acc:	13 96       	adiw	r26, 0x03	; 3
 ace:	9c 93       	st	X, r25
 ad0:	8e 93       	st	-X, r24
 ad2:	12 97       	sbiw	r26, 0x02	; 2
 ad4:	e0 e0       	ldi	r30, 0x00	; 0
 ad6:	f0 e0       	ldi	r31, 0x00	; 0
 ad8:	8a 81       	ldd	r24, Y+2	; 0x02
 ada:	9b 81       	ldd	r25, Y+3	; 0x03
 adc:	00 97       	sbiw	r24, 0x00	; 0
 ade:	19 f0       	breq	.+6      	; 0xae6 <free+0xe4>
 ae0:	fe 01       	movw	r30, r28
 ae2:	ec 01       	movw	r28, r24
 ae4:	f9 cf       	rjmp	.-14     	; 0xad8 <free+0xd6>
 ae6:	ce 01       	movw	r24, r28
 ae8:	02 96       	adiw	r24, 0x02	; 2
 aea:	28 81       	ld	r18, Y
 aec:	39 81       	ldd	r19, Y+1	; 0x01
 aee:	82 0f       	add	r24, r18
 af0:	93 1f       	adc	r25, r19
 af2:	20 91 4d 02 	lds	r18, 0x024D
 af6:	30 91 4e 02 	lds	r19, 0x024E
 afa:	28 17       	cp	r18, r24
 afc:	39 07       	cpc	r19, r25
 afe:	69 f4       	brne	.+26     	; 0xb1a <free+0x118>
 b00:	30 97       	sbiw	r30, 0x00	; 0
 b02:	29 f4       	brne	.+10     	; 0xb0e <free+0x10c>
 b04:	10 92 50 02 	sts	0x0250, r1
 b08:	10 92 4f 02 	sts	0x024F, r1
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <free+0x110>
 b0e:	13 82       	std	Z+3, r1	; 0x03
 b10:	12 82       	std	Z+2, r1	; 0x02
 b12:	d0 93 4e 02 	sts	0x024E, r29
 b16:	c0 93 4d 02 	sts	0x024D, r28
 b1a:	df 91       	pop	r29
 b1c:	cf 91       	pop	r28
 b1e:	08 95       	ret

00000b20 <strnlen_P>:
 b20:	fc 01       	movw	r30, r24
 b22:	05 90       	lpm	r0, Z+
 b24:	61 50       	subi	r22, 0x01	; 1
 b26:	70 40       	sbci	r23, 0x00	; 0
 b28:	01 10       	cpse	r0, r1
 b2a:	d8 f7       	brcc	.-10     	; 0xb22 <strnlen_P+0x2>
 b2c:	80 95       	com	r24
 b2e:	90 95       	com	r25
 b30:	8e 0f       	add	r24, r30
 b32:	9f 1f       	adc	r25, r31
 b34:	08 95       	ret

00000b36 <memset>:
 b36:	dc 01       	movw	r26, r24
 b38:	01 c0       	rjmp	.+2      	; 0xb3c <memset+0x6>
 b3a:	6d 93       	st	X+, r22
 b3c:	41 50       	subi	r20, 0x01	; 1
 b3e:	50 40       	sbci	r21, 0x00	; 0
 b40:	e0 f7       	brcc	.-8      	; 0xb3a <memset+0x4>
 b42:	08 95       	ret

00000b44 <strnlen>:
 b44:	fc 01       	movw	r30, r24
 b46:	61 50       	subi	r22, 0x01	; 1
 b48:	70 40       	sbci	r23, 0x00	; 0
 b4a:	01 90       	ld	r0, Z+
 b4c:	01 10       	cpse	r0, r1
 b4e:	d8 f7       	brcc	.-10     	; 0xb46 <strnlen+0x2>
 b50:	80 95       	com	r24
 b52:	90 95       	com	r25
 b54:	8e 0f       	add	r24, r30
 b56:	9f 1f       	adc	r25, r31
 b58:	08 95       	ret

00000b5a <fputc>:
 b5a:	0f 93       	push	r16
 b5c:	1f 93       	push	r17
 b5e:	cf 93       	push	r28
 b60:	df 93       	push	r29
 b62:	18 2f       	mov	r17, r24
 b64:	09 2f       	mov	r16, r25
 b66:	eb 01       	movw	r28, r22
 b68:	8b 81       	ldd	r24, Y+3	; 0x03
 b6a:	81 fd       	sbrc	r24, 1
 b6c:	03 c0       	rjmp	.+6      	; 0xb74 <fputc+0x1a>
 b6e:	8f ef       	ldi	r24, 0xFF	; 255
 b70:	9f ef       	ldi	r25, 0xFF	; 255
 b72:	20 c0       	rjmp	.+64     	; 0xbb4 <fputc+0x5a>
 b74:	82 ff       	sbrs	r24, 2
 b76:	10 c0       	rjmp	.+32     	; 0xb98 <fputc+0x3e>
 b78:	4e 81       	ldd	r20, Y+6	; 0x06
 b7a:	5f 81       	ldd	r21, Y+7	; 0x07
 b7c:	2c 81       	ldd	r18, Y+4	; 0x04
 b7e:	3d 81       	ldd	r19, Y+5	; 0x05
 b80:	42 17       	cp	r20, r18
 b82:	53 07       	cpc	r21, r19
 b84:	7c f4       	brge	.+30     	; 0xba4 <fputc+0x4a>
 b86:	e8 81       	ld	r30, Y
 b88:	f9 81       	ldd	r31, Y+1	; 0x01
 b8a:	9f 01       	movw	r18, r30
 b8c:	2f 5f       	subi	r18, 0xFF	; 255
 b8e:	3f 4f       	sbci	r19, 0xFF	; 255
 b90:	39 83       	std	Y+1, r19	; 0x01
 b92:	28 83       	st	Y, r18
 b94:	10 83       	st	Z, r17
 b96:	06 c0       	rjmp	.+12     	; 0xba4 <fputc+0x4a>
 b98:	e8 85       	ldd	r30, Y+8	; 0x08
 b9a:	f9 85       	ldd	r31, Y+9	; 0x09
 b9c:	81 2f       	mov	r24, r17
 b9e:	19 95       	eicall
 ba0:	89 2b       	or	r24, r25
 ba2:	29 f7       	brne	.-54     	; 0xb6e <fputc+0x14>
 ba4:	2e 81       	ldd	r18, Y+6	; 0x06
 ba6:	3f 81       	ldd	r19, Y+7	; 0x07
 ba8:	2f 5f       	subi	r18, 0xFF	; 255
 baa:	3f 4f       	sbci	r19, 0xFF	; 255
 bac:	3f 83       	std	Y+7, r19	; 0x07
 bae:	2e 83       	std	Y+6, r18	; 0x06
 bb0:	81 2f       	mov	r24, r17
 bb2:	90 2f       	mov	r25, r16
 bb4:	df 91       	pop	r29
 bb6:	cf 91       	pop	r28
 bb8:	1f 91       	pop	r17
 bba:	0f 91       	pop	r16
 bbc:	08 95       	ret

00000bbe <__ultoa_invert>:
 bbe:	fa 01       	movw	r30, r20
 bc0:	aa 27       	eor	r26, r26
 bc2:	28 30       	cpi	r18, 0x08	; 8
 bc4:	51 f1       	breq	.+84     	; 0xc1a <__ultoa_invert+0x5c>
 bc6:	20 31       	cpi	r18, 0x10	; 16
 bc8:	81 f1       	breq	.+96     	; 0xc2a <__ultoa_invert+0x6c>
 bca:	e8 94       	clt
 bcc:	6f 93       	push	r22
 bce:	6e 7f       	andi	r22, 0xFE	; 254
 bd0:	6e 5f       	subi	r22, 0xFE	; 254
 bd2:	7f 4f       	sbci	r23, 0xFF	; 255
 bd4:	8f 4f       	sbci	r24, 0xFF	; 255
 bd6:	9f 4f       	sbci	r25, 0xFF	; 255
 bd8:	af 4f       	sbci	r26, 0xFF	; 255
 bda:	b1 e0       	ldi	r27, 0x01	; 1
 bdc:	3e d0       	rcall	.+124    	; 0xc5a <__ultoa_invert+0x9c>
 bde:	b4 e0       	ldi	r27, 0x04	; 4
 be0:	3c d0       	rcall	.+120    	; 0xc5a <__ultoa_invert+0x9c>
 be2:	67 0f       	add	r22, r23
 be4:	78 1f       	adc	r23, r24
 be6:	89 1f       	adc	r24, r25
 be8:	9a 1f       	adc	r25, r26
 bea:	a1 1d       	adc	r26, r1
 bec:	68 0f       	add	r22, r24
 bee:	79 1f       	adc	r23, r25
 bf0:	8a 1f       	adc	r24, r26
 bf2:	91 1d       	adc	r25, r1
 bf4:	a1 1d       	adc	r26, r1
 bf6:	6a 0f       	add	r22, r26
 bf8:	71 1d       	adc	r23, r1
 bfa:	81 1d       	adc	r24, r1
 bfc:	91 1d       	adc	r25, r1
 bfe:	a1 1d       	adc	r26, r1
 c00:	20 d0       	rcall	.+64     	; 0xc42 <__ultoa_invert+0x84>
 c02:	09 f4       	brne	.+2      	; 0xc06 <__ultoa_invert+0x48>
 c04:	68 94       	set
 c06:	3f 91       	pop	r19
 c08:	2a e0       	ldi	r18, 0x0A	; 10
 c0a:	26 9f       	mul	r18, r22
 c0c:	11 24       	eor	r1, r1
 c0e:	30 19       	sub	r19, r0
 c10:	30 5d       	subi	r19, 0xD0	; 208
 c12:	31 93       	st	Z+, r19
 c14:	de f6       	brtc	.-74     	; 0xbcc <__ultoa_invert+0xe>
 c16:	cf 01       	movw	r24, r30
 c18:	08 95       	ret
 c1a:	46 2f       	mov	r20, r22
 c1c:	47 70       	andi	r20, 0x07	; 7
 c1e:	40 5d       	subi	r20, 0xD0	; 208
 c20:	41 93       	st	Z+, r20
 c22:	b3 e0       	ldi	r27, 0x03	; 3
 c24:	0f d0       	rcall	.+30     	; 0xc44 <__ultoa_invert+0x86>
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__ultoa_invert+0x5c>
 c28:	f6 cf       	rjmp	.-20     	; 0xc16 <__ultoa_invert+0x58>
 c2a:	46 2f       	mov	r20, r22
 c2c:	4f 70       	andi	r20, 0x0F	; 15
 c2e:	40 5d       	subi	r20, 0xD0	; 208
 c30:	4a 33       	cpi	r20, 0x3A	; 58
 c32:	18 f0       	brcs	.+6      	; 0xc3a <__ultoa_invert+0x7c>
 c34:	49 5d       	subi	r20, 0xD9	; 217
 c36:	31 fd       	sbrc	r19, 1
 c38:	40 52       	subi	r20, 0x20	; 32
 c3a:	41 93       	st	Z+, r20
 c3c:	02 d0       	rcall	.+4      	; 0xc42 <__ultoa_invert+0x84>
 c3e:	a9 f7       	brne	.-22     	; 0xc2a <__ultoa_invert+0x6c>
 c40:	ea cf       	rjmp	.-44     	; 0xc16 <__ultoa_invert+0x58>
 c42:	b4 e0       	ldi	r27, 0x04	; 4
 c44:	a6 95       	lsr	r26
 c46:	97 95       	ror	r25
 c48:	87 95       	ror	r24
 c4a:	77 95       	ror	r23
 c4c:	67 95       	ror	r22
 c4e:	ba 95       	dec	r27
 c50:	c9 f7       	brne	.-14     	; 0xc44 <__ultoa_invert+0x86>
 c52:	00 97       	sbiw	r24, 0x00	; 0
 c54:	61 05       	cpc	r22, r1
 c56:	71 05       	cpc	r23, r1
 c58:	08 95       	ret
 c5a:	9b 01       	movw	r18, r22
 c5c:	ac 01       	movw	r20, r24
 c5e:	0a 2e       	mov	r0, r26
 c60:	06 94       	lsr	r0
 c62:	57 95       	ror	r21
 c64:	47 95       	ror	r20
 c66:	37 95       	ror	r19
 c68:	27 95       	ror	r18
 c6a:	ba 95       	dec	r27
 c6c:	c9 f7       	brne	.-14     	; 0xc60 <__ultoa_invert+0xa2>
 c6e:	62 0f       	add	r22, r18
 c70:	73 1f       	adc	r23, r19
 c72:	84 1f       	adc	r24, r20
 c74:	95 1f       	adc	r25, r21
 c76:	a0 1d       	adc	r26, r0
 c78:	08 95       	ret

00000c7a <_exit>:
 c7a:	f8 94       	cli

00000c7c <__stop_program>:
 c7c:	ff cf       	rjmp	.-2      	; 0xc7c <__stop_program>
