
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800200  00000c6c  00000d00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080024e  0080024e  00000d4e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d4e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fb2  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b0  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000976  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f8  00000000  00000000  00002fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000411  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005d2  00000000  00000000  000036ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00003cbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	0b c1       	rjmp	.+534    	; 0x21c <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec e6       	ldi	r30, 0x6C	; 108
  fc:	fc e0       	ldi	r31, 0x0C	; 12
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 34       	cpi	r26, 0x4E	; 78
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ae e4       	ldi	r26, 0x4E	; 78
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 35       	cpi	r26, 0x59	; 89
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	39 d1       	rcall	.+626    	; 0x392 <main>
 120:	a3 c5       	rjmp	.+2886   	; 0xc68 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
	}
	else{
		if(CAN_check_error()<0){return -1;}
	}
	return 0;
}
 124:	08 d1       	rcall	.+528    	; 0x336 <MCP_init>
 126:	4f ef       	ldi	r20, 0xFF	; 255
 128:	64 e6       	ldi	r22, 0x64	; 100
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	de d0       	rcall	.+444    	; 0x2ea <MCP_bit_mod>
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	60 ee       	ldi	r22, 0xE0	; 224
 132:	8f e0       	ldi	r24, 0x0F	; 15
 134:	da d0       	rcall	.+436    	; 0x2ea <MCP_bit_mod>
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	8b e2       	ldi	r24, 0x2B	; 43
 13c:	d6 d0       	rcall	.+428    	; 0x2ea <MCP_bit_mod>
 13e:	8e e0       	ldi	r24, 0x0E	; 14
 140:	c5 d0       	rcall	.+394    	; 0x2cc <MCP_read>
 142:	80 7e       	andi	r24, 0xE0	; 224
 144:	19 f0       	breq	.+6      	; 0x14c <CAN_init+0x28>
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	85 d1       	rcall	.+778    	; 0x456 <puts>
 14c:	8f e0       	ldi	r24, 0x0F	; 15
 14e:	be c0       	rjmp	.+380    	; 0x2cc <MCP_read>
 150:	08 95       	ret

00000152 <CAN_int_vect>:
	}
}

void CAN_int_vect(void){
	// clear interrupt flag in buffer 0
	MCP_bit_mod(MCP_CANINTF, 0x01, 0);
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	8c e2       	ldi	r24, 0x2C	; 44
 158:	c8 d0       	rcall	.+400    	; 0x2ea <MCP_bit_mod>
	rx_flag = 1;
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 4e 02 	sts	0x024E, r24
 160:	08 95       	ret

00000162 <CAN_receive>:
}

struct CAN_message CAN_receive(void){
 162:	af 92       	push	r10
 164:	bf 92       	push	r11
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	2a 97       	sbiw	r28, 0x0a	; 10
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
 186:	7c 01       	movw	r14, r24
	struct CAN_message new_message;
	MCP_read(MCP_RXB0SIDL) >> 5;
 188:	82 e6       	ldi	r24, 0x62	; 98
 18a:	a0 d0       	rcall	.+320    	; 0x2cc <MCP_read>
	MCP_read(MCP_RXB0SIDH) << 3;
 18c:	81 e6       	ldi	r24, 0x61	; 97
 18e:	9e d0       	rcall	.+316    	; 0x2cc <MCP_read>
	if(MCP_RX0IF == 1){
		// writing the 8 bits we want from IDH and IDL
		new_message.id = (MCP_read(MCP_RXB0SIDL) >> 5 | MCP_read(MCP_RXB0SIDH) << 3);
 190:	82 e6       	ldi	r24, 0x62	; 98
 192:	9c d0       	rcall	.+312    	; 0x2cc <MCP_read>
 194:	a8 2e       	mov	r10, r24
 196:	81 e6       	ldi	r24, 0x61	; 97
 198:	99 d0       	rcall	.+306    	; 0x2cc <MCP_read>
 19a:	28 e0       	ldi	r18, 0x08	; 8
 19c:	82 9f       	mul	r24, r18
 19e:	c0 01       	movw	r24, r0
 1a0:	11 24       	eor	r1, r1
 1a2:	a6 94       	lsr	r10
 1a4:	a6 94       	lsr	r10
 1a6:	a6 94       	lsr	r10
 1a8:	a6 94       	lsr	r10
 1aa:	a6 94       	lsr	r10
 1ac:	a8 2a       	or	r10, r24
		// Get the length (only last 4 bits)
		new_message.length = MCP_read(0x65);
 1ae:	85 e6       	ldi	r24, 0x65	; 101
 1b0:	8d d0       	rcall	.+282    	; 0x2cc <MCP_read>
 1b2:	b8 2e       	mov	r11, r24
		
		// Get the required data from RXB0DM
		for(uint8_t i = 0; i < new_message.length; i++){
 1b4:	88 23       	and	r24, r24
 1b6:	a1 f0       	breq	.+40     	; 0x1e0 <CAN_receive+0x7e>
 1b8:	8e 01       	movw	r16, r28
 1ba:	0d 5f       	subi	r16, 0xFD	; 253
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	0f 2e       	mov	r0, r31
 1c0:	f6 e6       	ldi	r31, 0x66	; 102
 1c2:	cf 2e       	mov	r12, r31
 1c4:	f0 2d       	mov	r31, r0
 1c6:	c8 0e       	add	r12, r24
 1c8:	0f 2e       	mov	r0, r31
 1ca:	f6 e6       	ldi	r31, 0x66	; 102
 1cc:	df 2e       	mov	r13, r31
 1ce:	f0 2d       	mov	r31, r0
			new_message.data[i] = MCP_read(MCP_RXB0D0 + i);
 1d0:	8d 2d       	mov	r24, r13
 1d2:	7c d0       	rcall	.+248    	; 0x2cc <MCP_read>
 1d4:	f8 01       	movw	r30, r16
 1d6:	81 93       	st	Z+, r24
 1d8:	8f 01       	movw	r16, r30
 1da:	d3 94       	inc	r13
		new_message.id = (MCP_read(MCP_RXB0SIDL) >> 5 | MCP_read(MCP_RXB0SIDH) << 3);
		// Get the length (only last 4 bits)
		new_message.length = MCP_read(0x65);
		
		// Get the required data from RXB0DM
		for(uint8_t i = 0; i < new_message.length; i++){
 1dc:	dc 10       	cpse	r13, r12
 1de:	f8 cf       	rjmp	.-16     	; 0x1d0 <CAN_receive+0x6e>
			new_message.data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		rx_flag = 0;
 1e0:	10 92 4e 02 	sts	0x024E, r1
	}
	else{
		// message not received
		new_message.id = -1;
	}
	return new_message;
 1e4:	a9 82       	std	Y+1, r10	; 0x01
 1e6:	ba 82       	std	Y+2, r11	; 0x02
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	fe 01       	movw	r30, r28
 1ec:	31 96       	adiw	r30, 0x01	; 1
 1ee:	d7 01       	movw	r26, r14
 1f0:	01 90       	ld	r0, Z+
 1f2:	0d 92       	st	X+, r0
 1f4:	8a 95       	dec	r24
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <CAN_receive+0x8e>
}
 1f8:	c7 01       	movw	r24, r14
 1fa:	2a 96       	adiw	r28, 0x0a	; 10
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	f8 94       	cli
 200:	de bf       	out	0x3e, r29	; 62
 202:	0f be       	out	0x3f, r0	; 63
 204:	cd bf       	out	0x3d, r28	; 61
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	df 90       	pop	r13
 214:	cf 90       	pop	r12
 216:	bf 90       	pop	r11
 218:	af 90       	pop	r10
 21a:	08 95       	ret

0000021c <__vector_1>:

// Interrupt service
ISR(INT0_vect){
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	0b b6       	in	r0, 0x3b	; 59
 228:	0f 92       	push	r0
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	83 ec       	ldi	r24, 0xC3	; 195
 244:	99 e0       	ldi	r25, 0x09	; 9
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <__vector_1+0x2a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <__vector_1+0x30>
 24c:	00 00       	nop
	_delay_ms(10);
	CAN_int_vect();
 24e:	81 df       	rcall	.-254    	; 0x152 <CAN_int_vect>
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	bf 91       	pop	r27
 256:	af 91       	pop	r26
 258:	9f 91       	pop	r25
 25a:	8f 91       	pop	r24
 25c:	7f 91       	pop	r23
 25e:	6f 91       	pop	r22
 260:	5f 91       	pop	r21
 262:	4f 91       	pop	r20
 264:	3f 91       	pop	r19
 266:	2f 91       	pop	r18
 268:	0f 90       	pop	r0
 26a:	0b be       	out	0x3b, r0	; 59
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <received_joy_pos>:
	new_message.length = 2;
	new_message.data[0] = pos.x_pos;
	new_message.data[1] = pos.y_pos;
}

void received_joy_pos(){
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	2a 97       	sbiw	r28, 0x0a	; 10
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
	struct CAN_message received_pos;
	received_pos = CAN_receive();
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	69 df       	rcall	.-302    	; 0x162 <CAN_receive>
	uint8_t x_pos = received_pos.data[0];
	uint8_t y_pos = received_pos.data[1];
	printf("X POS: %x, Y POS: %x \n", x_pos,y_pos);
 290:	8c 81       	ldd	r24, Y+4	; 0x04
 292:	1f 92       	push	r1
 294:	8f 93       	push	r24
 296:	8b 81       	ldd	r24, Y+3	; 0x03
 298:	1f 92       	push	r1
 29a:	8f 93       	push	r24
 29c:	8c e1       	ldi	r24, 0x1C	; 28
 29e:	92 e0       	ldi	r25, 0x02	; 2
 2a0:	9f 93       	push	r25
 2a2:	8f 93       	push	r24
 2a4:	c7 d0       	rcall	.+398    	; 0x434 <printf>
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	2a 96       	adiw	r28, 0x0a	; 10
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	f8 94       	cli
 2b8:	de bf       	out	0x3e, r29	; 62
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	cd bf       	out	0x3d, r28	; 61
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <select_CAN>:
uint8_t MCP_read_status(){
	select_CAN();
	SPI_MasterTransmit(MCP_READ_STATUS);
	deselect_CAN();
	return SPI_MasterReceive();
}
 2c4:	2c 98       	cbi	0x05, 4	; 5
 2c6:	08 95       	ret

000002c8 <deselect_CAN>:
 2c8:	2c 9a       	sbi	0x05, 4	; 5
 2ca:	08 95       	ret

000002cc <MCP_read>:
 2cc:	cf 93       	push	r28
 2ce:	c8 2f       	mov	r28, r24
 2d0:	f9 df       	rcall	.-14     	; 0x2c4 <select_CAN>
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	37 d0       	rcall	.+110    	; 0x346 <SPI_MasterTransmit>
 2d8:	8c 2f       	mov	r24, r28
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	34 d0       	rcall	.+104    	; 0x346 <SPI_MasterTransmit>
 2de:	38 d0       	rcall	.+112    	; 0x350 <SPI_MasterReceive>
 2e0:	c8 2f       	mov	r28, r24
 2e2:	f2 df       	rcall	.-28     	; 0x2c8 <deselect_CAN>
 2e4:	8c 2f       	mov	r24, r28
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <MCP_bit_mod>:

void MCP_bit_mod(uint8_t address, uint8_t m_byte, uint8_t d_byte){
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	18 2f       	mov	r17, r24
 2f2:	d6 2f       	mov	r29, r22
 2f4:	c4 2f       	mov	r28, r20
	select_CAN();
 2f6:	e6 df       	rcall	.-52     	; 0x2c4 <select_CAN>
	SPI_MasterTransmit(MCP_BITMOD);
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	24 d0       	rcall	.+72     	; 0x346 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 2fe:	81 2f       	mov	r24, r17
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	21 d0       	rcall	.+66     	; 0x346 <SPI_MasterTransmit>
	SPI_MasterTransmit(m_byte);
 304:	8d 2f       	mov	r24, r29
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	1e d0       	rcall	.+60     	; 0x346 <SPI_MasterTransmit>
	SPI_MasterTransmit(d_byte);
 30a:	8c 2f       	mov	r24, r28
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	1b d0       	rcall	.+54     	; 0x346 <SPI_MasterTransmit>
	deselect_CAN();
 310:	db df       	rcall	.-74     	; 0x2c8 <deselect_CAN>
}
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	1f 91       	pop	r17
 318:	08 95       	ret

0000031a <MCP_reset>:

void MCP_reset(){
	select_CAN();
 31a:	d4 df       	rcall	.-88     	; 0x2c4 <select_CAN>
	SPI_MasterTransmit(MCP_RESET);
 31c:	80 ec       	ldi	r24, 0xC0	; 192
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	12 d0       	rcall	.+36     	; 0x346 <SPI_MasterTransmit>
	deselect_CAN();
 322:	d2 df       	rcall	.-92     	; 0x2c8 <deselect_CAN>
	uint8_t mode = MCP_read(MCP_CANSTAT);
 324:	8e e0       	ldi	r24, 0x0E	; 14
 326:	d2 df       	rcall	.-92     	; 0x2cc <MCP_read>
	if ((mode&MODE_MASK)!=MODE_CONFIG)
 328:	80 7e       	andi	r24, 0xE0	; 224
 32a:	80 38       	cpi	r24, 0x80	; 128
 32c:	19 f0       	breq	.+6      	; 0x334 <MCP_reset+0x1a>
	{
		printf("Not in config after reset\n");
 32e:	83 e3       	ldi	r24, 0x33	; 51
 330:	92 e0       	ldi	r25, 0x02	; 2
 332:	91 c0       	rjmp	.+290    	; 0x456 <puts>
 334:	08 95       	ret

00000336 <MCP_init>:
void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
}

void MCP_init(){
	SPI_MasterInit();
 336:	02 d0       	rcall	.+4      	; 0x33c <SPI_MasterInit>
	MCP_reset();
 338:	f0 cf       	rjmp	.-32     	; 0x31a <MCP_reset>
 33a:	08 95       	ret

0000033c <SPI_MasterInit>:

#include "SPI.h"

void SPI_MasterInit(void){
	/* Set MOSI,SCK and SS output, all others input */
	DDRB = (1<<DD_MOSI) | (1<<DD_SCK) | (1 << DD_SS) | (1 << PB0);
 33c:	81 eb       	ldi	r24, 0xB1	; 177
 33e:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 340:	81 e5       	ldi	r24, 0x51	; 81
 342:	8c bd       	out	0x2c, r24	; 44
 344:	08 95       	ret

00000346 <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData){
	/* Start transmission */
	SPDR = cData;
 346:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission complete */
	while	(!(SPSR & (1<<SPIF)));
 348:	0d b4       	in	r0, 0x2d	; 45
 34a:	07 fe       	sbrs	r0, 7
 34c:	fd cf       	rjmp	.-6      	; 0x348 <SPI_MasterTransmit+0x2>
}
 34e:	08 95       	ret

00000350 <SPI_MasterReceive>:

char SPI_MasterReceive(void){
	/* Send dummy data to read from slave */	
	SPI_MasterTransmit(0);
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	f9 df       	rcall	.-14     	; 0x346 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	// while	(!(SPSR & (1<<SPIF)));
	
	/* Return data register */
	return	SPDR;
 354:	8e b5       	in	r24, 0x2e	; 46
 356:	08 95       	ret

00000358 <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

// Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 358:	e0 ec       	ldi	r30, 0xC0	; 192
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	90 81       	ld	r25, Z
 35e:	95 ff       	sbrs	r25, 5
 360:	fd cf       	rjmp	.-6      	; 0x35c <USART_Transmit+0x4>
  
//Put data into buffer, sends the data
	UDR0 = data;
 362:	80 93 c6 00 	sts	0x00C6, r24
 366:	08 95       	ret

00000368 <USART_Receive>:
}

unsigned char USART_Receive( void ){

//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 368:	e0 ec       	ldi	r30, 0xC0	; 192
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	80 81       	ld	r24, Z
 36e:	88 23       	and	r24, r24
 370:	ec f7       	brge	.-6      	; 0x36c <USART_Receive+0x4>
//Get and return received data from buffer
	return UDR0;
 372:	80 91 c6 00 	lds	r24, 0x00C6
 376:	08 95       	ret

00000378 <USART_Init>:
	//set_bit(SFIOR,XMM2);
	////set_bit(SFIOR,XMM0);
//}
void USART_Init( unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 378:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
 37c:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable receiver and transmitter	*/
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 380:	88 e1       	ldi	r24, 0x18	; 24
 382:	80 93 c1 00 	sts	0x00C1, r24
	fdevopen(USART_Transmit,USART_Receive);
 386:	64 eb       	ldi	r22, 0xB4	; 180
 388:	71 e0       	ldi	r23, 0x01	; 1
 38a:	8c ea       	ldi	r24, 0xAC	; 172
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	08 c0       	rjmp	.+16     	; 0x3a0 <fdevopen>
 390:	08 95       	ret

00000392 <main>:
#include "../../delte filer/MCP2515.h"
#include <avr/io.h>

int main(void)
{
	USART_Init(103);
 392:	87 e6       	ldi	r24, 0x67	; 103
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	f0 df       	rcall	.-32     	; 0x378 <USART_Init>
	SPI_MasterInit();
 398:	d1 df       	rcall	.-94     	; 0x33c <SPI_MasterInit>
	CAN_init();
 39a:	c4 de       	rcall	.-632    	; 0x124 <CAN_init>
	//while (!USART_Receive());
	struct CAN_message copy_message;
	while(1) {
		received_joy_pos();
 39c:	6c df       	rcall	.-296    	; 0x276 <received_joy_pos>
 39e:	fe cf       	rjmp	.-4      	; 0x39c <main+0xa>

000003a0 <fdevopen>:
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	ec 01       	movw	r28, r24
 3aa:	8b 01       	movw	r16, r22
 3ac:	00 97       	sbiw	r24, 0x00	; 0
 3ae:	31 f4       	brne	.+12     	; 0x3bc <fdevopen+0x1c>
 3b0:	61 15       	cp	r22, r1
 3b2:	71 05       	cpc	r23, r1
 3b4:	19 f4       	brne	.+6      	; 0x3bc <fdevopen+0x1c>
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	37 c0       	rjmp	.+110    	; 0x42a <fdevopen+0x8a>
 3bc:	6e e0       	ldi	r22, 0x0E	; 14
 3be:	70 e0       	ldi	r23, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	63 d2       	rcall	.+1222   	; 0x88c <calloc>
 3c6:	fc 01       	movw	r30, r24
 3c8:	00 97       	sbiw	r24, 0x00	; 0
 3ca:	a9 f3       	breq	.-22     	; 0x3b6 <fdevopen+0x16>
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	83 83       	std	Z+3, r24	; 0x03
 3d0:	01 15       	cp	r16, r1
 3d2:	11 05       	cpc	r17, r1
 3d4:	71 f0       	breq	.+28     	; 0x3f2 <fdevopen+0x52>
 3d6:	13 87       	std	Z+11, r17	; 0x0b
 3d8:	02 87       	std	Z+10, r16	; 0x0a
 3da:	81 e8       	ldi	r24, 0x81	; 129
 3dc:	83 83       	std	Z+3, r24	; 0x03
 3de:	80 91 4f 02 	lds	r24, 0x024F
 3e2:	90 91 50 02 	lds	r25, 0x0250
 3e6:	89 2b       	or	r24, r25
 3e8:	21 f4       	brne	.+8      	; 0x3f2 <fdevopen+0x52>
 3ea:	f0 93 50 02 	sts	0x0250, r31
 3ee:	e0 93 4f 02 	sts	0x024F, r30
 3f2:	20 97       	sbiw	r28, 0x00	; 0
 3f4:	c9 f0       	breq	.+50     	; 0x428 <fdevopen+0x88>
 3f6:	d1 87       	std	Z+9, r29	; 0x09
 3f8:	c0 87       	std	Z+8, r28	; 0x08
 3fa:	83 81       	ldd	r24, Z+3	; 0x03
 3fc:	82 60       	ori	r24, 0x02	; 2
 3fe:	83 83       	std	Z+3, r24	; 0x03
 400:	80 91 51 02 	lds	r24, 0x0251
 404:	90 91 52 02 	lds	r25, 0x0252
 408:	89 2b       	or	r24, r25
 40a:	71 f4       	brne	.+28     	; 0x428 <fdevopen+0x88>
 40c:	f0 93 52 02 	sts	0x0252, r31
 410:	e0 93 51 02 	sts	0x0251, r30
 414:	80 91 53 02 	lds	r24, 0x0253
 418:	90 91 54 02 	lds	r25, 0x0254
 41c:	89 2b       	or	r24, r25
 41e:	21 f4       	brne	.+8      	; 0x428 <fdevopen+0x88>
 420:	f0 93 54 02 	sts	0x0254, r31
 424:	e0 93 53 02 	sts	0x0253, r30
 428:	cf 01       	movw	r24, r30
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	08 95       	ret

00000434 <printf>:
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	fe 01       	movw	r30, r28
 43e:	36 96       	adiw	r30, 0x06	; 6
 440:	61 91       	ld	r22, Z+
 442:	71 91       	ld	r23, Z+
 444:	af 01       	movw	r20, r30
 446:	80 91 51 02 	lds	r24, 0x0251
 44a:	90 91 52 02 	lds	r25, 0x0252
 44e:	30 d0       	rcall	.+96     	; 0x4b0 <vfprintf>
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <puts>:
 456:	0f 93       	push	r16
 458:	1f 93       	push	r17
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	e0 91 51 02 	lds	r30, 0x0251
 462:	f0 91 52 02 	lds	r31, 0x0252
 466:	23 81       	ldd	r18, Z+3	; 0x03
 468:	21 ff       	sbrs	r18, 1
 46a:	1b c0       	rjmp	.+54     	; 0x4a2 <puts+0x4c>
 46c:	ec 01       	movw	r28, r24
 46e:	00 e0       	ldi	r16, 0x00	; 0
 470:	10 e0       	ldi	r17, 0x00	; 0
 472:	89 91       	ld	r24, Y+
 474:	60 91 51 02 	lds	r22, 0x0251
 478:	70 91 52 02 	lds	r23, 0x0252
 47c:	db 01       	movw	r26, r22
 47e:	18 96       	adiw	r26, 0x08	; 8
 480:	ed 91       	ld	r30, X+
 482:	fc 91       	ld	r31, X
 484:	19 97       	sbiw	r26, 0x09	; 9
 486:	88 23       	and	r24, r24
 488:	31 f0       	breq	.+12     	; 0x496 <puts+0x40>
 48a:	19 95       	eicall
 48c:	89 2b       	or	r24, r25
 48e:	89 f3       	breq	.-30     	; 0x472 <puts+0x1c>
 490:	0f ef       	ldi	r16, 0xFF	; 255
 492:	1f ef       	ldi	r17, 0xFF	; 255
 494:	ee cf       	rjmp	.-36     	; 0x472 <puts+0x1c>
 496:	8a e0       	ldi	r24, 0x0A	; 10
 498:	19 95       	eicall
 49a:	89 2b       	or	r24, r25
 49c:	11 f4       	brne	.+4      	; 0x4a2 <puts+0x4c>
 49e:	c8 01       	movw	r24, r16
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <puts+0x50>
 4a2:	8f ef       	ldi	r24, 0xFF	; 255
 4a4:	9f ef       	ldi	r25, 0xFF	; 255
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	08 95       	ret

000004b0 <vfprintf>:
 4b0:	2f 92       	push	r2
 4b2:	3f 92       	push	r3
 4b4:	4f 92       	push	r4
 4b6:	5f 92       	push	r5
 4b8:	6f 92       	push	r6
 4ba:	7f 92       	push	r7
 4bc:	8f 92       	push	r8
 4be:	9f 92       	push	r9
 4c0:	af 92       	push	r10
 4c2:	bf 92       	push	r11
 4c4:	cf 92       	push	r12
 4c6:	df 92       	push	r13
 4c8:	ef 92       	push	r14
 4ca:	ff 92       	push	r15
 4cc:	0f 93       	push	r16
 4ce:	1f 93       	push	r17
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	cd b7       	in	r28, 0x3d	; 61
 4d6:	de b7       	in	r29, 0x3e	; 62
 4d8:	2c 97       	sbiw	r28, 0x0c	; 12
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	7c 01       	movw	r14, r24
 4e6:	6b 01       	movw	r12, r22
 4e8:	8a 01       	movw	r16, r20
 4ea:	fc 01       	movw	r30, r24
 4ec:	17 82       	std	Z+7, r1	; 0x07
 4ee:	16 82       	std	Z+6, r1	; 0x06
 4f0:	83 81       	ldd	r24, Z+3	; 0x03
 4f2:	81 ff       	sbrs	r24, 1
 4f4:	b0 c1       	rjmp	.+864    	; 0x856 <vfprintf+0x3a6>
 4f6:	ce 01       	movw	r24, r28
 4f8:	01 96       	adiw	r24, 0x01	; 1
 4fa:	4c 01       	movw	r8, r24
 4fc:	f7 01       	movw	r30, r14
 4fe:	93 81       	ldd	r25, Z+3	; 0x03
 500:	f6 01       	movw	r30, r12
 502:	93 fd       	sbrc	r25, 3
 504:	85 91       	lpm	r24, Z+
 506:	93 ff       	sbrs	r25, 3
 508:	81 91       	ld	r24, Z+
 50a:	6f 01       	movw	r12, r30
 50c:	88 23       	and	r24, r24
 50e:	09 f4       	brne	.+2      	; 0x512 <vfprintf+0x62>
 510:	9e c1       	rjmp	.+828    	; 0x84e <vfprintf+0x39e>
 512:	85 32       	cpi	r24, 0x25	; 37
 514:	39 f4       	brne	.+14     	; 0x524 <vfprintf+0x74>
 516:	93 fd       	sbrc	r25, 3
 518:	85 91       	lpm	r24, Z+
 51a:	93 ff       	sbrs	r25, 3
 51c:	81 91       	ld	r24, Z+
 51e:	6f 01       	movw	r12, r30
 520:	85 32       	cpi	r24, 0x25	; 37
 522:	21 f4       	brne	.+8      	; 0x52c <vfprintf+0x7c>
 524:	b7 01       	movw	r22, r14
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	0f d3       	rcall	.+1566   	; 0xb48 <fputc>
 52a:	e8 cf       	rjmp	.-48     	; 0x4fc <vfprintf+0x4c>
 52c:	51 2c       	mov	r5, r1
 52e:	31 2c       	mov	r3, r1
 530:	20 e0       	ldi	r18, 0x00	; 0
 532:	20 32       	cpi	r18, 0x20	; 32
 534:	a0 f4       	brcc	.+40     	; 0x55e <vfprintf+0xae>
 536:	8b 32       	cpi	r24, 0x2B	; 43
 538:	69 f0       	breq	.+26     	; 0x554 <vfprintf+0xa4>
 53a:	30 f4       	brcc	.+12     	; 0x548 <vfprintf+0x98>
 53c:	80 32       	cpi	r24, 0x20	; 32
 53e:	59 f0       	breq	.+22     	; 0x556 <vfprintf+0xa6>
 540:	83 32       	cpi	r24, 0x23	; 35
 542:	69 f4       	brne	.+26     	; 0x55e <vfprintf+0xae>
 544:	20 61       	ori	r18, 0x10	; 16
 546:	2c c0       	rjmp	.+88     	; 0x5a0 <vfprintf+0xf0>
 548:	8d 32       	cpi	r24, 0x2D	; 45
 54a:	39 f0       	breq	.+14     	; 0x55a <vfprintf+0xaa>
 54c:	80 33       	cpi	r24, 0x30	; 48
 54e:	39 f4       	brne	.+14     	; 0x55e <vfprintf+0xae>
 550:	21 60       	ori	r18, 0x01	; 1
 552:	26 c0       	rjmp	.+76     	; 0x5a0 <vfprintf+0xf0>
 554:	22 60       	ori	r18, 0x02	; 2
 556:	24 60       	ori	r18, 0x04	; 4
 558:	23 c0       	rjmp	.+70     	; 0x5a0 <vfprintf+0xf0>
 55a:	28 60       	ori	r18, 0x08	; 8
 55c:	21 c0       	rjmp	.+66     	; 0x5a0 <vfprintf+0xf0>
 55e:	27 fd       	sbrc	r18, 7
 560:	27 c0       	rjmp	.+78     	; 0x5b0 <vfprintf+0x100>
 562:	30 ed       	ldi	r19, 0xD0	; 208
 564:	38 0f       	add	r19, r24
 566:	3a 30       	cpi	r19, 0x0A	; 10
 568:	78 f4       	brcc	.+30     	; 0x588 <vfprintf+0xd8>
 56a:	26 ff       	sbrs	r18, 6
 56c:	06 c0       	rjmp	.+12     	; 0x57a <vfprintf+0xca>
 56e:	fa e0       	ldi	r31, 0x0A	; 10
 570:	5f 9e       	mul	r5, r31
 572:	30 0d       	add	r19, r0
 574:	11 24       	eor	r1, r1
 576:	53 2e       	mov	r5, r19
 578:	13 c0       	rjmp	.+38     	; 0x5a0 <vfprintf+0xf0>
 57a:	8a e0       	ldi	r24, 0x0A	; 10
 57c:	38 9e       	mul	r3, r24
 57e:	30 0d       	add	r19, r0
 580:	11 24       	eor	r1, r1
 582:	33 2e       	mov	r3, r19
 584:	20 62       	ori	r18, 0x20	; 32
 586:	0c c0       	rjmp	.+24     	; 0x5a0 <vfprintf+0xf0>
 588:	8e 32       	cpi	r24, 0x2E	; 46
 58a:	21 f4       	brne	.+8      	; 0x594 <vfprintf+0xe4>
 58c:	26 fd       	sbrc	r18, 6
 58e:	5f c1       	rjmp	.+702    	; 0x84e <vfprintf+0x39e>
 590:	20 64       	ori	r18, 0x40	; 64
 592:	06 c0       	rjmp	.+12     	; 0x5a0 <vfprintf+0xf0>
 594:	8c 36       	cpi	r24, 0x6C	; 108
 596:	11 f4       	brne	.+4      	; 0x59c <vfprintf+0xec>
 598:	20 68       	ori	r18, 0x80	; 128
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <vfprintf+0xf0>
 59c:	88 36       	cpi	r24, 0x68	; 104
 59e:	41 f4       	brne	.+16     	; 0x5b0 <vfprintf+0x100>
 5a0:	f6 01       	movw	r30, r12
 5a2:	93 fd       	sbrc	r25, 3
 5a4:	85 91       	lpm	r24, Z+
 5a6:	93 ff       	sbrs	r25, 3
 5a8:	81 91       	ld	r24, Z+
 5aa:	6f 01       	movw	r12, r30
 5ac:	81 11       	cpse	r24, r1
 5ae:	c1 cf       	rjmp	.-126    	; 0x532 <vfprintf+0x82>
 5b0:	98 2f       	mov	r25, r24
 5b2:	9f 7d       	andi	r25, 0xDF	; 223
 5b4:	95 54       	subi	r25, 0x45	; 69
 5b6:	93 30       	cpi	r25, 0x03	; 3
 5b8:	28 f4       	brcc	.+10     	; 0x5c4 <vfprintf+0x114>
 5ba:	0c 5f       	subi	r16, 0xFC	; 252
 5bc:	1f 4f       	sbci	r17, 0xFF	; 255
 5be:	ff e3       	ldi	r31, 0x3F	; 63
 5c0:	f9 83       	std	Y+1, r31	; 0x01
 5c2:	0d c0       	rjmp	.+26     	; 0x5de <vfprintf+0x12e>
 5c4:	83 36       	cpi	r24, 0x63	; 99
 5c6:	31 f0       	breq	.+12     	; 0x5d4 <vfprintf+0x124>
 5c8:	83 37       	cpi	r24, 0x73	; 115
 5ca:	71 f0       	breq	.+28     	; 0x5e8 <vfprintf+0x138>
 5cc:	83 35       	cpi	r24, 0x53	; 83
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <vfprintf+0x122>
 5d0:	57 c0       	rjmp	.+174    	; 0x680 <vfprintf+0x1d0>
 5d2:	21 c0       	rjmp	.+66     	; 0x616 <vfprintf+0x166>
 5d4:	f8 01       	movw	r30, r16
 5d6:	80 81       	ld	r24, Z
 5d8:	89 83       	std	Y+1, r24	; 0x01
 5da:	0e 5f       	subi	r16, 0xFE	; 254
 5dc:	1f 4f       	sbci	r17, 0xFF	; 255
 5de:	44 24       	eor	r4, r4
 5e0:	43 94       	inc	r4
 5e2:	51 2c       	mov	r5, r1
 5e4:	54 01       	movw	r10, r8
 5e6:	14 c0       	rjmp	.+40     	; 0x610 <vfprintf+0x160>
 5e8:	38 01       	movw	r6, r16
 5ea:	f2 e0       	ldi	r31, 0x02	; 2
 5ec:	6f 0e       	add	r6, r31
 5ee:	71 1c       	adc	r7, r1
 5f0:	f8 01       	movw	r30, r16
 5f2:	a0 80       	ld	r10, Z
 5f4:	b1 80       	ldd	r11, Z+1	; 0x01
 5f6:	26 ff       	sbrs	r18, 6
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <vfprintf+0x150>
 5fa:	65 2d       	mov	r22, r5
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <vfprintf+0x154>
 600:	6f ef       	ldi	r22, 0xFF	; 255
 602:	7f ef       	ldi	r23, 0xFF	; 255
 604:	c5 01       	movw	r24, r10
 606:	2c 87       	std	Y+12, r18	; 0x0c
 608:	94 d2       	rcall	.+1320   	; 0xb32 <strnlen>
 60a:	2c 01       	movw	r4, r24
 60c:	83 01       	movw	r16, r6
 60e:	2c 85       	ldd	r18, Y+12	; 0x0c
 610:	2f 77       	andi	r18, 0x7F	; 127
 612:	22 2e       	mov	r2, r18
 614:	16 c0       	rjmp	.+44     	; 0x642 <vfprintf+0x192>
 616:	38 01       	movw	r6, r16
 618:	f2 e0       	ldi	r31, 0x02	; 2
 61a:	6f 0e       	add	r6, r31
 61c:	71 1c       	adc	r7, r1
 61e:	f8 01       	movw	r30, r16
 620:	a0 80       	ld	r10, Z
 622:	b1 80       	ldd	r11, Z+1	; 0x01
 624:	26 ff       	sbrs	r18, 6
 626:	03 c0       	rjmp	.+6      	; 0x62e <vfprintf+0x17e>
 628:	65 2d       	mov	r22, r5
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <vfprintf+0x182>
 62e:	6f ef       	ldi	r22, 0xFF	; 255
 630:	7f ef       	ldi	r23, 0xFF	; 255
 632:	c5 01       	movw	r24, r10
 634:	2c 87       	std	Y+12, r18	; 0x0c
 636:	6b d2       	rcall	.+1238   	; 0xb0e <strnlen_P>
 638:	2c 01       	movw	r4, r24
 63a:	2c 85       	ldd	r18, Y+12	; 0x0c
 63c:	20 68       	ori	r18, 0x80	; 128
 63e:	22 2e       	mov	r2, r18
 640:	83 01       	movw	r16, r6
 642:	23 fc       	sbrc	r2, 3
 644:	19 c0       	rjmp	.+50     	; 0x678 <vfprintf+0x1c8>
 646:	83 2d       	mov	r24, r3
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	48 16       	cp	r4, r24
 64c:	59 06       	cpc	r5, r25
 64e:	a0 f4       	brcc	.+40     	; 0x678 <vfprintf+0x1c8>
 650:	b7 01       	movw	r22, r14
 652:	80 e2       	ldi	r24, 0x20	; 32
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	78 d2       	rcall	.+1264   	; 0xb48 <fputc>
 658:	3a 94       	dec	r3
 65a:	f5 cf       	rjmp	.-22     	; 0x646 <vfprintf+0x196>
 65c:	f5 01       	movw	r30, r10
 65e:	27 fc       	sbrc	r2, 7
 660:	85 91       	lpm	r24, Z+
 662:	27 fe       	sbrs	r2, 7
 664:	81 91       	ld	r24, Z+
 666:	5f 01       	movw	r10, r30
 668:	b7 01       	movw	r22, r14
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	6d d2       	rcall	.+1242   	; 0xb48 <fputc>
 66e:	31 10       	cpse	r3, r1
 670:	3a 94       	dec	r3
 672:	f1 e0       	ldi	r31, 0x01	; 1
 674:	4f 1a       	sub	r4, r31
 676:	51 08       	sbc	r5, r1
 678:	41 14       	cp	r4, r1
 67a:	51 04       	cpc	r5, r1
 67c:	79 f7       	brne	.-34     	; 0x65c <vfprintf+0x1ac>
 67e:	de c0       	rjmp	.+444    	; 0x83c <vfprintf+0x38c>
 680:	84 36       	cpi	r24, 0x64	; 100
 682:	11 f0       	breq	.+4      	; 0x688 <vfprintf+0x1d8>
 684:	89 36       	cpi	r24, 0x69	; 105
 686:	31 f5       	brne	.+76     	; 0x6d4 <vfprintf+0x224>
 688:	f8 01       	movw	r30, r16
 68a:	27 ff       	sbrs	r18, 7
 68c:	07 c0       	rjmp	.+14     	; 0x69c <vfprintf+0x1ec>
 68e:	60 81       	ld	r22, Z
 690:	71 81       	ldd	r23, Z+1	; 0x01
 692:	82 81       	ldd	r24, Z+2	; 0x02
 694:	93 81       	ldd	r25, Z+3	; 0x03
 696:	0c 5f       	subi	r16, 0xFC	; 252
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <vfprintf+0x1fc>
 69c:	60 81       	ld	r22, Z
 69e:	71 81       	ldd	r23, Z+1	; 0x01
 6a0:	88 27       	eor	r24, r24
 6a2:	77 fd       	sbrc	r23, 7
 6a4:	80 95       	com	r24
 6a6:	98 2f       	mov	r25, r24
 6a8:	0e 5f       	subi	r16, 0xFE	; 254
 6aa:	1f 4f       	sbci	r17, 0xFF	; 255
 6ac:	2f 76       	andi	r18, 0x6F	; 111
 6ae:	b2 2e       	mov	r11, r18
 6b0:	97 ff       	sbrs	r25, 7
 6b2:	09 c0       	rjmp	.+18     	; 0x6c6 <vfprintf+0x216>
 6b4:	90 95       	com	r25
 6b6:	80 95       	com	r24
 6b8:	70 95       	com	r23
 6ba:	61 95       	neg	r22
 6bc:	7f 4f       	sbci	r23, 0xFF	; 255
 6be:	8f 4f       	sbci	r24, 0xFF	; 255
 6c0:	9f 4f       	sbci	r25, 0xFF	; 255
 6c2:	20 68       	ori	r18, 0x80	; 128
 6c4:	b2 2e       	mov	r11, r18
 6c6:	2a e0       	ldi	r18, 0x0A	; 10
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	a4 01       	movw	r20, r8
 6cc:	6f d2       	rcall	.+1246   	; 0xbac <__ultoa_invert>
 6ce:	a8 2e       	mov	r10, r24
 6d0:	a8 18       	sub	r10, r8
 6d2:	43 c0       	rjmp	.+134    	; 0x75a <vfprintf+0x2aa>
 6d4:	85 37       	cpi	r24, 0x75	; 117
 6d6:	29 f4       	brne	.+10     	; 0x6e2 <vfprintf+0x232>
 6d8:	2f 7e       	andi	r18, 0xEF	; 239
 6da:	b2 2e       	mov	r11, r18
 6dc:	2a e0       	ldi	r18, 0x0A	; 10
 6de:	30 e0       	ldi	r19, 0x00	; 0
 6e0:	25 c0       	rjmp	.+74     	; 0x72c <vfprintf+0x27c>
 6e2:	f2 2f       	mov	r31, r18
 6e4:	f9 7f       	andi	r31, 0xF9	; 249
 6e6:	bf 2e       	mov	r11, r31
 6e8:	8f 36       	cpi	r24, 0x6F	; 111
 6ea:	c1 f0       	breq	.+48     	; 0x71c <vfprintf+0x26c>
 6ec:	18 f4       	brcc	.+6      	; 0x6f4 <vfprintf+0x244>
 6ee:	88 35       	cpi	r24, 0x58	; 88
 6f0:	79 f0       	breq	.+30     	; 0x710 <vfprintf+0x260>
 6f2:	ad c0       	rjmp	.+346    	; 0x84e <vfprintf+0x39e>
 6f4:	80 37       	cpi	r24, 0x70	; 112
 6f6:	19 f0       	breq	.+6      	; 0x6fe <vfprintf+0x24e>
 6f8:	88 37       	cpi	r24, 0x78	; 120
 6fa:	21 f0       	breq	.+8      	; 0x704 <vfprintf+0x254>
 6fc:	a8 c0       	rjmp	.+336    	; 0x84e <vfprintf+0x39e>
 6fe:	2f 2f       	mov	r18, r31
 700:	20 61       	ori	r18, 0x10	; 16
 702:	b2 2e       	mov	r11, r18
 704:	b4 fe       	sbrs	r11, 4
 706:	0d c0       	rjmp	.+26     	; 0x722 <vfprintf+0x272>
 708:	8b 2d       	mov	r24, r11
 70a:	84 60       	ori	r24, 0x04	; 4
 70c:	b8 2e       	mov	r11, r24
 70e:	09 c0       	rjmp	.+18     	; 0x722 <vfprintf+0x272>
 710:	24 ff       	sbrs	r18, 4
 712:	0a c0       	rjmp	.+20     	; 0x728 <vfprintf+0x278>
 714:	9f 2f       	mov	r25, r31
 716:	96 60       	ori	r25, 0x06	; 6
 718:	b9 2e       	mov	r11, r25
 71a:	06 c0       	rjmp	.+12     	; 0x728 <vfprintf+0x278>
 71c:	28 e0       	ldi	r18, 0x08	; 8
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	05 c0       	rjmp	.+10     	; 0x72c <vfprintf+0x27c>
 722:	20 e1       	ldi	r18, 0x10	; 16
 724:	30 e0       	ldi	r19, 0x00	; 0
 726:	02 c0       	rjmp	.+4      	; 0x72c <vfprintf+0x27c>
 728:	20 e1       	ldi	r18, 0x10	; 16
 72a:	32 e0       	ldi	r19, 0x02	; 2
 72c:	f8 01       	movw	r30, r16
 72e:	b7 fe       	sbrs	r11, 7
 730:	07 c0       	rjmp	.+14     	; 0x740 <vfprintf+0x290>
 732:	60 81       	ld	r22, Z
 734:	71 81       	ldd	r23, Z+1	; 0x01
 736:	82 81       	ldd	r24, Z+2	; 0x02
 738:	93 81       	ldd	r25, Z+3	; 0x03
 73a:	0c 5f       	subi	r16, 0xFC	; 252
 73c:	1f 4f       	sbci	r17, 0xFF	; 255
 73e:	06 c0       	rjmp	.+12     	; 0x74c <vfprintf+0x29c>
 740:	60 81       	ld	r22, Z
 742:	71 81       	ldd	r23, Z+1	; 0x01
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 5f       	subi	r16, 0xFE	; 254
 74a:	1f 4f       	sbci	r17, 0xFF	; 255
 74c:	a4 01       	movw	r20, r8
 74e:	2e d2       	rcall	.+1116   	; 0xbac <__ultoa_invert>
 750:	a8 2e       	mov	r10, r24
 752:	a8 18       	sub	r10, r8
 754:	fb 2d       	mov	r31, r11
 756:	ff 77       	andi	r31, 0x7F	; 127
 758:	bf 2e       	mov	r11, r31
 75a:	b6 fe       	sbrs	r11, 6
 75c:	0b c0       	rjmp	.+22     	; 0x774 <vfprintf+0x2c4>
 75e:	2b 2d       	mov	r18, r11
 760:	2e 7f       	andi	r18, 0xFE	; 254
 762:	a5 14       	cp	r10, r5
 764:	50 f4       	brcc	.+20     	; 0x77a <vfprintf+0x2ca>
 766:	b4 fe       	sbrs	r11, 4
 768:	0a c0       	rjmp	.+20     	; 0x77e <vfprintf+0x2ce>
 76a:	b2 fc       	sbrc	r11, 2
 76c:	08 c0       	rjmp	.+16     	; 0x77e <vfprintf+0x2ce>
 76e:	2b 2d       	mov	r18, r11
 770:	2e 7e       	andi	r18, 0xEE	; 238
 772:	05 c0       	rjmp	.+10     	; 0x77e <vfprintf+0x2ce>
 774:	7a 2c       	mov	r7, r10
 776:	2b 2d       	mov	r18, r11
 778:	03 c0       	rjmp	.+6      	; 0x780 <vfprintf+0x2d0>
 77a:	7a 2c       	mov	r7, r10
 77c:	01 c0       	rjmp	.+2      	; 0x780 <vfprintf+0x2d0>
 77e:	75 2c       	mov	r7, r5
 780:	24 ff       	sbrs	r18, 4
 782:	0d c0       	rjmp	.+26     	; 0x79e <vfprintf+0x2ee>
 784:	fe 01       	movw	r30, r28
 786:	ea 0d       	add	r30, r10
 788:	f1 1d       	adc	r31, r1
 78a:	80 81       	ld	r24, Z
 78c:	80 33       	cpi	r24, 0x30	; 48
 78e:	11 f4       	brne	.+4      	; 0x794 <vfprintf+0x2e4>
 790:	29 7e       	andi	r18, 0xE9	; 233
 792:	09 c0       	rjmp	.+18     	; 0x7a6 <vfprintf+0x2f6>
 794:	22 ff       	sbrs	r18, 2
 796:	06 c0       	rjmp	.+12     	; 0x7a4 <vfprintf+0x2f4>
 798:	73 94       	inc	r7
 79a:	73 94       	inc	r7
 79c:	04 c0       	rjmp	.+8      	; 0x7a6 <vfprintf+0x2f6>
 79e:	82 2f       	mov	r24, r18
 7a0:	86 78       	andi	r24, 0x86	; 134
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <vfprintf+0x2f6>
 7a4:	73 94       	inc	r7
 7a6:	23 fd       	sbrc	r18, 3
 7a8:	12 c0       	rjmp	.+36     	; 0x7ce <vfprintf+0x31e>
 7aa:	20 ff       	sbrs	r18, 0
 7ac:	06 c0       	rjmp	.+12     	; 0x7ba <vfprintf+0x30a>
 7ae:	5a 2c       	mov	r5, r10
 7b0:	73 14       	cp	r7, r3
 7b2:	18 f4       	brcc	.+6      	; 0x7ba <vfprintf+0x30a>
 7b4:	53 0c       	add	r5, r3
 7b6:	57 18       	sub	r5, r7
 7b8:	73 2c       	mov	r7, r3
 7ba:	73 14       	cp	r7, r3
 7bc:	60 f4       	brcc	.+24     	; 0x7d6 <vfprintf+0x326>
 7be:	b7 01       	movw	r22, r14
 7c0:	80 e2       	ldi	r24, 0x20	; 32
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	2c 87       	std	Y+12, r18	; 0x0c
 7c6:	c0 d1       	rcall	.+896    	; 0xb48 <fputc>
 7c8:	73 94       	inc	r7
 7ca:	2c 85       	ldd	r18, Y+12	; 0x0c
 7cc:	f6 cf       	rjmp	.-20     	; 0x7ba <vfprintf+0x30a>
 7ce:	73 14       	cp	r7, r3
 7d0:	10 f4       	brcc	.+4      	; 0x7d6 <vfprintf+0x326>
 7d2:	37 18       	sub	r3, r7
 7d4:	01 c0       	rjmp	.+2      	; 0x7d8 <vfprintf+0x328>
 7d6:	31 2c       	mov	r3, r1
 7d8:	24 ff       	sbrs	r18, 4
 7da:	11 c0       	rjmp	.+34     	; 0x7fe <vfprintf+0x34e>
 7dc:	b7 01       	movw	r22, r14
 7de:	80 e3       	ldi	r24, 0x30	; 48
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	2c 87       	std	Y+12, r18	; 0x0c
 7e4:	b1 d1       	rcall	.+866    	; 0xb48 <fputc>
 7e6:	2c 85       	ldd	r18, Y+12	; 0x0c
 7e8:	22 ff       	sbrs	r18, 2
 7ea:	16 c0       	rjmp	.+44     	; 0x818 <vfprintf+0x368>
 7ec:	21 ff       	sbrs	r18, 1
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <vfprintf+0x346>
 7f0:	88 e5       	ldi	r24, 0x58	; 88
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <vfprintf+0x34a>
 7f6:	88 e7       	ldi	r24, 0x78	; 120
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	b7 01       	movw	r22, r14
 7fc:	0c c0       	rjmp	.+24     	; 0x816 <vfprintf+0x366>
 7fe:	82 2f       	mov	r24, r18
 800:	86 78       	andi	r24, 0x86	; 134
 802:	51 f0       	breq	.+20     	; 0x818 <vfprintf+0x368>
 804:	21 fd       	sbrc	r18, 1
 806:	02 c0       	rjmp	.+4      	; 0x80c <vfprintf+0x35c>
 808:	80 e2       	ldi	r24, 0x20	; 32
 80a:	01 c0       	rjmp	.+2      	; 0x80e <vfprintf+0x35e>
 80c:	8b e2       	ldi	r24, 0x2B	; 43
 80e:	27 fd       	sbrc	r18, 7
 810:	8d e2       	ldi	r24, 0x2D	; 45
 812:	b7 01       	movw	r22, r14
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	98 d1       	rcall	.+816    	; 0xb48 <fputc>
 818:	a5 14       	cp	r10, r5
 81a:	30 f4       	brcc	.+12     	; 0x828 <vfprintf+0x378>
 81c:	b7 01       	movw	r22, r14
 81e:	80 e3       	ldi	r24, 0x30	; 48
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	92 d1       	rcall	.+804    	; 0xb48 <fputc>
 824:	5a 94       	dec	r5
 826:	f8 cf       	rjmp	.-16     	; 0x818 <vfprintf+0x368>
 828:	aa 94       	dec	r10
 82a:	f4 01       	movw	r30, r8
 82c:	ea 0d       	add	r30, r10
 82e:	f1 1d       	adc	r31, r1
 830:	80 81       	ld	r24, Z
 832:	b7 01       	movw	r22, r14
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	88 d1       	rcall	.+784    	; 0xb48 <fputc>
 838:	a1 10       	cpse	r10, r1
 83a:	f6 cf       	rjmp	.-20     	; 0x828 <vfprintf+0x378>
 83c:	33 20       	and	r3, r3
 83e:	09 f4       	brne	.+2      	; 0x842 <vfprintf+0x392>
 840:	5d ce       	rjmp	.-838    	; 0x4fc <vfprintf+0x4c>
 842:	b7 01       	movw	r22, r14
 844:	80 e2       	ldi	r24, 0x20	; 32
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	7f d1       	rcall	.+766    	; 0xb48 <fputc>
 84a:	3a 94       	dec	r3
 84c:	f7 cf       	rjmp	.-18     	; 0x83c <vfprintf+0x38c>
 84e:	f7 01       	movw	r30, r14
 850:	86 81       	ldd	r24, Z+6	; 0x06
 852:	97 81       	ldd	r25, Z+7	; 0x07
 854:	02 c0       	rjmp	.+4      	; 0x85a <vfprintf+0x3aa>
 856:	8f ef       	ldi	r24, 0xFF	; 255
 858:	9f ef       	ldi	r25, 0xFF	; 255
 85a:	2c 96       	adiw	r28, 0x0c	; 12
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	f8 94       	cli
 860:	de bf       	out	0x3e, r29	; 62
 862:	0f be       	out	0x3f, r0	; 63
 864:	cd bf       	out	0x3d, r28	; 61
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	1f 91       	pop	r17
 86c:	0f 91       	pop	r16
 86e:	ff 90       	pop	r15
 870:	ef 90       	pop	r14
 872:	df 90       	pop	r13
 874:	cf 90       	pop	r12
 876:	bf 90       	pop	r11
 878:	af 90       	pop	r10
 87a:	9f 90       	pop	r9
 87c:	8f 90       	pop	r8
 87e:	7f 90       	pop	r7
 880:	6f 90       	pop	r6
 882:	5f 90       	pop	r5
 884:	4f 90       	pop	r4
 886:	3f 90       	pop	r3
 888:	2f 90       	pop	r2
 88a:	08 95       	ret

0000088c <calloc>:
 88c:	0f 93       	push	r16
 88e:	1f 93       	push	r17
 890:	cf 93       	push	r28
 892:	df 93       	push	r29
 894:	86 9f       	mul	r24, r22
 896:	80 01       	movw	r16, r0
 898:	87 9f       	mul	r24, r23
 89a:	10 0d       	add	r17, r0
 89c:	96 9f       	mul	r25, r22
 89e:	10 0d       	add	r17, r0
 8a0:	11 24       	eor	r1, r1
 8a2:	c8 01       	movw	r24, r16
 8a4:	0d d0       	rcall	.+26     	; 0x8c0 <malloc>
 8a6:	ec 01       	movw	r28, r24
 8a8:	00 97       	sbiw	r24, 0x00	; 0
 8aa:	21 f0       	breq	.+8      	; 0x8b4 <calloc+0x28>
 8ac:	a8 01       	movw	r20, r16
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	70 e0       	ldi	r23, 0x00	; 0
 8b2:	38 d1       	rcall	.+624    	; 0xb24 <memset>
 8b4:	ce 01       	movw	r24, r28
 8b6:	df 91       	pop	r29
 8b8:	cf 91       	pop	r28
 8ba:	1f 91       	pop	r17
 8bc:	0f 91       	pop	r16
 8be:	08 95       	ret

000008c0 <malloc>:
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	82 30       	cpi	r24, 0x02	; 2
 8c6:	91 05       	cpc	r25, r1
 8c8:	10 f4       	brcc	.+4      	; 0x8ce <malloc+0xe>
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	e0 91 57 02 	lds	r30, 0x0257
 8d2:	f0 91 58 02 	lds	r31, 0x0258
 8d6:	20 e0       	ldi	r18, 0x00	; 0
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	a0 e0       	ldi	r26, 0x00	; 0
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	30 97       	sbiw	r30, 0x00	; 0
 8e0:	39 f1       	breq	.+78     	; 0x930 <malloc+0x70>
 8e2:	40 81       	ld	r20, Z
 8e4:	51 81       	ldd	r21, Z+1	; 0x01
 8e6:	48 17       	cp	r20, r24
 8e8:	59 07       	cpc	r21, r25
 8ea:	b8 f0       	brcs	.+46     	; 0x91a <malloc+0x5a>
 8ec:	48 17       	cp	r20, r24
 8ee:	59 07       	cpc	r21, r25
 8f0:	71 f4       	brne	.+28     	; 0x90e <malloc+0x4e>
 8f2:	82 81       	ldd	r24, Z+2	; 0x02
 8f4:	93 81       	ldd	r25, Z+3	; 0x03
 8f6:	10 97       	sbiw	r26, 0x00	; 0
 8f8:	29 f0       	breq	.+10     	; 0x904 <malloc+0x44>
 8fa:	13 96       	adiw	r26, 0x03	; 3
 8fc:	9c 93       	st	X, r25
 8fe:	8e 93       	st	-X, r24
 900:	12 97       	sbiw	r26, 0x02	; 2
 902:	2c c0       	rjmp	.+88     	; 0x95c <malloc+0x9c>
 904:	90 93 58 02 	sts	0x0258, r25
 908:	80 93 57 02 	sts	0x0257, r24
 90c:	27 c0       	rjmp	.+78     	; 0x95c <malloc+0x9c>
 90e:	21 15       	cp	r18, r1
 910:	31 05       	cpc	r19, r1
 912:	31 f0       	breq	.+12     	; 0x920 <malloc+0x60>
 914:	42 17       	cp	r20, r18
 916:	53 07       	cpc	r21, r19
 918:	18 f0       	brcs	.+6      	; 0x920 <malloc+0x60>
 91a:	a9 01       	movw	r20, r18
 91c:	db 01       	movw	r26, r22
 91e:	01 c0       	rjmp	.+2      	; 0x922 <malloc+0x62>
 920:	ef 01       	movw	r28, r30
 922:	9a 01       	movw	r18, r20
 924:	bd 01       	movw	r22, r26
 926:	df 01       	movw	r26, r30
 928:	02 80       	ldd	r0, Z+2	; 0x02
 92a:	f3 81       	ldd	r31, Z+3	; 0x03
 92c:	e0 2d       	mov	r30, r0
 92e:	d7 cf       	rjmp	.-82     	; 0x8de <malloc+0x1e>
 930:	21 15       	cp	r18, r1
 932:	31 05       	cpc	r19, r1
 934:	f9 f0       	breq	.+62     	; 0x974 <malloc+0xb4>
 936:	28 1b       	sub	r18, r24
 938:	39 0b       	sbc	r19, r25
 93a:	24 30       	cpi	r18, 0x04	; 4
 93c:	31 05       	cpc	r19, r1
 93e:	80 f4       	brcc	.+32     	; 0x960 <malloc+0xa0>
 940:	8a 81       	ldd	r24, Y+2	; 0x02
 942:	9b 81       	ldd	r25, Y+3	; 0x03
 944:	61 15       	cp	r22, r1
 946:	71 05       	cpc	r23, r1
 948:	21 f0       	breq	.+8      	; 0x952 <malloc+0x92>
 94a:	fb 01       	movw	r30, r22
 94c:	93 83       	std	Z+3, r25	; 0x03
 94e:	82 83       	std	Z+2, r24	; 0x02
 950:	04 c0       	rjmp	.+8      	; 0x95a <malloc+0x9a>
 952:	90 93 58 02 	sts	0x0258, r25
 956:	80 93 57 02 	sts	0x0257, r24
 95a:	fe 01       	movw	r30, r28
 95c:	32 96       	adiw	r30, 0x02	; 2
 95e:	44 c0       	rjmp	.+136    	; 0x9e8 <malloc+0x128>
 960:	fe 01       	movw	r30, r28
 962:	e2 0f       	add	r30, r18
 964:	f3 1f       	adc	r31, r19
 966:	81 93       	st	Z+, r24
 968:	91 93       	st	Z+, r25
 96a:	22 50       	subi	r18, 0x02	; 2
 96c:	31 09       	sbc	r19, r1
 96e:	39 83       	std	Y+1, r19	; 0x01
 970:	28 83       	st	Y, r18
 972:	3a c0       	rjmp	.+116    	; 0x9e8 <malloc+0x128>
 974:	20 91 55 02 	lds	r18, 0x0255
 978:	30 91 56 02 	lds	r19, 0x0256
 97c:	23 2b       	or	r18, r19
 97e:	41 f4       	brne	.+16     	; 0x990 <malloc+0xd0>
 980:	20 91 02 02 	lds	r18, 0x0202
 984:	30 91 03 02 	lds	r19, 0x0203
 988:	30 93 56 02 	sts	0x0256, r19
 98c:	20 93 55 02 	sts	0x0255, r18
 990:	20 91 00 02 	lds	r18, 0x0200
 994:	30 91 01 02 	lds	r19, 0x0201
 998:	21 15       	cp	r18, r1
 99a:	31 05       	cpc	r19, r1
 99c:	41 f4       	brne	.+16     	; 0x9ae <malloc+0xee>
 99e:	2d b7       	in	r18, 0x3d	; 61
 9a0:	3e b7       	in	r19, 0x3e	; 62
 9a2:	40 91 04 02 	lds	r20, 0x0204
 9a6:	50 91 05 02 	lds	r21, 0x0205
 9aa:	24 1b       	sub	r18, r20
 9ac:	35 0b       	sbc	r19, r21
 9ae:	e0 91 55 02 	lds	r30, 0x0255
 9b2:	f0 91 56 02 	lds	r31, 0x0256
 9b6:	e2 17       	cp	r30, r18
 9b8:	f3 07       	cpc	r31, r19
 9ba:	a0 f4       	brcc	.+40     	; 0x9e4 <malloc+0x124>
 9bc:	2e 1b       	sub	r18, r30
 9be:	3f 0b       	sbc	r19, r31
 9c0:	28 17       	cp	r18, r24
 9c2:	39 07       	cpc	r19, r25
 9c4:	78 f0       	brcs	.+30     	; 0x9e4 <malloc+0x124>
 9c6:	ac 01       	movw	r20, r24
 9c8:	4e 5f       	subi	r20, 0xFE	; 254
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	24 17       	cp	r18, r20
 9ce:	35 07       	cpc	r19, r21
 9d0:	48 f0       	brcs	.+18     	; 0x9e4 <malloc+0x124>
 9d2:	4e 0f       	add	r20, r30
 9d4:	5f 1f       	adc	r21, r31
 9d6:	50 93 56 02 	sts	0x0256, r21
 9da:	40 93 55 02 	sts	0x0255, r20
 9de:	81 93       	st	Z+, r24
 9e0:	91 93       	st	Z+, r25
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <malloc+0x128>
 9e4:	e0 e0       	ldi	r30, 0x00	; 0
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	cf 01       	movw	r24, r30
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	08 95       	ret

000009f0 <free>:
 9f0:	cf 93       	push	r28
 9f2:	df 93       	push	r29
 9f4:	00 97       	sbiw	r24, 0x00	; 0
 9f6:	09 f4       	brne	.+2      	; 0x9fa <free+0xa>
 9f8:	87 c0       	rjmp	.+270    	; 0xb08 <free+0x118>
 9fa:	fc 01       	movw	r30, r24
 9fc:	32 97       	sbiw	r30, 0x02	; 2
 9fe:	13 82       	std	Z+3, r1	; 0x03
 a00:	12 82       	std	Z+2, r1	; 0x02
 a02:	c0 91 57 02 	lds	r28, 0x0257
 a06:	d0 91 58 02 	lds	r29, 0x0258
 a0a:	20 97       	sbiw	r28, 0x00	; 0
 a0c:	81 f4       	brne	.+32     	; 0xa2e <free+0x3e>
 a0e:	20 81       	ld	r18, Z
 a10:	31 81       	ldd	r19, Z+1	; 0x01
 a12:	28 0f       	add	r18, r24
 a14:	39 1f       	adc	r19, r25
 a16:	80 91 55 02 	lds	r24, 0x0255
 a1a:	90 91 56 02 	lds	r25, 0x0256
 a1e:	82 17       	cp	r24, r18
 a20:	93 07       	cpc	r25, r19
 a22:	79 f5       	brne	.+94     	; 0xa82 <free+0x92>
 a24:	f0 93 56 02 	sts	0x0256, r31
 a28:	e0 93 55 02 	sts	0x0255, r30
 a2c:	6d c0       	rjmp	.+218    	; 0xb08 <free+0x118>
 a2e:	de 01       	movw	r26, r28
 a30:	20 e0       	ldi	r18, 0x00	; 0
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	ae 17       	cp	r26, r30
 a36:	bf 07       	cpc	r27, r31
 a38:	50 f4       	brcc	.+20     	; 0xa4e <free+0x5e>
 a3a:	12 96       	adiw	r26, 0x02	; 2
 a3c:	4d 91       	ld	r20, X+
 a3e:	5c 91       	ld	r21, X
 a40:	13 97       	sbiw	r26, 0x03	; 3
 a42:	9d 01       	movw	r18, r26
 a44:	41 15       	cp	r20, r1
 a46:	51 05       	cpc	r21, r1
 a48:	09 f1       	breq	.+66     	; 0xa8c <free+0x9c>
 a4a:	da 01       	movw	r26, r20
 a4c:	f3 cf       	rjmp	.-26     	; 0xa34 <free+0x44>
 a4e:	b3 83       	std	Z+3, r27	; 0x03
 a50:	a2 83       	std	Z+2, r26	; 0x02
 a52:	40 81       	ld	r20, Z
 a54:	51 81       	ldd	r21, Z+1	; 0x01
 a56:	84 0f       	add	r24, r20
 a58:	95 1f       	adc	r25, r21
 a5a:	8a 17       	cp	r24, r26
 a5c:	9b 07       	cpc	r25, r27
 a5e:	71 f4       	brne	.+28     	; 0xa7c <free+0x8c>
 a60:	8d 91       	ld	r24, X+
 a62:	9c 91       	ld	r25, X
 a64:	11 97       	sbiw	r26, 0x01	; 1
 a66:	84 0f       	add	r24, r20
 a68:	95 1f       	adc	r25, r21
 a6a:	02 96       	adiw	r24, 0x02	; 2
 a6c:	91 83       	std	Z+1, r25	; 0x01
 a6e:	80 83       	st	Z, r24
 a70:	12 96       	adiw	r26, 0x02	; 2
 a72:	8d 91       	ld	r24, X+
 a74:	9c 91       	ld	r25, X
 a76:	13 97       	sbiw	r26, 0x03	; 3
 a78:	93 83       	std	Z+3, r25	; 0x03
 a7a:	82 83       	std	Z+2, r24	; 0x02
 a7c:	21 15       	cp	r18, r1
 a7e:	31 05       	cpc	r19, r1
 a80:	29 f4       	brne	.+10     	; 0xa8c <free+0x9c>
 a82:	f0 93 58 02 	sts	0x0258, r31
 a86:	e0 93 57 02 	sts	0x0257, r30
 a8a:	3e c0       	rjmp	.+124    	; 0xb08 <free+0x118>
 a8c:	d9 01       	movw	r26, r18
 a8e:	13 96       	adiw	r26, 0x03	; 3
 a90:	fc 93       	st	X, r31
 a92:	ee 93       	st	-X, r30
 a94:	12 97       	sbiw	r26, 0x02	; 2
 a96:	4d 91       	ld	r20, X+
 a98:	5d 91       	ld	r21, X+
 a9a:	a4 0f       	add	r26, r20
 a9c:	b5 1f       	adc	r27, r21
 a9e:	ea 17       	cp	r30, r26
 aa0:	fb 07       	cpc	r31, r27
 aa2:	79 f4       	brne	.+30     	; 0xac2 <free+0xd2>
 aa4:	80 81       	ld	r24, Z
 aa6:	91 81       	ldd	r25, Z+1	; 0x01
 aa8:	84 0f       	add	r24, r20
 aaa:	95 1f       	adc	r25, r21
 aac:	02 96       	adiw	r24, 0x02	; 2
 aae:	d9 01       	movw	r26, r18
 ab0:	11 96       	adiw	r26, 0x01	; 1
 ab2:	9c 93       	st	X, r25
 ab4:	8e 93       	st	-X, r24
 ab6:	82 81       	ldd	r24, Z+2	; 0x02
 ab8:	93 81       	ldd	r25, Z+3	; 0x03
 aba:	13 96       	adiw	r26, 0x03	; 3
 abc:	9c 93       	st	X, r25
 abe:	8e 93       	st	-X, r24
 ac0:	12 97       	sbiw	r26, 0x02	; 2
 ac2:	e0 e0       	ldi	r30, 0x00	; 0
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	8a 81       	ldd	r24, Y+2	; 0x02
 ac8:	9b 81       	ldd	r25, Y+3	; 0x03
 aca:	00 97       	sbiw	r24, 0x00	; 0
 acc:	19 f0       	breq	.+6      	; 0xad4 <free+0xe4>
 ace:	fe 01       	movw	r30, r28
 ad0:	ec 01       	movw	r28, r24
 ad2:	f9 cf       	rjmp	.-14     	; 0xac6 <free+0xd6>
 ad4:	ce 01       	movw	r24, r28
 ad6:	02 96       	adiw	r24, 0x02	; 2
 ad8:	28 81       	ld	r18, Y
 ada:	39 81       	ldd	r19, Y+1	; 0x01
 adc:	82 0f       	add	r24, r18
 ade:	93 1f       	adc	r25, r19
 ae0:	20 91 55 02 	lds	r18, 0x0255
 ae4:	30 91 56 02 	lds	r19, 0x0256
 ae8:	28 17       	cp	r18, r24
 aea:	39 07       	cpc	r19, r25
 aec:	69 f4       	brne	.+26     	; 0xb08 <free+0x118>
 aee:	30 97       	sbiw	r30, 0x00	; 0
 af0:	29 f4       	brne	.+10     	; 0xafc <free+0x10c>
 af2:	10 92 58 02 	sts	0x0258, r1
 af6:	10 92 57 02 	sts	0x0257, r1
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <free+0x110>
 afc:	13 82       	std	Z+3, r1	; 0x03
 afe:	12 82       	std	Z+2, r1	; 0x02
 b00:	d0 93 56 02 	sts	0x0256, r29
 b04:	c0 93 55 02 	sts	0x0255, r28
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	08 95       	ret

00000b0e <strnlen_P>:
 b0e:	fc 01       	movw	r30, r24
 b10:	05 90       	lpm	r0, Z+
 b12:	61 50       	subi	r22, 0x01	; 1
 b14:	70 40       	sbci	r23, 0x00	; 0
 b16:	01 10       	cpse	r0, r1
 b18:	d8 f7       	brcc	.-10     	; 0xb10 <strnlen_P+0x2>
 b1a:	80 95       	com	r24
 b1c:	90 95       	com	r25
 b1e:	8e 0f       	add	r24, r30
 b20:	9f 1f       	adc	r25, r31
 b22:	08 95       	ret

00000b24 <memset>:
 b24:	dc 01       	movw	r26, r24
 b26:	01 c0       	rjmp	.+2      	; 0xb2a <memset+0x6>
 b28:	6d 93       	st	X+, r22
 b2a:	41 50       	subi	r20, 0x01	; 1
 b2c:	50 40       	sbci	r21, 0x00	; 0
 b2e:	e0 f7       	brcc	.-8      	; 0xb28 <memset+0x4>
 b30:	08 95       	ret

00000b32 <strnlen>:
 b32:	fc 01       	movw	r30, r24
 b34:	61 50       	subi	r22, 0x01	; 1
 b36:	70 40       	sbci	r23, 0x00	; 0
 b38:	01 90       	ld	r0, Z+
 b3a:	01 10       	cpse	r0, r1
 b3c:	d8 f7       	brcc	.-10     	; 0xb34 <strnlen+0x2>
 b3e:	80 95       	com	r24
 b40:	90 95       	com	r25
 b42:	8e 0f       	add	r24, r30
 b44:	9f 1f       	adc	r25, r31
 b46:	08 95       	ret

00000b48 <fputc>:
 b48:	0f 93       	push	r16
 b4a:	1f 93       	push	r17
 b4c:	cf 93       	push	r28
 b4e:	df 93       	push	r29
 b50:	18 2f       	mov	r17, r24
 b52:	09 2f       	mov	r16, r25
 b54:	eb 01       	movw	r28, r22
 b56:	8b 81       	ldd	r24, Y+3	; 0x03
 b58:	81 fd       	sbrc	r24, 1
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <fputc+0x1a>
 b5c:	8f ef       	ldi	r24, 0xFF	; 255
 b5e:	9f ef       	ldi	r25, 0xFF	; 255
 b60:	20 c0       	rjmp	.+64     	; 0xba2 <fputc+0x5a>
 b62:	82 ff       	sbrs	r24, 2
 b64:	10 c0       	rjmp	.+32     	; 0xb86 <fputc+0x3e>
 b66:	4e 81       	ldd	r20, Y+6	; 0x06
 b68:	5f 81       	ldd	r21, Y+7	; 0x07
 b6a:	2c 81       	ldd	r18, Y+4	; 0x04
 b6c:	3d 81       	ldd	r19, Y+5	; 0x05
 b6e:	42 17       	cp	r20, r18
 b70:	53 07       	cpc	r21, r19
 b72:	7c f4       	brge	.+30     	; 0xb92 <fputc+0x4a>
 b74:	e8 81       	ld	r30, Y
 b76:	f9 81       	ldd	r31, Y+1	; 0x01
 b78:	9f 01       	movw	r18, r30
 b7a:	2f 5f       	subi	r18, 0xFF	; 255
 b7c:	3f 4f       	sbci	r19, 0xFF	; 255
 b7e:	39 83       	std	Y+1, r19	; 0x01
 b80:	28 83       	st	Y, r18
 b82:	10 83       	st	Z, r17
 b84:	06 c0       	rjmp	.+12     	; 0xb92 <fputc+0x4a>
 b86:	e8 85       	ldd	r30, Y+8	; 0x08
 b88:	f9 85       	ldd	r31, Y+9	; 0x09
 b8a:	81 2f       	mov	r24, r17
 b8c:	19 95       	eicall
 b8e:	89 2b       	or	r24, r25
 b90:	29 f7       	brne	.-54     	; 0xb5c <fputc+0x14>
 b92:	2e 81       	ldd	r18, Y+6	; 0x06
 b94:	3f 81       	ldd	r19, Y+7	; 0x07
 b96:	2f 5f       	subi	r18, 0xFF	; 255
 b98:	3f 4f       	sbci	r19, 0xFF	; 255
 b9a:	3f 83       	std	Y+7, r19	; 0x07
 b9c:	2e 83       	std	Y+6, r18	; 0x06
 b9e:	81 2f       	mov	r24, r17
 ba0:	90 2f       	mov	r25, r16
 ba2:	df 91       	pop	r29
 ba4:	cf 91       	pop	r28
 ba6:	1f 91       	pop	r17
 ba8:	0f 91       	pop	r16
 baa:	08 95       	ret

00000bac <__ultoa_invert>:
 bac:	fa 01       	movw	r30, r20
 bae:	aa 27       	eor	r26, r26
 bb0:	28 30       	cpi	r18, 0x08	; 8
 bb2:	51 f1       	breq	.+84     	; 0xc08 <__ultoa_invert+0x5c>
 bb4:	20 31       	cpi	r18, 0x10	; 16
 bb6:	81 f1       	breq	.+96     	; 0xc18 <__ultoa_invert+0x6c>
 bb8:	e8 94       	clt
 bba:	6f 93       	push	r22
 bbc:	6e 7f       	andi	r22, 0xFE	; 254
 bbe:	6e 5f       	subi	r22, 0xFE	; 254
 bc0:	7f 4f       	sbci	r23, 0xFF	; 255
 bc2:	8f 4f       	sbci	r24, 0xFF	; 255
 bc4:	9f 4f       	sbci	r25, 0xFF	; 255
 bc6:	af 4f       	sbci	r26, 0xFF	; 255
 bc8:	b1 e0       	ldi	r27, 0x01	; 1
 bca:	3e d0       	rcall	.+124    	; 0xc48 <__ultoa_invert+0x9c>
 bcc:	b4 e0       	ldi	r27, 0x04	; 4
 bce:	3c d0       	rcall	.+120    	; 0xc48 <__ultoa_invert+0x9c>
 bd0:	67 0f       	add	r22, r23
 bd2:	78 1f       	adc	r23, r24
 bd4:	89 1f       	adc	r24, r25
 bd6:	9a 1f       	adc	r25, r26
 bd8:	a1 1d       	adc	r26, r1
 bda:	68 0f       	add	r22, r24
 bdc:	79 1f       	adc	r23, r25
 bde:	8a 1f       	adc	r24, r26
 be0:	91 1d       	adc	r25, r1
 be2:	a1 1d       	adc	r26, r1
 be4:	6a 0f       	add	r22, r26
 be6:	71 1d       	adc	r23, r1
 be8:	81 1d       	adc	r24, r1
 bea:	91 1d       	adc	r25, r1
 bec:	a1 1d       	adc	r26, r1
 bee:	20 d0       	rcall	.+64     	; 0xc30 <__ultoa_invert+0x84>
 bf0:	09 f4       	brne	.+2      	; 0xbf4 <__ultoa_invert+0x48>
 bf2:	68 94       	set
 bf4:	3f 91       	pop	r19
 bf6:	2a e0       	ldi	r18, 0x0A	; 10
 bf8:	26 9f       	mul	r18, r22
 bfa:	11 24       	eor	r1, r1
 bfc:	30 19       	sub	r19, r0
 bfe:	30 5d       	subi	r19, 0xD0	; 208
 c00:	31 93       	st	Z+, r19
 c02:	de f6       	brtc	.-74     	; 0xbba <__ultoa_invert+0xe>
 c04:	cf 01       	movw	r24, r30
 c06:	08 95       	ret
 c08:	46 2f       	mov	r20, r22
 c0a:	47 70       	andi	r20, 0x07	; 7
 c0c:	40 5d       	subi	r20, 0xD0	; 208
 c0e:	41 93       	st	Z+, r20
 c10:	b3 e0       	ldi	r27, 0x03	; 3
 c12:	0f d0       	rcall	.+30     	; 0xc32 <__ultoa_invert+0x86>
 c14:	c9 f7       	brne	.-14     	; 0xc08 <__ultoa_invert+0x5c>
 c16:	f6 cf       	rjmp	.-20     	; 0xc04 <__ultoa_invert+0x58>
 c18:	46 2f       	mov	r20, r22
 c1a:	4f 70       	andi	r20, 0x0F	; 15
 c1c:	40 5d       	subi	r20, 0xD0	; 208
 c1e:	4a 33       	cpi	r20, 0x3A	; 58
 c20:	18 f0       	brcs	.+6      	; 0xc28 <__ultoa_invert+0x7c>
 c22:	49 5d       	subi	r20, 0xD9	; 217
 c24:	31 fd       	sbrc	r19, 1
 c26:	40 52       	subi	r20, 0x20	; 32
 c28:	41 93       	st	Z+, r20
 c2a:	02 d0       	rcall	.+4      	; 0xc30 <__ultoa_invert+0x84>
 c2c:	a9 f7       	brne	.-22     	; 0xc18 <__ultoa_invert+0x6c>
 c2e:	ea cf       	rjmp	.-44     	; 0xc04 <__ultoa_invert+0x58>
 c30:	b4 e0       	ldi	r27, 0x04	; 4
 c32:	a6 95       	lsr	r26
 c34:	97 95       	ror	r25
 c36:	87 95       	ror	r24
 c38:	77 95       	ror	r23
 c3a:	67 95       	ror	r22
 c3c:	ba 95       	dec	r27
 c3e:	c9 f7       	brne	.-14     	; 0xc32 <__ultoa_invert+0x86>
 c40:	00 97       	sbiw	r24, 0x00	; 0
 c42:	61 05       	cpc	r22, r1
 c44:	71 05       	cpc	r23, r1
 c46:	08 95       	ret
 c48:	9b 01       	movw	r18, r22
 c4a:	ac 01       	movw	r20, r24
 c4c:	0a 2e       	mov	r0, r26
 c4e:	06 94       	lsr	r0
 c50:	57 95       	ror	r21
 c52:	47 95       	ror	r20
 c54:	37 95       	ror	r19
 c56:	27 95       	ror	r18
 c58:	ba 95       	dec	r27
 c5a:	c9 f7       	brne	.-14     	; 0xc4e <__ultoa_invert+0xa2>
 c5c:	62 0f       	add	r22, r18
 c5e:	73 1f       	adc	r23, r19
 c60:	84 1f       	adc	r24, r20
 c62:	95 1f       	adc	r25, r21
 c64:	a0 1d       	adc	r26, r0
 c66:	08 95       	ret

00000c68 <_exit>:
 c68:	f8 94       	cli

00000c6a <__stop_program>:
 c6a:	ff cf       	rjmp	.-2      	; 0xc6a <__stop_program>
