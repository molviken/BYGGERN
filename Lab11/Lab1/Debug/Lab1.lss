
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000c72  00000d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800152  00800152  00000d58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002580  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d94  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ca1  00000000  00000000  00004314  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000544  00000000  00000000  00004fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006fd  00000000  00000000  000054fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f08  00000000  00000000  00005bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00006b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
   4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
   c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
  6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
  78:	00 06       	cpc	r0, r16
  7a:	5f 5f       	subi	r21, 0xFF	; 255
  7c:	06 00       	.word	0x0006	; ????
  7e:	00 00       	nop
  80:	00 07       	cpc	r16, r16
  82:	07 00       	.word	0x0007	; ????
  84:	07 07       	cpc	r16, r23
  86:	00 00       	nop
  88:	14 7f       	andi	r17, 0xF4	; 244
  8a:	7f 14       	cp	r7, r15
  8c:	7f 7f       	andi	r23, 0xFF	; 255
  8e:	14 00       	.word	0x0014	; ????
  90:	24 2e       	mov	r2, r20
  92:	6b 6b       	ori	r22, 0xBB	; 187
  94:	3a 12       	cpse	r3, r26
  96:	00 00       	nop
  98:	46 66       	ori	r20, 0x66	; 102
  9a:	30 18       	sub	r3, r0
  9c:	0c 66       	ori	r16, 0x6C	; 108
  9e:	62 00       	.word	0x0062	; ????
  a0:	30 7a       	andi	r19, 0xA0	; 160
  a2:	4f 5d       	subi	r20, 0xDF	; 223
  a4:	37 7a       	andi	r19, 0xA7	; 167
  a6:	48 00       	.word	0x0048	; ????
  a8:	04 07       	cpc	r16, r20
  aa:	03 00       	.word	0x0003	; ????
  ac:	00 00       	nop
  ae:	00 00       	nop
  b0:	00 1c       	adc	r0, r0
  b2:	3e 63       	ori	r19, 0x3E	; 62
  b4:	41 00       	.word	0x0041	; ????
  b6:	00 00       	nop
  b8:	00 41       	sbci	r16, 0x10	; 16
  ba:	63 3e       	cpi	r22, 0xE3	; 227
  bc:	1c 00       	.word	0x001c	; ????
  be:	00 00       	nop
  c0:	08 2a       	or	r0, r24
  c2:	3e 1c       	adc	r3, r14
  c4:	1c 3e       	cpi	r17, 0xEC	; 236
  c6:	2a 08       	sbc	r2, r10
  c8:	08 08       	sbc	r0, r8
  ca:	3e 3e       	cpi	r19, 0xEE	; 238
  cc:	08 08       	sbc	r0, r8
  ce:	00 00       	nop
  d0:	00 a0       	ldd	r0, Z+32	; 0x20
  d2:	e0 60       	ori	r30, 0x00	; 0
  d4:	00 00       	nop
  d6:	00 00       	nop
  d8:	08 08       	sbc	r0, r8
  da:	08 08       	sbc	r0, r8
  dc:	08 08       	sbc	r0, r8
  de:	00 00       	nop
  e0:	00 00       	nop
  e2:	60 60       	ori	r22, 0x00	; 0
  e4:	00 00       	nop
  e6:	00 00       	nop
  e8:	60 30       	cpi	r22, 0x00	; 0
  ea:	18 0c       	add	r1, r8
  ec:	06 03       	mulsu	r16, r22
  ee:	01 00       	.word	0x0001	; ????
  f0:	3e 7f       	andi	r19, 0xFE	; 254
  f2:	59 4d       	sbci	r21, 0xD9	; 217
  f4:	7f 3e       	cpi	r23, 0xEF	; 239
  f6:	00 00       	nop
  f8:	42 42       	sbci	r20, 0x22	; 34
  fa:	7f 7f       	andi	r23, 0xFF	; 255
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	00 00       	nop
 100:	62 73       	andi	r22, 0x32	; 50
 102:	59 49       	sbci	r21, 0x99	; 153
 104:	6f 66       	ori	r22, 0x6F	; 111
 106:	00 00       	nop
 108:	22 63       	ori	r18, 0x32	; 50
 10a:	49 49       	sbci	r20, 0x99	; 153
 10c:	7f 36       	cpi	r23, 0x6F	; 111
 10e:	00 00       	nop
 110:	18 1c       	adc	r1, r8
 112:	16 13       	cpse	r17, r22
 114:	7f 7f       	andi	r23, 0xFF	; 255
 116:	10 00       	.word	0x0010	; ????
 118:	27 67       	ori	r18, 0x77	; 119
 11a:	45 45       	sbci	r20, 0x55	; 85
 11c:	7d 39       	cpi	r23, 0x9D	; 157
 11e:	00 00       	nop
 120:	3c 7e       	andi	r19, 0xEC	; 236
 122:	4b 49       	sbci	r20, 0x9B	; 155
 124:	79 30       	cpi	r23, 0x09	; 9
 126:	00 00       	nop
 128:	03 63       	ori	r16, 0x33	; 51
 12a:	71 19       	sub	r23, r1
 12c:	0f 07       	cpc	r16, r31
 12e:	00 00       	nop
 130:	36 7f       	andi	r19, 0xF6	; 246
 132:	49 49       	sbci	r20, 0x99	; 153
 134:	7f 36       	cpi	r23, 0x6F	; 111
 136:	00 00       	nop
 138:	06 4f       	sbci	r16, 0xF6	; 246
 13a:	49 69       	ori	r20, 0x99	; 153
 13c:	3f 1e       	adc	r3, r31
 13e:	00 00       	nop
 140:	00 00       	nop
 142:	6c 6c       	ori	r22, 0xCC	; 204
 144:	00 00       	nop
 146:	00 00       	nop
 148:	00 a0       	ldd	r0, Z+32	; 0x20
 14a:	ec 6c       	ori	r30, 0xCC	; 204
 14c:	00 00       	nop
 14e:	00 00       	nop
 150:	08 1c       	adc	r0, r8
 152:	36 63       	ori	r19, 0x36	; 54
 154:	41 00       	.word	0x0041	; ????
 156:	00 00       	nop
 158:	14 14       	cp	r1, r4
 15a:	14 14       	cp	r1, r4
 15c:	14 14       	cp	r1, r4
 15e:	00 00       	nop
 160:	00 41       	sbci	r16, 0x10	; 16
 162:	63 36       	cpi	r22, 0x63	; 99
 164:	1c 08       	sbc	r1, r12
 166:	00 00       	nop
 168:	02 03       	mulsu	r16, r18
 16a:	51 59       	subi	r21, 0x91	; 145
 16c:	0f 06       	cpc	r0, r31
 16e:	00 00       	nop
 170:	3e 7f       	andi	r19, 0xFE	; 254
 172:	41 5d       	subi	r20, 0xD1	; 209
 174:	5d 1f       	adc	r21, r29
 176:	1e 00       	.word	0x001e	; ????
 178:	7c 7e       	andi	r23, 0xEC	; 236
 17a:	13 13       	cpse	r17, r19
 17c:	7e 7c       	andi	r23, 0xCE	; 206
 17e:	00 00       	nop
 180:	41 7f       	andi	r20, 0xF1	; 241
 182:	7f 49       	sbci	r23, 0x9F	; 159
 184:	49 7f       	andi	r20, 0xF9	; 249
 186:	36 00       	.word	0x0036	; ????
 188:	1c 3e       	cpi	r17, 0xEC	; 236
 18a:	63 41       	sbci	r22, 0x13	; 19
 18c:	41 63       	ori	r20, 0x31	; 49
 18e:	22 00       	.word	0x0022	; ????
 190:	41 7f       	andi	r20, 0xF1	; 241
 192:	7f 41       	sbci	r23, 0x1F	; 31
 194:	63 7f       	andi	r22, 0xF3	; 243
 196:	1c 00       	.word	0x001c	; ????
 198:	41 7f       	andi	r20, 0xF1	; 241
 19a:	7f 49       	sbci	r23, 0x9F	; 159
 19c:	5d 41       	sbci	r21, 0x1D	; 29
 19e:	63 00       	.word	0x0063	; ????
 1a0:	41 7f       	andi	r20, 0xF1	; 241
 1a2:	7f 49       	sbci	r23, 0x9F	; 159
 1a4:	1d 01       	movw	r2, r26
 1a6:	03 00       	.word	0x0003	; ????
 1a8:	1c 3e       	cpi	r17, 0xEC	; 236
 1aa:	63 41       	sbci	r22, 0x13	; 19
 1ac:	51 73       	andi	r21, 0x31	; 49
 1ae:	72 00       	.word	0x0072	; ????
 1b0:	7f 7f       	andi	r23, 0xFF	; 255
 1b2:	08 08       	sbc	r0, r8
 1b4:	7f 7f       	andi	r23, 0xFF	; 255
 1b6:	00 00       	nop
 1b8:	00 41       	sbci	r16, 0x10	; 16
 1ba:	7f 7f       	andi	r23, 0xFF	; 255
 1bc:	41 00       	.word	0x0041	; ????
 1be:	00 00       	nop
 1c0:	30 70       	andi	r19, 0x00	; 0
 1c2:	40 41       	sbci	r20, 0x10	; 16
 1c4:	7f 3f       	cpi	r23, 0xFF	; 255
 1c6:	01 00       	.word	0x0001	; ????
 1c8:	41 7f       	andi	r20, 0xF1	; 241
 1ca:	7f 08       	sbc	r7, r15
 1cc:	1c 77       	andi	r17, 0x7C	; 124
 1ce:	63 00       	.word	0x0063	; ????
 1d0:	41 7f       	andi	r20, 0xF1	; 241
 1d2:	7f 41       	sbci	r23, 0x1F	; 31
 1d4:	40 60       	ori	r20, 0x00	; 0
 1d6:	70 00       	.word	0x0070	; ????
 1d8:	7f 7f       	andi	r23, 0xFF	; 255
 1da:	06 0c       	add	r0, r6
 1dc:	06 7f       	andi	r16, 0xF6	; 246
 1de:	7f 00       	.word	0x007f	; ????
 1e0:	7f 7f       	andi	r23, 0xFF	; 255
 1e2:	06 0c       	add	r0, r6
 1e4:	18 7f       	andi	r17, 0xF8	; 248
 1e6:	7f 00       	.word	0x007f	; ????
 1e8:	1c 3e       	cpi	r17, 0xEC	; 236
 1ea:	63 41       	sbci	r22, 0x13	; 19
 1ec:	63 3e       	cpi	r22, 0xE3	; 227
 1ee:	1c 00       	.word	0x001c	; ????
 1f0:	41 7f       	andi	r20, 0xF1	; 241
 1f2:	7f 49       	sbci	r23, 0x9F	; 159
 1f4:	09 0f       	add	r16, r25
 1f6:	06 00       	.word	0x0006	; ????
 1f8:	1e 3f       	cpi	r17, 0xFE	; 254
 1fa:	21 71       	andi	r18, 0x11	; 17
 1fc:	7f 5e       	subi	r23, 0xEF	; 239
 1fe:	00 00       	nop
 200:	41 7f       	andi	r20, 0xF1	; 241
 202:	7f 19       	sub	r23, r15
 204:	39 6f       	ori	r19, 0xF9	; 249
 206:	46 00       	.word	0x0046	; ????
 208:	26 67       	ori	r18, 0x76	; 118
 20a:	4d 59       	subi	r20, 0x9D	; 157
 20c:	7b 32       	cpi	r23, 0x2B	; 43
 20e:	00 00       	nop
 210:	03 41       	sbci	r16, 0x13	; 19
 212:	7f 7f       	andi	r23, 0xFF	; 255
 214:	41 03       	mulsu	r20, r17
 216:	00 00       	nop
 218:	7f 7f       	andi	r23, 0xFF	; 255
 21a:	40 40       	sbci	r20, 0x00	; 0
 21c:	7f 7f       	andi	r23, 0xFF	; 255
 21e:	00 00       	nop
 220:	1f 3f       	cpi	r17, 0xFF	; 255
 222:	60 60       	ori	r22, 0x00	; 0
 224:	3f 1f       	adc	r19, r31
 226:	00 00       	nop
 228:	7f 7f       	andi	r23, 0xFF	; 255
 22a:	30 18       	sub	r3, r0
 22c:	30 7f       	andi	r19, 0xF0	; 240
 22e:	7f 00       	.word	0x007f	; ????
 230:	63 77       	andi	r22, 0x73	; 115
 232:	1c 08       	sbc	r1, r12
 234:	1c 77       	andi	r17, 0x7C	; 124
 236:	63 00       	.word	0x0063	; ????
 238:	07 4f       	sbci	r16, 0xF7	; 247
 23a:	78 78       	andi	r23, 0x88	; 136
 23c:	4f 07       	cpc	r20, r31
 23e:	00 00       	nop
 240:	67 73       	andi	r22, 0x37	; 55
 242:	59 4d       	sbci	r21, 0xD9	; 217
 244:	47 63       	ori	r20, 0x37	; 55
 246:	71 00       	.word	0x0071	; ????
 248:	00 7f       	andi	r16, 0xF0	; 240
 24a:	7f 41       	sbci	r23, 0x1F	; 31
 24c:	41 00       	.word	0x0041	; ????
 24e:	00 00       	nop
 250:	01 03       	mulsu	r16, r17
 252:	06 0c       	add	r0, r6
 254:	18 30       	cpi	r17, 0x08	; 8
 256:	60 00       	.word	0x0060	; ????
 258:	00 41       	sbci	r16, 0x10	; 16
 25a:	41 7f       	andi	r20, 0xF1	; 241
 25c:	7f 00       	.word	0x007f	; ????
 25e:	00 00       	nop
 260:	08 0c       	add	r0, r8
 262:	06 03       	mulsu	r16, r22
 264:	06 0c       	add	r0, r6
 266:	08 00       	.word	0x0008	; ????
 268:	80 80       	ld	r8, Z
 26a:	80 80       	ld	r8, Z
 26c:	80 80       	ld	r8, Z
 26e:	80 80       	ld	r8, Z
 270:	00 00       	nop
 272:	03 07       	cpc	r16, r19
 274:	04 00       	.word	0x0004	; ????
 276:	00 00       	nop
 278:	20 74       	andi	r18, 0x40	; 64
 27a:	54 54       	subi	r21, 0x44	; 68
 27c:	3c 78       	andi	r19, 0x8C	; 140
 27e:	40 00       	.word	0x0040	; ????
 280:	41 3f       	cpi	r20, 0xF1	; 241
 282:	7f 44       	sbci	r23, 0x4F	; 79
 284:	44 7c       	andi	r20, 0xC4	; 196
 286:	38 00       	.word	0x0038	; ????
 288:	38 7c       	andi	r19, 0xC8	; 200
 28a:	44 44       	sbci	r20, 0x44	; 68
 28c:	6c 28       	or	r6, r12
 28e:	00 00       	nop
 290:	30 78       	andi	r19, 0x80	; 128
 292:	48 49       	sbci	r20, 0x98	; 152
 294:	3f 7f       	andi	r19, 0xFF	; 255
 296:	40 00       	.word	0x0040	; ????
 298:	38 7c       	andi	r19, 0xC8	; 200
 29a:	54 54       	subi	r21, 0x44	; 68
 29c:	5c 18       	sub	r5, r12
 29e:	00 00       	nop
 2a0:	48 7e       	andi	r20, 0xE8	; 232
 2a2:	7f 49       	sbci	r23, 0x9F	; 159
 2a4:	03 02       	muls	r16, r19
 2a6:	00 00       	nop
 2a8:	98 bc       	out	0x28, r9	; 40
 2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
 2ac:	f8 7c       	andi	r31, 0xC8	; 200
 2ae:	04 00       	.word	0x0004	; ????
 2b0:	41 7f       	andi	r20, 0xF1	; 241
 2b2:	7f 08       	sbc	r7, r15
 2b4:	04 7c       	andi	r16, 0xC4	; 196
 2b6:	78 00       	.word	0x0078	; ????
 2b8:	00 44       	sbci	r16, 0x40	; 64
 2ba:	7d 7d       	andi	r23, 0xDD	; 221
 2bc:	40 00       	.word	0x0040	; ????
 2be:	00 00       	nop
 2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <fdevopen+0xa>
 2c2:	84 fd       	sbrc	r24, 4
 2c4:	7d 00       	.word	0x007d	; ????
 2c6:	00 00       	nop
 2c8:	41 7f       	andi	r20, 0xF1	; 241
 2ca:	7f 10       	cpse	r7, r15
 2cc:	38 6c       	ori	r19, 0xC8	; 200
 2ce:	44 00       	.word	0x0044	; ????
 2d0:	00 41       	sbci	r16, 0x10	; 16
 2d2:	7f 7f       	andi	r23, 0xFF	; 255
 2d4:	40 00       	.word	0x0040	; ????
 2d6:	00 00       	nop
 2d8:	7c 7c       	andi	r23, 0xCC	; 204
 2da:	0c 18       	sub	r0, r12
 2dc:	0c 7c       	andi	r16, 0xCC	; 204
 2de:	78 00       	.word	0x0078	; ????
 2e0:	7c 7c       	andi	r23, 0xCC	; 204
 2e2:	04 04       	cpc	r0, r4
 2e4:	7c 78       	andi	r23, 0x8C	; 140
 2e6:	00 00       	nop
 2e8:	38 7c       	andi	r19, 0xC8	; 200
 2ea:	44 44       	sbci	r20, 0x44	; 68
 2ec:	7c 38       	cpi	r23, 0x8C	; 140
 2ee:	00 00       	nop
 2f0:	84 fc       	sbrc	r8, 4
 2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
 2f4:	24 3c       	cpi	r18, 0xC4	; 196
 2f6:	18 00       	.word	0x0018	; ????
 2f8:	18 3c       	cpi	r17, 0xC8	; 200
 2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
 2fc:	f8 fc       	.word	0xfcf8	; ????
 2fe:	84 00       	.word	0x0084	; ????
 300:	44 7c       	andi	r20, 0xC4	; 196
 302:	78 44       	sbci	r23, 0x48	; 72
 304:	1c 18       	sub	r1, r12
 306:	00 00       	nop
 308:	48 5c       	subi	r20, 0xC8	; 200
 30a:	54 54       	subi	r21, 0x44	; 68
 30c:	74 24       	eor	r7, r4
 30e:	00 00       	nop
 310:	00 04       	cpc	r0, r0
 312:	3e 7f       	andi	r19, 0xFE	; 254
 314:	44 24       	eor	r4, r4
 316:	00 00       	nop
 318:	3c 7c       	andi	r19, 0xCC	; 204
 31a:	40 40       	sbci	r20, 0x00	; 0
 31c:	3c 7c       	andi	r19, 0xCC	; 204
 31e:	40 00       	.word	0x0040	; ????
 320:	1c 3c       	cpi	r17, 0xCC	; 204
 322:	60 60       	ori	r22, 0x00	; 0
 324:	3c 1c       	adc	r3, r12
 326:	00 00       	nop
 328:	3c 7c       	andi	r19, 0xCC	; 204
 32a:	60 30       	cpi	r22, 0x00	; 0
 32c:	60 7c       	andi	r22, 0xC0	; 192
 32e:	3c 00       	.word	0x003c	; ????
 330:	44 6c       	ori	r20, 0xC4	; 196
 332:	38 10       	cpse	r3, r8
 334:	38 6c       	ori	r19, 0xC8	; 200
 336:	44 00       	.word	0x0044	; ????
 338:	9c bc       	out	0x2c, r9	; 44
 33a:	a0 a0       	ldd	r10, Z+32	; 0x20
 33c:	fc 7c       	andi	r31, 0xCC	; 204
 33e:	00 00       	nop
 340:	4c 64       	ori	r20, 0x4C	; 76
 342:	74 5c       	subi	r23, 0xC4	; 196
 344:	4c 64       	ori	r20, 0x4C	; 76
 346:	00 00       	nop
 348:	08 08       	sbc	r0, r8
 34a:	3e 77       	andi	r19, 0x7E	; 126
 34c:	41 41       	sbci	r20, 0x11	; 17
 34e:	00 00       	nop
 350:	00 00       	nop
 352:	00 77       	andi	r16, 0x70	; 112
 354:	77 00       	.word	0x0077	; ????
 356:	00 00       	nop
 358:	41 41       	sbci	r20, 0x11	; 17
 35a:	77 3e       	cpi	r23, 0xE7	; 231
 35c:	08 08       	sbc	r0, r8
 35e:	00 00       	nop
 360:	02 03       	mulsu	r16, r18
 362:	01 03       	mulsu	r16, r17
 364:	02 03       	mulsu	r16, r18
 366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
 368:	11 24       	eor	r1, r1
 36a:	1f be       	out	0x3f, r1	; 63
 36c:	cf ef       	ldi	r28, 0xFF	; 255
 36e:	d4 e0       	ldi	r29, 0x04	; 4
 370:	de bf       	out	0x3e, r29	; 62
 372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
 374:	11 e0       	ldi	r17, 0x01	; 1
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b1 e0       	ldi	r27, 0x01	; 1
 37a:	e2 e7       	ldi	r30, 0x72	; 114
 37c:	fc e0       	ldi	r31, 0x0C	; 12
 37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
 380:	05 90       	lpm	r0, Z+
 382:	0d 92       	st	X+, r0
 384:	a2 35       	cpi	r26, 0x52	; 82
 386:	b1 07       	cpc	r27, r17
 388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
 38a:	21 e0       	ldi	r18, 0x01	; 1
 38c:	a2 e5       	ldi	r26, 0x52	; 82
 38e:	b1 e0       	ldi	r27, 0x01	; 1
 390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
 392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
 394:	a3 36       	cpi	r26, 0x63	; 99
 396:	b2 07       	cpc	r27, r18
 398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
 39a:	0e 94 aa 02 	call	0x554	; 0x554 <main>
 39e:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <_exit>

000003a2 <__bad_interrupt>:
 3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
#include <string.h>
#include "uart.h"
#include <avr/io.h>
#include <util/delay.h>
void adc_init(void){
	set_bit(MCUCR,SRE);
 3a6:	85 b7       	in	r24, 0x35	; 53
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
 3ac:	80 b7       	in	r24, 0x30	; 48
 3ae:	80 62       	ori	r24, 0x20	; 32
 3b0:	80 bf       	out	0x30, r24	; 48
	clear_bit(DDRE,DDE0);
 3b2:	30 98       	cbi	0x06, 0	; 6
 3b4:	08 95       	ret

000003b6 <adc_read>:
}

uint8_t adc_read(uint8_t channel){
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	
	volatile char* adc_adr = (char *) 0x1400;
	adc_adr[0] = channel;
 3c0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c4:	92 e4       	ldi	r25, 0x42	; 66
 3c6:	9a 95       	dec	r25
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <adc_read+0x10>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <adc_read+0x16>
	_delay_us(200);
	volatile uint8_t retreived_value = adc_adr[channel];
 3cc:	e8 2f       	mov	r30, r24
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	fc 5e       	subi	r31, 0xEC	; 236
 3d2:	80 81       	ld	r24, Z
 3d4:	89 83       	std	Y+1, r24	; 0x01
	return retreived_value;
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 3d8:	0f 90       	pop	r0
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <CAN_init>:
#include "MCPkontroll.h"

uint8_t rx_flag = 0;

void CAN_init(){
	MCP_init();
 3e0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <MCP_init>
	// Turn mask/filters off
	MCP_bit_mod(MCP_RXB0CTRL, 0b01100100, 0xFF);
 3e4:	4f ef       	ldi	r20, 0xFF	; 255
 3e6:	64 e6       	ldi	r22, 0x64	; 100
 3e8:	80 e6       	ldi	r24, 0x60	; 96
 3ea:	0e 94 2d 03 	call	0x65a	; 0x65a <MCP_bit_mod>
	
	// Set LoopBack mode on
	MCP_bit_mod(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); // MCP_CANCTRL = MODE_LOOPBACK;
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	60 ee       	ldi	r22, 0xE0	; 224
 3f2:	8f e0       	ldi	r24, 0x0F	; 15
 3f4:	0e 94 2d 03 	call	0x65a	; 0x65a <MCP_bit_mod>
	
	// Enable interrupt when a valid message has been received
	MCP_bit_mod(MCP_CANINTE, MCP_RX0IF, 1);
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	8b e2       	ldi	r24, 0x2B	; 43
 3fe:	0e 94 2d 03 	call	0x65a	; 0x65a <MCP_bit_mod>
	MCP_bit_mod(MCP_CANINTE, MCP_TX0IF, 1);
 402:	41 e0       	ldi	r20, 0x01	; 1
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	8b e2       	ldi	r24, 0x2B	; 43
 408:	0e 94 2d 03 	call	0x65a	; 0x65a <MCP_bit_mod>
	if ((MCP_read(MCP_CANSTAT) & MODE_MASK) != MODE_NORMAL)
 40c:	8e e0       	ldi	r24, 0x0E	; 14
 40e:	0e 94 0b 03 	call	0x616	; 0x616 <MCP_read>
	{
		//printf("NOT in NORMAL mode!\n");
	}
	
	MCP_read(MCP_CANCTRL);
 412:	8f e0       	ldi	r24, 0x0F	; 15
 414:	0e 94 0b 03 	call	0x616	; 0x616 <MCP_read>
 418:	08 95       	ret

0000041a <CAN_check_error>:
	}
	return 0;
}

int CAN_check_error(void){
	uint8_t error = MCP_read(MCP_TXB0CTRL);
 41a:	80 e3       	ldi	r24, 0x30	; 48
 41c:	0e 94 0b 03 	call	0x616	; 0x616 <MCP_read>
	// Checking transmission error
	if(test_bit(error,4)){return -1;}
 420:	84 fd       	sbrc	r24, 4
 422:	05 c0       	rjmp	.+10     	; 0x42e <CAN_check_error+0x14>
		
	// checking for message lost arbitration
	if(test_bit(error,5)){return -2;}
 424:	85 ff       	sbrs	r24, 5
 426:	06 c0       	rjmp	.+12     	; 0x434 <CAN_check_error+0x1a>
 428:	8e ef       	ldi	r24, 0xFE	; 254
 42a:	9f ef       	ldi	r25, 0xFF	; 255
 42c:	08 95       	ret
}

int CAN_check_error(void){
	uint8_t error = MCP_read(MCP_TXB0CTRL);
	// Checking transmission error
	if(test_bit(error,4)){return -1;}
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	9f ef       	ldi	r25, 0xFF	; 255
 432:	08 95       	ret
		
	// checking for message lost arbitration
	if(test_bit(error,5)){return -2;}
	else{return 1;}
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	90 e0       	ldi	r25, 0x00	; 0
}
 438:	08 95       	ret

0000043a <CAN_completed_transmit>:

int CAN_completed_transmit(void){
	if (test_bit(MCP_read(MCP_TXB0CTRL),3)){
 43a:	80 e3       	ldi	r24, 0x30	; 48
 43c:	0e 94 0b 03 	call	0x616	; 0x616 <MCP_read>
 440:	86 95       	lsr	r24
 442:	86 95       	lsr	r24
 444:	86 95       	lsr	r24
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	89 27       	eor	r24, r25
	}
	else{
		return 1;
	}
	
}
 44a:	81 70       	andi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	08 95       	ret

00000450 <CAN_transmit>:
	
	MCP_read(MCP_CANCTRL);
	
}

int CAN_transmit(struct CAN_message message){
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	0f 93       	push	r16
 456:	1f 93       	push	r17
 458:	cf 93       	push	r28
 45a:	df 93       	push	r29
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	2a 97       	sbiw	r28, 0x0a	; 10
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	f8 94       	cli
 466:	de bf       	out	0x3e, r29	; 62
 468:	0f be       	out	0x3f, r0	; 63
 46a:	cd bf       	out	0x3d, r28	; 61
 46c:	09 83       	std	Y+1, r16	; 0x01
 46e:	e1 2e       	mov	r14, r17
 470:	1a 83       	std	Y+2, r17	; 0x02
 472:	2b 83       	std	Y+3, r18	; 0x03
 474:	3c 83       	std	Y+4, r19	; 0x04
 476:	4d 83       	std	Y+5, r20	; 0x05
 478:	5e 83       	std	Y+6, r21	; 0x06
 47a:	6f 83       	std	Y+7, r22	; 0x07
 47c:	78 87       	std	Y+8, r23	; 0x08
 47e:	89 87       	std	Y+9, r24	; 0x09
 480:	9a 87       	std	Y+10, r25	; 0x0a
	// Setting the standard identifier
	MCP_write(message.id >> 3, MCP_TXB0SIDH);
 482:	61 e3       	ldi	r22, 0x31	; 49
 484:	80 2f       	mov	r24, r16
 486:	86 95       	lsr	r24
 488:	86 95       	lsr	r24
 48a:	86 95       	lsr	r24
 48c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <MCP_write>
	MCP_write(message.id << 5, MCP_TXB0SIDL);
 490:	62 e3       	ldi	r22, 0x32	; 50
 492:	80 2f       	mov	r24, r16
 494:	82 95       	swap	r24
 496:	88 0f       	add	r24, r24
 498:	80 7e       	andi	r24, 0xE0	; 224
 49a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <MCP_write>
	
	// setting data length
	MCP_write((0x0F) & message.length, MCP_TXB0DLC);
 49e:	65 e3       	ldi	r22, 0x35	; 53
 4a0:	81 2f       	mov	r24, r17
 4a2:	8f 70       	andi	r24, 0x0F	; 15
 4a4:	0e 94 f7 02 	call	0x5ee	; 0x5ee <MCP_write>
	
	// setting data bytes
	for (uint8_t i = 0x00; i< message.length; i++){
 4a8:	11 23       	and	r17, r17
 4aa:	91 f0       	breq	.+36     	; 0x4d0 <CAN_transmit+0x80>
 4ac:	8e 01       	movw	r16, r28
 4ae:	0d 5f       	subi	r16, 0xFD	; 253
 4b0:	1f 4f       	sbci	r17, 0xFF	; 255
 4b2:	86 e3       	ldi	r24, 0x36	; 54
 4b4:	e8 0e       	add	r14, r24
 4b6:	0f 2e       	mov	r0, r31
 4b8:	f6 e3       	ldi	r31, 0x36	; 54
 4ba:	ff 2e       	mov	r15, r31
 4bc:	f0 2d       	mov	r31, r0
	MCP_write(message.data[i], MCP_TXB0D0+i);
 4be:	6f 2d       	mov	r22, r15
 4c0:	f8 01       	movw	r30, r16
 4c2:	81 91       	ld	r24, Z+
 4c4:	8f 01       	movw	r16, r30
 4c6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <MCP_write>
 4ca:	f3 94       	inc	r15
	
	// setting data length
	MCP_write((0x0F) & message.length, MCP_TXB0DLC);
	
	// setting data bytes
	for (uint8_t i = 0x00; i< message.length; i++){
 4cc:	fe 10       	cpse	r15, r14
 4ce:	f7 cf       	rjmp	.-18     	; 0x4be <CAN_transmit+0x6e>
	MCP_write(message.data[i], MCP_TXB0D0+i);
	}
	MCP_rts(1);
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 1d 03 	call	0x63a	; 0x63a <MCP_rts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d6:	89 ef       	ldi	r24, 0xF9	; 249
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <CAN_transmit+0x8a>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <CAN_transmit+0x90>
 4e0:	00 00       	nop
	_delay_ms(1);
	
	if(!CAN_completed_transmit()){
 4e2:	0e 94 1d 02 	call	0x43a	; 0x43a <CAN_completed_transmit>
 4e6:	89 2b       	or	r24, r25
 4e8:	19 f4       	brne	.+6      	; 0x4f0 <CAN_transmit+0xa0>
		//printf("Transmit not completed, bit = %i \n",test_bit(MCP_TXB0CTRL,3));
		return CAN_check_error();
 4ea:	0e 94 0d 02 	call	0x41a	; 0x41a <CAN_check_error>
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <CAN_transmit+0xa4>
	}
	return 0;
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
}
 4f4:	2a 96       	adiw	r28, 0x0a	; 10
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	f8 94       	cli
 4fa:	de bf       	out	0x3e, r29	; 62
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	cd bf       	out	0x3d, r28	; 61
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	1f 91       	pop	r17
 506:	0f 91       	pop	r16
 508:	ff 90       	pop	r15
 50a:	ef 90       	pop	r14
 50c:	08 95       	ret

0000050e <read_joystick_position>:
#define loop_until_bit_is_clear( reg, bit ) while( test_bit( reg, bit ) )
#include "joystick.h"
#include "adc.h"
#include <stdbool.h>
struct Menu_position pos;
struct Joystick read_joystick_position(uint8_t channel_one, uint8_t channel_two){
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	d8 2f       	mov	r29, r24
 514:	86 2f       	mov	r24, r22
	int x_pos = (adc_read(channel_two));//-134)*0.8264462809917355;
 516:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
 51a:	c8 2f       	mov	r28, r24
	int y_pos = (adc_read(channel_one));//-133)*0.819672131147541;
 51c:	8d 2f       	mov	r24, r29
 51e:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
 522:	28 2f       	mov	r18, r24
	struct Joystick global_joystick;
	global_joystick.x_pos = x_pos;
	global_joystick.y_pos = y_pos;
	//printf("X: %i, Y: %i \n", x_pos,y_pos);

	return global_joystick;
 524:	6c 2f       	mov	r22, r28
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	82 2f       	mov	r24, r18
 52a:	90 e0       	ldi	r25, 0x00	; 0
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <read_slider_position>:
struct Slider read_slider_position(uint8_t channel_one, uint8_t channel_two){
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	d6 2f       	mov	r29, r22
	int slider1 = adc_read(channel_one);
 538:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
 53c:	c8 2f       	mov	r28, r24
	//_delay_ms(100);
	int slider2 = adc_read(channel_two);
 53e:	8d 2f       	mov	r24, r29
 540:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
 544:	28 2f       	mov	r18, r24
	struct Slider global_slider;
	global_slider.slider1 = slider1;
	global_slider.slider2 = slider2;
	return global_slider;
 546:	6c 2f       	mov	r22, r28
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	82 2f       	mov	r24, r18
 54c:	90 e0       	ldi	r25, 0x00	; 0
	//printf("Slider 1: %i, Slider 2: %i \n", slider1,slider2);
}
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <main>:
#include "menu_system.h"
volatile char* oled_adresse = 0x1200;
volatile char* adc_adresse = 0x1400;
volatile char* ram_adresse = 0x1800;
int main(void)
{
 554:	cf 93       	push	r28
 556:	df 93       	push	r29
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	2a 97       	sbiw	r28, 0x0a	; 10
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0b00000000;
 568:	17 ba       	out	0x17, r1	; 23

	EXT_MEM_Init();
 56a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <EXT_MEM_Init>
	USART_Init(31);				
 56e:	8f e1       	ldi	r24, 0x1F	; 31
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <USART_Init>
	oled_init();
 576:	0e 94 b0 03 	call	0x760	; 0x760 <oled_init>
	oled_reset();
 57a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <oled_reset>
	adc_init();
 57e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	CAN_init();
 582:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <CAN_init>
	//menu_system();
	menu_initialize();
 586:	0e 94 af 03 	call	0x75e	; 0x75e <menu_initialize>
	printf("Init er good\n");
 58a:	86 e0       	ldi	r24, 0x06	; 6
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	0e 94 e7 05 	call	0xbce	; 0xbce <puts>
	//SRAM_test();
	//printf("Init er GOOD\n");
	struct CAN_message usb_board;
	usb_board.id = 3;
 592:	83 e0       	ldi	r24, 0x03	; 3
 594:	89 83       	std	Y+1, r24	; 0x01
	usb_board.length = 4;
 596:	84 e0       	ldi	r24, 0x04	; 4
 598:	8a 83       	std	Y+2, r24	; 0x02
	oled_reset();
 59a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <oled_reset>
	//oled_print_letter("K",0x01,0x09,0x11);
	menu_create();
 59e:	0e 94 81 03 	call	0x702	; 0x702 <menu_create>

	while(1)
    {
		menu_nav();	
 5a2:	0e 94 90 03 	call	0x720	; 0x720 <menu_nav>
		usb_board.data[0] = (uint8_t)read_joystick_position(channel1, channel2).x_pos;
 5a6:	65 e0       	ldi	r22, 0x05	; 5
 5a8:	84 e0       	ldi	r24, 0x04	; 4
 5aa:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_position>
 5ae:	6b 83       	std	Y+3, r22	; 0x03
		usb_board.data[1] = (uint8_t)read_joystick_position(channel1, channel2).y_pos;
 5b0:	65 e0       	ldi	r22, 0x05	; 5
 5b2:	84 e0       	ldi	r24, 0x04	; 4
 5b4:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_position>
 5b8:	8c 83       	std	Y+4, r24	; 0x04
		usb_board.data[2] = (uint8_t)read_slider_position(channel3,channel4).slider1;
 5ba:	67 e0       	ldi	r22, 0x07	; 7
 5bc:	86 e0       	ldi	r24, 0x06	; 6
 5be:	0e 94 99 02 	call	0x532	; 0x532 <read_slider_position>
 5c2:	6d 83       	std	Y+5, r22	; 0x05
		usb_board.data[3] = (uint8_t)read_slider_position(channel3,channel4).slider2;
 5c4:	67 e0       	ldi	r22, 0x07	; 7
 5c6:	86 e0       	ldi	r24, 0x06	; 6
 5c8:	0e 94 99 02 	call	0x532	; 0x532 <read_slider_position>
		//usb_board.data[4] = (int)sonoid_button();
		//printf("x pos: %d		slider right: %d		Sonoid: %i \n", usb_board.data[0],usb_board.data[3], usb_board.data[4]);
		
		CAN_transmit(usb_board);
 5cc:	09 81       	ldd	r16, Y+1	; 0x01
 5ce:	1a 81       	ldd	r17, Y+2	; 0x02
 5d0:	2b 81       	ldd	r18, Y+3	; 0x03
 5d2:	3c 81       	ldd	r19, Y+4	; 0x04
 5d4:	4d 81       	ldd	r20, Y+5	; 0x05
 5d6:	58 2f       	mov	r21, r24
 5d8:	6f 81       	ldd	r22, Y+7	; 0x07
 5da:	78 85       	ldd	r23, Y+8	; 0x08
 5dc:	89 85       	ldd	r24, Y+9	; 0x09
 5de:	9a 85       	ldd	r25, Y+10	; 0x0a
 5e0:	0e 94 28 02 	call	0x450	; 0x450 <CAN_transmit>
 5e4:	de cf       	rjmp	.-68     	; 0x5a2 <main+0x4e>

000005e6 <select_CAN>:
#include "MCP2515.h"
#define DD_SS PB4
#include "SPI.h"

void select_CAN(void){
	clear_bit(PORTB, DD_SS);
 5e6:	c4 98       	cbi	0x18, 4	; 24
 5e8:	08 95       	ret

000005ea <deselect_CAN>:
}

void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
 5ea:	c4 9a       	sbi	0x18, 4	; 24
 5ec:	08 95       	ret

000005ee <MCP_write>:
void MCP_init(){
	SPI_MasterInit();
	MCP_reset();
}

void MCP_write(uint8_t data, uint8_t address){
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	c8 2f       	mov	r28, r24
 5f4:	d6 2f       	mov	r29, r22
	// printf("MCP_write data = %x, address = %x \n", data, address);
	select_CAN();
 5f6:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <select_CAN>
	
	SPI_MasterTransmit(MCP_WRITE);
 5fa:	82 e0       	ldi	r24, 0x02	; 2
 5fc:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 600:	8d 2f       	mov	r24, r29
 602:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
 606:	8c 2f       	mov	r24, r28
 608:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	deselect_CAN();
 60c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <deselect_CAN>
}
 610:	df 91       	pop	r29
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <MCP_read>:

uint8_t MCP_read(uint8_t address){
 616:	cf 93       	push	r28
 618:	c8 2f       	mov	r28, r24
	uint8_t temp;
	
	select_CAN();
 61a:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <select_CAN>
	
	SPI_MasterTransmit(MCP_READ);
 61e:	83 e0       	ldi	r24, 0x03	; 3
 620:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 624:	8c 2f       	mov	r24, r28
 626:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	temp = SPI_MasterReceive();
 62a:	0e 94 56 04 	call	0x8ac	; 0x8ac <SPI_MasterReceive>
 62e:	c8 2f       	mov	r28, r24
	deselect_CAN();
 630:	0e 94 f5 02 	call	0x5ea	; 0x5ea <deselect_CAN>
	// printf("I MCP_read, temp = %x, address = %x \n", temp, address);
	return temp;
}
 634:	8c 2f       	mov	r24, r28
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <MCP_rts>:

void MCP_rts(uint8_t reg){
 63a:	cf 93       	push	r28
	
if (reg <= 7)
 63c:	88 30       	cpi	r24, 0x08	; 8
 63e:	18 f4       	brcc	.+6      	; 0x646 <MCP_rts+0xc>
{reg = MCP_RTS | reg;
 640:	c8 2f       	mov	r28, r24
 642:	c0 68       	ori	r28, 0x80	; 128
 644:	01 c0       	rjmp	.+2      	; 0x648 <MCP_rts+0xe>
}
else{
	reg = MCP_RTS;
 646:	c0 e8       	ldi	r28, 0x80	; 128
}	
	select_CAN();
 648:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <select_CAN>
	SPI_MasterTransmit(reg);
 64c:	8c 2f       	mov	r24, r28
 64e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	deselect_CAN();	
 652:	0e 94 f5 02 	call	0x5ea	; 0x5ea <deselect_CAN>
}
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <MCP_bit_mod>:
	SPI_MasterTransmit(MCP_READ_STATUS);
	deselect_CAN();
	return SPI_MasterReceive();
}

void MCP_bit_mod(uint8_t address, uint8_t m_byte, uint8_t d_byte){
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	18 2f       	mov	r17, r24
 662:	d6 2f       	mov	r29, r22
 664:	c4 2f       	mov	r28, r20
	select_CAN();
 666:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <select_CAN>
	SPI_MasterTransmit(MCP_BITMOD);
 66a:	85 e0       	ldi	r24, 0x05	; 5
 66c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 670:	81 2f       	mov	r24, r17
 672:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	SPI_MasterTransmit(m_byte);
 676:	8d 2f       	mov	r24, r29
 678:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	SPI_MasterTransmit(d_byte);
 67c:	8c 2f       	mov	r24, r28
 67e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	deselect_CAN();
 682:	0e 94 f5 02 	call	0x5ea	; 0x5ea <deselect_CAN>
}
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	08 95       	ret

0000068e <MCP_reset>:

void MCP_reset(){
	select_CAN();
 68e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <select_CAN>
	SPI_MasterTransmit(MCP_RESET);
 692:	80 ec       	ldi	r24, 0xC0	; 192
 694:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	deselect_CAN();
 698:	0e 94 f5 02 	call	0x5ea	; 0x5ea <deselect_CAN>
	uint8_t mode = MCP_read(MCP_CANSTAT);
 69c:	8e e0       	ldi	r24, 0x0E	; 14
 69e:	0e 94 0b 03 	call	0x616	; 0x616 <MCP_read>
	if ((mode&MODE_MASK)!=MODE_CONFIG)
 6a2:	80 7e       	andi	r24, 0xE0	; 224
 6a4:	80 38       	cpi	r24, 0x80	; 128
 6a6:	21 f0       	breq	.+8      	; 0x6b0 <MCP_reset+0x22>
	{
		printf("Not in config after reset\n");
 6a8:	83 e1       	ldi	r24, 0x13	; 19
 6aa:	91 e0       	ldi	r25, 0x01	; 1
 6ac:	0e 94 e7 05 	call	0xbce	; 0xbce <puts>
 6b0:	08 95       	ret

000006b2 <MCP_init>:
void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
}

void MCP_init(){
	SPI_MasterInit();
 6b2:	0e 94 4d 04 	call	0x89a	; 0x89a <SPI_MasterInit>
	MCP_reset();
 6b6:	0e 94 47 03 	call	0x68e	; 0x68e <MCP_reset>
 6ba:	08 95       	ret

000006bc <init_menu>:
#include "joystick.h"
#include "menu_functions.h"

struct Hashtag hashtag;

MENU* init_menu(char*title){
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	ec 01       	movw	r28, r24
	MENU *main_menu = (MENU*)malloc(sizeof(MENU));
 6c2:	86 e1       	ldi	r24, 0x16	; 22
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 75 04 	call	0x8ea	; 0x8ea <malloc>
 6ca:	fc 01       	movw	r30, r24
	
	if (main_menu == NULL){
 6cc:	00 97       	sbiw	r24, 0x00	; 0
 6ce:	41 f4       	brne	.+16     	; 0x6e0 <init_menu+0x24>
		printf("Cant continue, memory full\n");
 6d0:	8d e2       	ldi	r24, 0x2D	; 45
 6d2:	91 e0       	ldi	r25, 0x01	; 1
 6d4:	0e 94 e7 05 	call	0xbce	; 0xbce <puts>
		exit(1);
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 37 06 	call	0xc6e	; 0xc6e <_exit>
	}
	
	main_menu->text = title;
 6e0:	d1 83       	std	Z+1, r29	; 0x01
 6e2:	c0 83       	st	Z, r28
	main_menu->parent = NULL;
 6e4:	13 8a       	std	Z+19, r1	; 0x13
 6e6:	12 8a       	std	Z+18, r1	; 0x12
	main_menu->sub = NULL;
 6e8:	15 8a       	std	Z+21, r1	; 0x15
 6ea:	14 8a       	std	Z+20, r1	; 0x14
	main_menu->over = NULL;
 6ec:	17 86       	std	Z+15, r1	; 0x0f
 6ee:	16 86       	std	Z+14, r1	; 0x0e
	main_menu->under = NULL;
 6f0:	11 8a       	std	Z+17, r1	; 0x11
 6f2:	10 8a       	std	Z+16, r1	; 0x10
	main_menu->sub_menus = 0;
 6f4:	13 86       	std	Z+11, r1	; 0x0b
 6f6:	12 86       	std	Z+10, r1	; 0x0a
	main_menu->goto_func = NULL;
 6f8:	15 86       	std	Z+13, r1	; 0x0d
 6fa:	14 86       	std	Z+12, r1	; 0x0c
	return main_menu;
	
}
 6fc:	df 91       	pop	r29
 6fe:	cf 91       	pop	r28
 700:	08 95       	ret

00000702 <menu_create>:
		default:
			break;
	}
}

MENU* menu_create(){
 702:	cf 93       	push	r28
 704:	df 93       	push	r29
	MENU *main_menu = init_menu("Main Menu");
 706:	88 e4       	ldi	r24, 0x48	; 72
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <init_menu>
 70e:	ec 01       	movw	r28, r24
	oled_print(main_menu->text);
 710:	88 81       	ld	r24, Y
 712:	99 81       	ldd	r25, Y+1	; 0x01
 714:	0e 94 1b 04 	call	0x836	; 0x836 <oled_print>

	//MENU *start_game = menu_add_submenu(main_menu,menu_start_game(),"Pong starts now!");
	//menu_add_description(start_game,"Joystick mode!",1) ;
	return main_menu;
}
 718:	ce 01       	movw	r24, r28
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	08 95       	ret

00000720 <menu_nav>:


void menu_nav(){
	//oled_print("Main1,main2,main3,main4");
	static uint8_t page = 0x00;
	int y = read_joystick_position(channel1,channel2).y_pos;
 720:	65 e0       	ldi	r22, 0x05	; 5
 722:	84 e0       	ldi	r24, 0x04	; 4
 724:	0e 94 87 02 	call	0x50e	; 0x50e <read_joystick_position>
	if (y<20 && !hashtag.moveY){
 728:	84 31       	cpi	r24, 0x14	; 20
 72a:	91 05       	cpc	r25, r1
 72c:	94 f4       	brge	.+36     	; 0x752 <menu_nav+0x32>
 72e:	20 91 57 01 	lds	r18, 0x0157
 732:	21 11       	cpse	r18, r1
 734:	0e c0       	rjmp	.+28     	; 0x752 <menu_nav+0x32>
	//printf("why are you in here	%d		%i\n",y,hashtag.moveY);
		//oled_print_letter(" ",page,0x09,0x11);
		page +=0x01;
 736:	60 91 52 01 	lds	r22, 0x0152
 73a:	6f 5f       	subi	r22, 0xFF	; 255
 73c:	60 93 52 01 	sts	0x0152, r22
		oled_print_letter('a',page,0x09,0x11);
 740:	21 e1       	ldi	r18, 0x11	; 17
 742:	49 e0       	ldi	r20, 0x09	; 9
 744:	81 e6       	ldi	r24, 0x61	; 97
 746:	0e 94 fd 03 	call	0x7fa	; 0x7fa <oled_print_letter>
		hashtag.moveY = true;
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	80 93 57 01 	sts	0x0157, r24
 750:	08 95       	ret
	}
	else if(y>120){
 752:	89 37       	cpi	r24, 0x79	; 121
 754:	91 05       	cpc	r25, r1
 756:	14 f0       	brlt	.+4      	; 0x75c <menu_nav+0x3c>
		hashtag.moveY = false;
 758:	10 92 57 01 	sts	0x0157, r1
 75c:	08 95       	ret

0000075e <menu_initialize>:





void menu_initialize(){
 75e:	08 95       	ret

00000760 <oled_init>:

int coloumn_counter = 0;
int tall = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
 760:	e0 e0       	ldi	r30, 0x00	; 0
 762:	f0 e1       	ldi	r31, 0x10	; 16
 764:	8e ea       	ldi	r24, 0xAE	; 174
 766:	80 83       	st	Z, r24
 768:	81 ea       	ldi	r24, 0xA1	; 161
 76a:	80 83       	st	Z, r24
 76c:	8a ed       	ldi	r24, 0xDA	; 218
 76e:	80 83       	st	Z, r24
 770:	82 e1       	ldi	r24, 0x12	; 18
 772:	80 83       	st	Z, r24
 774:	88 ec       	ldi	r24, 0xC8	; 200
 776:	80 83       	st	Z, r24
 778:	88 ea       	ldi	r24, 0xA8	; 168
 77a:	80 83       	st	Z, r24
 77c:	8f e3       	ldi	r24, 0x3F	; 63
 77e:	80 83       	st	Z, r24
 780:	85 ed       	ldi	r24, 0xD5	; 213
 782:	80 83       	st	Z, r24
 784:	80 e8       	ldi	r24, 0x80	; 128
 786:	80 83       	st	Z, r24
 788:	81 e8       	ldi	r24, 0x81	; 129
 78a:	80 83       	st	Z, r24
 78c:	80 e5       	ldi	r24, 0x50	; 80
 78e:	80 83       	st	Z, r24
 790:	89 ed       	ldi	r24, 0xD9	; 217
 792:	80 83       	st	Z, r24
 794:	81 e2       	ldi	r24, 0x21	; 33
 796:	80 83       	st	Z, r24
 798:	80 e2       	ldi	r24, 0x20	; 32
 79a:	80 83       	st	Z, r24
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	80 83       	st	Z, r24
 7a0:	8b ed       	ldi	r24, 0xDB	; 219
 7a2:	80 83       	st	Z, r24
 7a4:	80 e3       	ldi	r24, 0x30	; 48
 7a6:	80 83       	st	Z, r24
 7a8:	8d ea       	ldi	r24, 0xAD	; 173
 7aa:	80 83       	st	Z, r24
 7ac:	10 82       	st	Z, r1
 7ae:	84 ea       	ldi	r24, 0xA4	; 164
 7b0:	80 83       	st	Z, r24
 7b2:	86 ea       	ldi	r24, 0xA6	; 166
 7b4:	80 83       	st	Z, r24
 7b6:	8f ea       	ldi	r24, 0xAF	; 175
 7b8:	80 83       	st	Z, r24
 7ba:	08 95       	ret

000007bc <oled_clear_page>:
		oled_clear_page(i);
	}
	//oled_init();
}
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
 7bc:	80 55       	subi	r24, 0x50	; 80

int coloumn_counter = 0;
int tall = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
 7be:	80 93 00 10 	sts	0x1000, r24
 7c2:	80 e8       	ldi	r24, 0x80	; 128
 7c4:	90 e0       	ldi	r25, 0x00	; 0
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
 7c6:	e0 e0       	ldi	r30, 0x00	; 0
 7c8:	f2 e1       	ldi	r31, 0x12	; 18
 7ca:	10 82       	st	Z, r1
 7cc:	01 97       	sbiw	r24, 0x01	; 1
	write_c(coloumn_start);
	write_c(coloumn_end);
}
void oled_clear_page(uint8_t page){
	oled_goto_page(page);
		for (int i = 0;i<128;i++){
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	e1 f7       	brne	.-8      	; 0x7ca <oled_clear_page+0xe>
			write_d(0x00);
		}
}
 7d2:	08 95       	ret

000007d4 <oled_reset>:
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
 7d4:	cf 93       	push	r28
 7d6:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i=0; i<8;i++){
		oled_clear_page(i);
 7d8:	8c 2f       	mov	r24, r28
 7da:	0e 94 de 03 	call	0x7bc	; 0x7bc <oled_clear_page>
 7de:	cf 5f       	subi	r28, 0xFF	; 255
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
	for (int i=0; i<8;i++){
 7e0:	c8 30       	cpi	r28, 0x08	; 8
 7e2:	d1 f7       	brne	.-12     	; 0x7d8 <oled_reset+0x4>
		oled_clear_page(i);
	}
	//oled_init();
}
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <oled_pos>:
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
 7e8:	80 55       	subi	r24, 0x50	; 80

int coloumn_counter = 0;
int tall = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
 7ea:	e0 e0       	ldi	r30, 0x00	; 0
 7ec:	f0 e1       	ldi	r31, 0x10	; 16
 7ee:	80 83       	st	Z, r24
 7f0:	81 e2       	ldi	r24, 0x21	; 33
 7f2:	80 83       	st	Z, r24
 7f4:	60 83       	st	Z, r22
 7f6:	40 83       	st	Z, r20
 7f8:	08 95       	ret

000007fa <oled_print_letter>:
		for (int i = 0;i<128;i++){
			write_d(0x00);
		}
}

void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
 7fa:	cf 93       	push	r28
 7fc:	c8 2f       	mov	r28, r24
 7fe:	86 2f       	mov	r24, r22
 800:	64 2f       	mov	r22, r20
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
 802:	42 2f       	mov	r20, r18
 804:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <oled_pos>
 808:	ec 2f       	mov	r30, r28
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	ee 0f       	add	r30, r30
 80e:	ff 1f       	adc	r31, r31
 810:	ee 0f       	add	r30, r30
 812:	ff 1f       	adc	r31, r31
 814:	ee 0f       	add	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	e0 59       	subi	r30, 0x90	; 144
 81a:	f0 40       	sbci	r31, 0x00	; 0
	int ltr;
	for (int i = 0;i<8;i++){
 81c:	80 e0       	ldi	r24, 0x00	; 0
 81e:	90 e0       	ldi	r25, 0x00	; 0
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
 820:	a0 e0       	ldi	r26, 0x00	; 0
 822:	b2 e1       	ldi	r27, 0x12	; 18
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
		ltr = pgm_read_byte(&(font8[letter-32][i]));
 824:	24 91       	lpm	r18, Z
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
 826:	2c 93       	st	X, r18
void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
 828:	01 96       	adiw	r24, 0x01	; 1
 82a:	31 96       	adiw	r30, 0x01	; 1
 82c:	88 30       	cpi	r24, 0x08	; 8
 82e:	91 05       	cpc	r25, r1
 830:	c9 f7       	brne	.-14     	; 0x824 <oled_print_letter+0x2a>
		ltr = pgm_read_byte(&(font8[letter-32][i]));
		write_d(ltr);
	}
	//printf("printet letter\n");
}
 832:	cf 91       	pop	r28
 834:	08 95       	ret

00000836 <oled_print>:
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}


void oled_print(char* word){
 836:	ef 92       	push	r14
 838:	ff 92       	push	r15
 83a:	0f 93       	push	r16
 83c:	1f 93       	push	r17
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
 842:	8c 01       	movw	r16, r24
	
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x02;	
	for (int i = 0; word[i] != '\0'; i++){
 844:	fc 01       	movw	r30, r24
 846:	80 81       	ld	r24, Z
 848:	88 23       	and	r24, r24
 84a:	01 f1       	breq	.+64     	; 0x88c <oled_print+0x56>
 84c:	c0 e0       	ldi	r28, 0x00	; 0
 84e:	d0 e0       	ldi	r29, 0x00	; 0

void oled_print(char* word){
	
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x02;	
 850:	68 94       	set
 852:	ee 24       	eor	r14, r14
 854:	e1 f8       	bld	r14, 1
}


void oled_print(char* word){
	
	uint8_t coloumn_start = 0x09;
 856:	0f 2e       	mov	r0, r31
 858:	f9 e0       	ldi	r31, 0x09	; 9
 85a:	ff 2e       	mov	r15, r31
 85c:	f0 2d       	mov	r31, r0
 85e:	28 e0       	ldi	r18, 0x08	; 8
 860:	2f 0d       	add	r18, r15
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x02;	
	for (int i = 0; word[i] != '\0'; i++){
		if(word[i] == 44){
 862:	8c 32       	cpi	r24, 0x2C	; 44
 864:	11 f4       	brne	.+4      	; 0x86a <oled_print+0x34>
			page +=0x01;
 866:	e3 94       	inc	r14
			//coloumn_start = 0x09;
			//coloumn_end = 0x11;
			i++;
 868:	21 96       	adiw	r28, 0x01	; 1
		}			
		oled_print_letter(word[i], page, coloumn_start,coloumn_end);
 86a:	f8 01       	movw	r30, r16
 86c:	ec 0f       	add	r30, r28
 86e:	fd 1f       	adc	r31, r29
 870:	4f 2d       	mov	r20, r15
 872:	6e 2d       	mov	r22, r14
 874:	80 81       	ld	r24, Z
 876:	0e 94 fd 03 	call	0x7fa	; 0x7fa <oled_print_letter>
		coloumn_start += 0x09;
 87a:	f9 e0       	ldi	r31, 0x09	; 9
 87c:	ff 0e       	add	r15, r31
void oled_print(char* word){
	
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x02;	
	for (int i = 0; word[i] != '\0'; i++){
 87e:	21 96       	adiw	r28, 0x01	; 1
 880:	f8 01       	movw	r30, r16
 882:	ec 0f       	add	r30, r28
 884:	fd 1f       	adc	r31, r29
 886:	80 81       	ld	r24, Z
 888:	81 11       	cpse	r24, r1
 88a:	e9 cf       	rjmp	.-46     	; 0x85e <oled_print+0x28>
		coloumn_end += 0x09;


	}
	
}
 88c:	df 91       	pop	r29
 88e:	cf 91       	pop	r28
 890:	1f 91       	pop	r17
 892:	0f 91       	pop	r16
 894:	ff 90       	pop	r15
 896:	ef 90       	pop	r14
 898:	08 95       	ret

0000089a <SPI_MasterInit>:

#include "SPI.h"

void SPI_MasterInit(void){
	/* Set MOSI,SCK and SS output, all others input */
	DDRB = (1<<DD_MOSI) | (1<<DD_SCK) | (1 << DD_SS) | (1 << PB0);
 89a:	81 eb       	ldi	r24, 0xB1	; 177
 89c:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
 89e:	81 e5       	ldi	r24, 0x51	; 81
 8a0:	8d b9       	out	0x0d, r24	; 13
 8a2:	08 95       	ret

000008a4 <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData){
	/* Start transmission */
	SPDR = cData;
 8a4:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while	(!(SPSR & (1<<SPIF)));
 8a6:	77 9b       	sbis	0x0e, 7	; 14
 8a8:	fe cf       	rjmp	.-4      	; 0x8a6 <SPI_MasterTransmit+0x2>
}
 8aa:	08 95       	ret

000008ac <SPI_MasterReceive>:

char SPI_MasterReceive(void){
	/* Send dummy data to read from slave */	
	SPI_MasterTransmit(0);
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	0e 94 52 04 	call	0x8a4	; 0x8a4 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	// while	(!(SPSR & (1<<SPIF)));
	
	/* Return data register */
	return	SPDR;
 8b2:	8f b1       	in	r24, 0x0f	; 15
 8b4:	08 95       	ret

000008b6 <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

// Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 8b6:	5d 9b       	sbis	0x0b, 5	; 11
 8b8:	fe cf       	rjmp	.-4      	; 0x8b6 <USART_Transmit>
  
//Put data into buffer, sends the data
	UDR0 = data;
 8ba:	8c b9       	out	0x0c, r24	; 12
 8bc:	08 95       	ret

000008be <USART_Receive>:
}

unsigned char USART_Receive( void ){

//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
 8be:	5f 9b       	sbis	0x0b, 7	; 11
 8c0:	fe cf       	rjmp	.-4      	; 0x8be <USART_Receive>
//Get and return received data from buffer
	return UDR0;
 8c2:	8c b1       	in	r24, 0x0c	; 12
}
 8c4:	08 95       	ret

000008c6 <EXT_MEM_Init>:
#include <avr/io.h>
#include "uart.h"
#include <stdlib.h>

void EXT_MEM_Init(void){
	set_bit(MCUCR,SRE);
 8c6:	85 b7       	in	r24, 0x35	; 53
 8c8:	80 68       	ori	r24, 0x80	; 128
 8ca:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
 8cc:	80 b7       	in	r24, 0x30	; 48
 8ce:	80 62       	ori	r24, 0x20	; 32
 8d0:	80 bf       	out	0x30, r24	; 48
 8d2:	08 95       	ret

000008d4 <USART_Init>:
	//set_bit(SFIOR,XMM0);
}
void USART_Init( unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
 8d4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
 8d6:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter	*/
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
 8d8:	88 e1       	ldi	r24, 0x18	; 24
 8da:	8a b9       	out	0x0a, r24	; 10
	fdevopen(USART_Transmit,USART_Receive);
 8dc:	6f e5       	ldi	r22, 0x5F	; 95
 8de:	74 e0       	ldi	r23, 0x04	; 4
 8e0:	8b e5       	ldi	r24, 0x5B	; 91
 8e2:	94 e0       	ldi	r25, 0x04	; 4
 8e4:	0e 94 9c 05 	call	0xb38	; 0xb38 <fdevopen>
 8e8:	08 95       	ret

000008ea <malloc>:
 8ea:	cf 93       	push	r28
 8ec:	df 93       	push	r29
 8ee:	82 30       	cpi	r24, 0x02	; 2
 8f0:	91 05       	cpc	r25, r1
 8f2:	10 f4       	brcc	.+4      	; 0x8f8 <malloc+0xe>
 8f4:	82 e0       	ldi	r24, 0x02	; 2
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	e0 91 5b 01 	lds	r30, 0x015B
 8fc:	f0 91 5c 01 	lds	r31, 0x015C
 900:	20 e0       	ldi	r18, 0x00	; 0
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	a0 e0       	ldi	r26, 0x00	; 0
 906:	b0 e0       	ldi	r27, 0x00	; 0
 908:	30 97       	sbiw	r30, 0x00	; 0
 90a:	39 f1       	breq	.+78     	; 0x95a <malloc+0x70>
 90c:	40 81       	ld	r20, Z
 90e:	51 81       	ldd	r21, Z+1	; 0x01
 910:	48 17       	cp	r20, r24
 912:	59 07       	cpc	r21, r25
 914:	b8 f0       	brcs	.+46     	; 0x944 <malloc+0x5a>
 916:	48 17       	cp	r20, r24
 918:	59 07       	cpc	r21, r25
 91a:	71 f4       	brne	.+28     	; 0x938 <malloc+0x4e>
 91c:	82 81       	ldd	r24, Z+2	; 0x02
 91e:	93 81       	ldd	r25, Z+3	; 0x03
 920:	10 97       	sbiw	r26, 0x00	; 0
 922:	29 f0       	breq	.+10     	; 0x92e <malloc+0x44>
 924:	13 96       	adiw	r26, 0x03	; 3
 926:	9c 93       	st	X, r25
 928:	8e 93       	st	-X, r24
 92a:	12 97       	sbiw	r26, 0x02	; 2
 92c:	2c c0       	rjmp	.+88     	; 0x986 <malloc+0x9c>
 92e:	90 93 5c 01 	sts	0x015C, r25
 932:	80 93 5b 01 	sts	0x015B, r24
 936:	27 c0       	rjmp	.+78     	; 0x986 <malloc+0x9c>
 938:	21 15       	cp	r18, r1
 93a:	31 05       	cpc	r19, r1
 93c:	31 f0       	breq	.+12     	; 0x94a <malloc+0x60>
 93e:	42 17       	cp	r20, r18
 940:	53 07       	cpc	r21, r19
 942:	18 f0       	brcs	.+6      	; 0x94a <malloc+0x60>
 944:	a9 01       	movw	r20, r18
 946:	db 01       	movw	r26, r22
 948:	01 c0       	rjmp	.+2      	; 0x94c <malloc+0x62>
 94a:	ef 01       	movw	r28, r30
 94c:	9a 01       	movw	r18, r20
 94e:	bd 01       	movw	r22, r26
 950:	df 01       	movw	r26, r30
 952:	02 80       	ldd	r0, Z+2	; 0x02
 954:	f3 81       	ldd	r31, Z+3	; 0x03
 956:	e0 2d       	mov	r30, r0
 958:	d7 cf       	rjmp	.-82     	; 0x908 <malloc+0x1e>
 95a:	21 15       	cp	r18, r1
 95c:	31 05       	cpc	r19, r1
 95e:	f9 f0       	breq	.+62     	; 0x99e <malloc+0xb4>
 960:	28 1b       	sub	r18, r24
 962:	39 0b       	sbc	r19, r25
 964:	24 30       	cpi	r18, 0x04	; 4
 966:	31 05       	cpc	r19, r1
 968:	80 f4       	brcc	.+32     	; 0x98a <malloc+0xa0>
 96a:	8a 81       	ldd	r24, Y+2	; 0x02
 96c:	9b 81       	ldd	r25, Y+3	; 0x03
 96e:	61 15       	cp	r22, r1
 970:	71 05       	cpc	r23, r1
 972:	21 f0       	breq	.+8      	; 0x97c <malloc+0x92>
 974:	fb 01       	movw	r30, r22
 976:	93 83       	std	Z+3, r25	; 0x03
 978:	82 83       	std	Z+2, r24	; 0x02
 97a:	04 c0       	rjmp	.+8      	; 0x984 <malloc+0x9a>
 97c:	90 93 5c 01 	sts	0x015C, r25
 980:	80 93 5b 01 	sts	0x015B, r24
 984:	fe 01       	movw	r30, r28
 986:	32 96       	adiw	r30, 0x02	; 2
 988:	44 c0       	rjmp	.+136    	; 0xa12 <malloc+0x128>
 98a:	fe 01       	movw	r30, r28
 98c:	e2 0f       	add	r30, r18
 98e:	f3 1f       	adc	r31, r19
 990:	81 93       	st	Z+, r24
 992:	91 93       	st	Z+, r25
 994:	22 50       	subi	r18, 0x02	; 2
 996:	31 09       	sbc	r19, r1
 998:	39 83       	std	Y+1, r19	; 0x01
 99a:	28 83       	st	Y, r18
 99c:	3a c0       	rjmp	.+116    	; 0xa12 <malloc+0x128>
 99e:	20 91 59 01 	lds	r18, 0x0159
 9a2:	30 91 5a 01 	lds	r19, 0x015A
 9a6:	23 2b       	or	r18, r19
 9a8:	41 f4       	brne	.+16     	; 0x9ba <malloc+0xd0>
 9aa:	20 91 02 01 	lds	r18, 0x0102
 9ae:	30 91 03 01 	lds	r19, 0x0103
 9b2:	30 93 5a 01 	sts	0x015A, r19
 9b6:	20 93 59 01 	sts	0x0159, r18
 9ba:	20 91 00 01 	lds	r18, 0x0100
 9be:	30 91 01 01 	lds	r19, 0x0101
 9c2:	21 15       	cp	r18, r1
 9c4:	31 05       	cpc	r19, r1
 9c6:	41 f4       	brne	.+16     	; 0x9d8 <malloc+0xee>
 9c8:	2d b7       	in	r18, 0x3d	; 61
 9ca:	3e b7       	in	r19, 0x3e	; 62
 9cc:	40 91 04 01 	lds	r20, 0x0104
 9d0:	50 91 05 01 	lds	r21, 0x0105
 9d4:	24 1b       	sub	r18, r20
 9d6:	35 0b       	sbc	r19, r21
 9d8:	e0 91 59 01 	lds	r30, 0x0159
 9dc:	f0 91 5a 01 	lds	r31, 0x015A
 9e0:	e2 17       	cp	r30, r18
 9e2:	f3 07       	cpc	r31, r19
 9e4:	a0 f4       	brcc	.+40     	; 0xa0e <malloc+0x124>
 9e6:	2e 1b       	sub	r18, r30
 9e8:	3f 0b       	sbc	r19, r31
 9ea:	28 17       	cp	r18, r24
 9ec:	39 07       	cpc	r19, r25
 9ee:	78 f0       	brcs	.+30     	; 0xa0e <malloc+0x124>
 9f0:	ac 01       	movw	r20, r24
 9f2:	4e 5f       	subi	r20, 0xFE	; 254
 9f4:	5f 4f       	sbci	r21, 0xFF	; 255
 9f6:	24 17       	cp	r18, r20
 9f8:	35 07       	cpc	r19, r21
 9fa:	48 f0       	brcs	.+18     	; 0xa0e <malloc+0x124>
 9fc:	4e 0f       	add	r20, r30
 9fe:	5f 1f       	adc	r21, r31
 a00:	50 93 5a 01 	sts	0x015A, r21
 a04:	40 93 59 01 	sts	0x0159, r20
 a08:	81 93       	st	Z+, r24
 a0a:	91 93       	st	Z+, r25
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <malloc+0x128>
 a0e:	e0 e0       	ldi	r30, 0x00	; 0
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	cf 01       	movw	r24, r30
 a14:	df 91       	pop	r29
 a16:	cf 91       	pop	r28
 a18:	08 95       	ret

00000a1a <free>:
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	00 97       	sbiw	r24, 0x00	; 0
 a20:	09 f4       	brne	.+2      	; 0xa24 <free+0xa>
 a22:	87 c0       	rjmp	.+270    	; 0xb32 <free+0x118>
 a24:	fc 01       	movw	r30, r24
 a26:	32 97       	sbiw	r30, 0x02	; 2
 a28:	13 82       	std	Z+3, r1	; 0x03
 a2a:	12 82       	std	Z+2, r1	; 0x02
 a2c:	c0 91 5b 01 	lds	r28, 0x015B
 a30:	d0 91 5c 01 	lds	r29, 0x015C
 a34:	20 97       	sbiw	r28, 0x00	; 0
 a36:	81 f4       	brne	.+32     	; 0xa58 <free+0x3e>
 a38:	20 81       	ld	r18, Z
 a3a:	31 81       	ldd	r19, Z+1	; 0x01
 a3c:	28 0f       	add	r18, r24
 a3e:	39 1f       	adc	r19, r25
 a40:	80 91 59 01 	lds	r24, 0x0159
 a44:	90 91 5a 01 	lds	r25, 0x015A
 a48:	82 17       	cp	r24, r18
 a4a:	93 07       	cpc	r25, r19
 a4c:	79 f5       	brne	.+94     	; 0xaac <free+0x92>
 a4e:	f0 93 5a 01 	sts	0x015A, r31
 a52:	e0 93 59 01 	sts	0x0159, r30
 a56:	6d c0       	rjmp	.+218    	; 0xb32 <free+0x118>
 a58:	de 01       	movw	r26, r28
 a5a:	20 e0       	ldi	r18, 0x00	; 0
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	ae 17       	cp	r26, r30
 a60:	bf 07       	cpc	r27, r31
 a62:	50 f4       	brcc	.+20     	; 0xa78 <free+0x5e>
 a64:	12 96       	adiw	r26, 0x02	; 2
 a66:	4d 91       	ld	r20, X+
 a68:	5c 91       	ld	r21, X
 a6a:	13 97       	sbiw	r26, 0x03	; 3
 a6c:	9d 01       	movw	r18, r26
 a6e:	41 15       	cp	r20, r1
 a70:	51 05       	cpc	r21, r1
 a72:	09 f1       	breq	.+66     	; 0xab6 <free+0x9c>
 a74:	da 01       	movw	r26, r20
 a76:	f3 cf       	rjmp	.-26     	; 0xa5e <free+0x44>
 a78:	b3 83       	std	Z+3, r27	; 0x03
 a7a:	a2 83       	std	Z+2, r26	; 0x02
 a7c:	40 81       	ld	r20, Z
 a7e:	51 81       	ldd	r21, Z+1	; 0x01
 a80:	84 0f       	add	r24, r20
 a82:	95 1f       	adc	r25, r21
 a84:	8a 17       	cp	r24, r26
 a86:	9b 07       	cpc	r25, r27
 a88:	71 f4       	brne	.+28     	; 0xaa6 <free+0x8c>
 a8a:	8d 91       	ld	r24, X+
 a8c:	9c 91       	ld	r25, X
 a8e:	11 97       	sbiw	r26, 0x01	; 1
 a90:	84 0f       	add	r24, r20
 a92:	95 1f       	adc	r25, r21
 a94:	02 96       	adiw	r24, 0x02	; 2
 a96:	91 83       	std	Z+1, r25	; 0x01
 a98:	80 83       	st	Z, r24
 a9a:	12 96       	adiw	r26, 0x02	; 2
 a9c:	8d 91       	ld	r24, X+
 a9e:	9c 91       	ld	r25, X
 aa0:	13 97       	sbiw	r26, 0x03	; 3
 aa2:	93 83       	std	Z+3, r25	; 0x03
 aa4:	82 83       	std	Z+2, r24	; 0x02
 aa6:	21 15       	cp	r18, r1
 aa8:	31 05       	cpc	r19, r1
 aaa:	29 f4       	brne	.+10     	; 0xab6 <free+0x9c>
 aac:	f0 93 5c 01 	sts	0x015C, r31
 ab0:	e0 93 5b 01 	sts	0x015B, r30
 ab4:	3e c0       	rjmp	.+124    	; 0xb32 <free+0x118>
 ab6:	d9 01       	movw	r26, r18
 ab8:	13 96       	adiw	r26, 0x03	; 3
 aba:	fc 93       	st	X, r31
 abc:	ee 93       	st	-X, r30
 abe:	12 97       	sbiw	r26, 0x02	; 2
 ac0:	4d 91       	ld	r20, X+
 ac2:	5d 91       	ld	r21, X+
 ac4:	a4 0f       	add	r26, r20
 ac6:	b5 1f       	adc	r27, r21
 ac8:	ea 17       	cp	r30, r26
 aca:	fb 07       	cpc	r31, r27
 acc:	79 f4       	brne	.+30     	; 0xaec <free+0xd2>
 ace:	80 81       	ld	r24, Z
 ad0:	91 81       	ldd	r25, Z+1	; 0x01
 ad2:	84 0f       	add	r24, r20
 ad4:	95 1f       	adc	r25, r21
 ad6:	02 96       	adiw	r24, 0x02	; 2
 ad8:	d9 01       	movw	r26, r18
 ada:	11 96       	adiw	r26, 0x01	; 1
 adc:	9c 93       	st	X, r25
 ade:	8e 93       	st	-X, r24
 ae0:	82 81       	ldd	r24, Z+2	; 0x02
 ae2:	93 81       	ldd	r25, Z+3	; 0x03
 ae4:	13 96       	adiw	r26, 0x03	; 3
 ae6:	9c 93       	st	X, r25
 ae8:	8e 93       	st	-X, r24
 aea:	12 97       	sbiw	r26, 0x02	; 2
 aec:	e0 e0       	ldi	r30, 0x00	; 0
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	8a 81       	ldd	r24, Y+2	; 0x02
 af2:	9b 81       	ldd	r25, Y+3	; 0x03
 af4:	00 97       	sbiw	r24, 0x00	; 0
 af6:	19 f0       	breq	.+6      	; 0xafe <free+0xe4>
 af8:	fe 01       	movw	r30, r28
 afa:	ec 01       	movw	r28, r24
 afc:	f9 cf       	rjmp	.-14     	; 0xaf0 <free+0xd6>
 afe:	ce 01       	movw	r24, r28
 b00:	02 96       	adiw	r24, 0x02	; 2
 b02:	28 81       	ld	r18, Y
 b04:	39 81       	ldd	r19, Y+1	; 0x01
 b06:	82 0f       	add	r24, r18
 b08:	93 1f       	adc	r25, r19
 b0a:	20 91 59 01 	lds	r18, 0x0159
 b0e:	30 91 5a 01 	lds	r19, 0x015A
 b12:	28 17       	cp	r18, r24
 b14:	39 07       	cpc	r19, r25
 b16:	69 f4       	brne	.+26     	; 0xb32 <free+0x118>
 b18:	30 97       	sbiw	r30, 0x00	; 0
 b1a:	29 f4       	brne	.+10     	; 0xb26 <free+0x10c>
 b1c:	10 92 5c 01 	sts	0x015C, r1
 b20:	10 92 5b 01 	sts	0x015B, r1
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <free+0x110>
 b26:	13 82       	std	Z+3, r1	; 0x03
 b28:	12 82       	std	Z+2, r1	; 0x02
 b2a:	d0 93 5a 01 	sts	0x015A, r29
 b2e:	c0 93 59 01 	sts	0x0159, r28
 b32:	df 91       	pop	r29
 b34:	cf 91       	pop	r28
 b36:	08 95       	ret

00000b38 <fdevopen>:
 b38:	0f 93       	push	r16
 b3a:	1f 93       	push	r17
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	ec 01       	movw	r28, r24
 b42:	8b 01       	movw	r16, r22
 b44:	00 97       	sbiw	r24, 0x00	; 0
 b46:	31 f4       	brne	.+12     	; 0xb54 <fdevopen+0x1c>
 b48:	61 15       	cp	r22, r1
 b4a:	71 05       	cpc	r23, r1
 b4c:	19 f4       	brne	.+6      	; 0xb54 <fdevopen+0x1c>
 b4e:	80 e0       	ldi	r24, 0x00	; 0
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	38 c0       	rjmp	.+112    	; 0xbc4 <fdevopen+0x8c>
 b54:	6e e0       	ldi	r22, 0x0E	; 14
 b56:	70 e0       	ldi	r23, 0x00	; 0
 b58:	81 e0       	ldi	r24, 0x01	; 1
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	0e 94 14 06 	call	0xc28	; 0xc28 <calloc>
 b60:	fc 01       	movw	r30, r24
 b62:	00 97       	sbiw	r24, 0x00	; 0
 b64:	a1 f3       	breq	.-24     	; 0xb4e <fdevopen+0x16>
 b66:	80 e8       	ldi	r24, 0x80	; 128
 b68:	83 83       	std	Z+3, r24	; 0x03
 b6a:	01 15       	cp	r16, r1
 b6c:	11 05       	cpc	r17, r1
 b6e:	71 f0       	breq	.+28     	; 0xb8c <fdevopen+0x54>
 b70:	13 87       	std	Z+11, r17	; 0x0b
 b72:	02 87       	std	Z+10, r16	; 0x0a
 b74:	81 e8       	ldi	r24, 0x81	; 129
 b76:	83 83       	std	Z+3, r24	; 0x03
 b78:	80 91 5d 01 	lds	r24, 0x015D
 b7c:	90 91 5e 01 	lds	r25, 0x015E
 b80:	89 2b       	or	r24, r25
 b82:	21 f4       	brne	.+8      	; 0xb8c <fdevopen+0x54>
 b84:	f0 93 5e 01 	sts	0x015E, r31
 b88:	e0 93 5d 01 	sts	0x015D, r30
 b8c:	20 97       	sbiw	r28, 0x00	; 0
 b8e:	c9 f0       	breq	.+50     	; 0xbc2 <fdevopen+0x8a>
 b90:	d1 87       	std	Z+9, r29	; 0x09
 b92:	c0 87       	std	Z+8, r28	; 0x08
 b94:	83 81       	ldd	r24, Z+3	; 0x03
 b96:	82 60       	ori	r24, 0x02	; 2
 b98:	83 83       	std	Z+3, r24	; 0x03
 b9a:	80 91 5f 01 	lds	r24, 0x015F
 b9e:	90 91 60 01 	lds	r25, 0x0160
 ba2:	89 2b       	or	r24, r25
 ba4:	71 f4       	brne	.+28     	; 0xbc2 <fdevopen+0x8a>
 ba6:	f0 93 60 01 	sts	0x0160, r31
 baa:	e0 93 5f 01 	sts	0x015F, r30
 bae:	80 91 61 01 	lds	r24, 0x0161
 bb2:	90 91 62 01 	lds	r25, 0x0162
 bb6:	89 2b       	or	r24, r25
 bb8:	21 f4       	brne	.+8      	; 0xbc2 <fdevopen+0x8a>
 bba:	f0 93 62 01 	sts	0x0162, r31
 bbe:	e0 93 61 01 	sts	0x0161, r30
 bc2:	cf 01       	movw	r24, r30
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	08 95       	ret

00000bce <puts>:
 bce:	0f 93       	push	r16
 bd0:	1f 93       	push	r17
 bd2:	cf 93       	push	r28
 bd4:	df 93       	push	r29
 bd6:	e0 91 5f 01 	lds	r30, 0x015F
 bda:	f0 91 60 01 	lds	r31, 0x0160
 bde:	23 81       	ldd	r18, Z+3	; 0x03
 be0:	21 ff       	sbrs	r18, 1
 be2:	1b c0       	rjmp	.+54     	; 0xc1a <puts+0x4c>
 be4:	ec 01       	movw	r28, r24
 be6:	00 e0       	ldi	r16, 0x00	; 0
 be8:	10 e0       	ldi	r17, 0x00	; 0
 bea:	89 91       	ld	r24, Y+
 bec:	60 91 5f 01 	lds	r22, 0x015F
 bf0:	70 91 60 01 	lds	r23, 0x0160
 bf4:	db 01       	movw	r26, r22
 bf6:	18 96       	adiw	r26, 0x08	; 8
 bf8:	ed 91       	ld	r30, X+
 bfa:	fc 91       	ld	r31, X
 bfc:	19 97       	sbiw	r26, 0x09	; 9
 bfe:	88 23       	and	r24, r24
 c00:	31 f0       	breq	.+12     	; 0xc0e <puts+0x40>
 c02:	09 95       	icall
 c04:	89 2b       	or	r24, r25
 c06:	89 f3       	breq	.-30     	; 0xbea <puts+0x1c>
 c08:	0f ef       	ldi	r16, 0xFF	; 255
 c0a:	1f ef       	ldi	r17, 0xFF	; 255
 c0c:	ee cf       	rjmp	.-36     	; 0xbea <puts+0x1c>
 c0e:	8a e0       	ldi	r24, 0x0A	; 10
 c10:	09 95       	icall
 c12:	89 2b       	or	r24, r25
 c14:	11 f4       	brne	.+4      	; 0xc1a <puts+0x4c>
 c16:	c8 01       	movw	r24, r16
 c18:	02 c0       	rjmp	.+4      	; 0xc1e <puts+0x50>
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	9f ef       	ldi	r25, 0xFF	; 255
 c1e:	df 91       	pop	r29
 c20:	cf 91       	pop	r28
 c22:	1f 91       	pop	r17
 c24:	0f 91       	pop	r16
 c26:	08 95       	ret

00000c28 <calloc>:
 c28:	0f 93       	push	r16
 c2a:	1f 93       	push	r17
 c2c:	cf 93       	push	r28
 c2e:	df 93       	push	r29
 c30:	86 9f       	mul	r24, r22
 c32:	80 01       	movw	r16, r0
 c34:	87 9f       	mul	r24, r23
 c36:	10 0d       	add	r17, r0
 c38:	96 9f       	mul	r25, r22
 c3a:	10 0d       	add	r17, r0
 c3c:	11 24       	eor	r1, r1
 c3e:	c8 01       	movw	r24, r16
 c40:	0e 94 75 04 	call	0x8ea	; 0x8ea <malloc>
 c44:	ec 01       	movw	r28, r24
 c46:	00 97       	sbiw	r24, 0x00	; 0
 c48:	29 f0       	breq	.+10     	; 0xc54 <calloc+0x2c>
 c4a:	a8 01       	movw	r20, r16
 c4c:	60 e0       	ldi	r22, 0x00	; 0
 c4e:	70 e0       	ldi	r23, 0x00	; 0
 c50:	0e 94 30 06 	call	0xc60	; 0xc60 <memset>
 c54:	ce 01       	movw	r24, r28
 c56:	df 91       	pop	r29
 c58:	cf 91       	pop	r28
 c5a:	1f 91       	pop	r17
 c5c:	0f 91       	pop	r16
 c5e:	08 95       	ret

00000c60 <memset>:
 c60:	dc 01       	movw	r26, r24
 c62:	01 c0       	rjmp	.+2      	; 0xc66 <memset+0x6>
 c64:	6d 93       	st	X+, r22
 c66:	41 50       	subi	r20, 0x01	; 1
 c68:	50 40       	sbci	r21, 0x00	; 0
 c6a:	e0 f7       	brcc	.-8      	; 0xc64 <memset+0x4>
 c6c:	08 95       	ret

00000c6e <_exit>:
 c6e:	f8 94       	cli

00000c70 <__stop_program>:
 c70:	ff cf       	rjmp	.-2      	; 0xc70 <__stop_program>
