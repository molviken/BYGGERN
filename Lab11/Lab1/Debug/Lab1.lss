
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00001220  000012b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800176  00800176  0000132a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002362  00000000  00000000  000015be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d4a  00000000  00000000  00003920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c25  00000000  00000000  0000466a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000056c  00000000  00000000  00005290  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000063b  00000000  00000000  000057fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010db  00000000  00000000  00005e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  00006f12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <vfprintf+0x118>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e2       	ldi	r30, 0x20	; 32
     37c:	f2 e1       	ldi	r31, 0x12	; 18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 37       	cpi	r26, 0x76	; 118
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	a6 e7       	ldi	r26, 0x76	; 118
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 38       	cpi	r26, 0x86	; 134
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <main>
     39e:	0c 94 0e 09 	jmp	0x121c	; 0x121c <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
#include <string.h>
#include "uart.h"
#include <avr/io.h>
#include <util/delay.h>
void adc_init(void){
	set_bit(MCUCR,SRE);
     3a6:	85 b7       	in	r24, 0x35	; 53
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
     3ac:	80 b7       	in	r24, 0x30	; 48
     3ae:	80 62       	ori	r24, 0x20	; 32
     3b0:	80 bf       	out	0x30, r24	; 48
	clear_bit(DDRE,DDE0);
     3b2:	30 98       	cbi	0x06, 0	; 6
     3b4:	08 95       	ret

000003b6 <adc_read>:
}

uint8_t adc_read(uint8_t channel){
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	1f 92       	push	r1
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
	
	volatile char* adc_adr = (char *) 0x1400;
	adc_adr[0] = channel;
     3c0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c4:	92 e4       	ldi	r25, 0x42	; 66
     3c6:	9a 95       	dec	r25
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <adc_read+0x10>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <adc_read+0x16>
	_delay_us(200);
	volatile uint8_t retreived_value = adc_adr[channel];
     3cc:	e8 2f       	mov	r30, r24
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	fc 5e       	subi	r31, 0xEC	; 236
     3d2:	80 81       	ld	r24, Z
     3d4:	89 83       	std	Y+1, r24	; 0x01
	return retreived_value;
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <CAN_init>:
#include "MCPkontroll.h"

uint8_t rx_flag = 0;

void CAN_init(){
	MCP_init();
     3e0:	0e 94 9f 03 	call	0x73e	; 0x73e <MCP_init>
	// Turn mask/filters off
	MCP_bit_mod(MCP_RXB0CTRL, 0b01100100, 0xFF);
     3e4:	4f ef       	ldi	r20, 0xFF	; 255
     3e6:	64 e6       	ldi	r22, 0x64	; 100
     3e8:	80 e6       	ldi	r24, 0x60	; 96
     3ea:	0e 94 6e 03 	call	0x6dc	; 0x6dc <MCP_bit_mod>
	
	// Set LoopBack mode on
	MCP_bit_mod(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); // MCP_CANCTRL = MODE_LOOPBACK;
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	60 ee       	ldi	r22, 0xE0	; 224
     3f2:	8f e0       	ldi	r24, 0x0F	; 15
     3f4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <MCP_bit_mod>
	
	// Enable interrupt when a valid message has been received
	MCP_bit_mod(MCP_CANINTE, MCP_RX0IF, 1);
     3f8:	41 e0       	ldi	r20, 0x01	; 1
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	8b e2       	ldi	r24, 0x2B	; 43
     3fe:	0e 94 6e 03 	call	0x6dc	; 0x6dc <MCP_bit_mod>
	MCP_bit_mod(MCP_CANINTE, MCP_TX0IF, 1);
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	64 e0       	ldi	r22, 0x04	; 4
     406:	8b e2       	ldi	r24, 0x2B	; 43
     408:	0e 94 6e 03 	call	0x6dc	; 0x6dc <MCP_bit_mod>
	if ((MCP_read(MCP_CANSTAT) & MODE_MASK) != MODE_NORMAL)
     40c:	8e e0       	ldi	r24, 0x0E	; 14
     40e:	0e 94 49 03 	call	0x692	; 0x692 <MCP_read>
     412:	80 7e       	andi	r24, 0xE0	; 224
     414:	21 f0       	breq	.+8      	; 0x41e <CAN_init+0x3e>
	{
		printf("NOT in NORMAL mode!\n");
     416:	86 e0       	ldi	r24, 0x06	; 6
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <puts>
	}
	
	char temp = MCP_read(MCP_CANCTRL);
     41e:	8f e0       	ldi	r24, 0x0F	; 15
     420:	0e 94 49 03 	call	0x692	; 0x692 <MCP_read>
     424:	08 95       	ret

00000426 <CAN_check_error>:
	}
	return 0;
}

int CAN_check_error(void){
	uint8_t error = MCP_read(MCP_TXB0CTRL);
     426:	80 e3       	ldi	r24, 0x30	; 48
     428:	0e 94 49 03 	call	0x692	; 0x692 <MCP_read>
	// Checking transmission error
	if(test_bit(error,4)){return -1;}
     42c:	84 fd       	sbrc	r24, 4
     42e:	05 c0       	rjmp	.+10     	; 0x43a <CAN_check_error+0x14>
		
	// checking for message lost arbitration
	if(test_bit(error,5)){return -2;}
     430:	85 ff       	sbrs	r24, 5
     432:	06 c0       	rjmp	.+12     	; 0x440 <CAN_check_error+0x1a>
     434:	8e ef       	ldi	r24, 0xFE	; 254
     436:	9f ef       	ldi	r25, 0xFF	; 255
     438:	08 95       	ret
}

int CAN_check_error(void){
	uint8_t error = MCP_read(MCP_TXB0CTRL);
	// Checking transmission error
	if(test_bit(error,4)){return -1;}
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	9f ef       	ldi	r25, 0xFF	; 255
     43e:	08 95       	ret
		
	// checking for message lost arbitration
	if(test_bit(error,5)){return -2;}
	else{return 1;}
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
}
     444:	08 95       	ret

00000446 <CAN_completed_transmit>:

int CAN_completed_transmit(void){
	if (test_bit(MCP_read(MCP_TXB0CTRL),3)){
     446:	80 e3       	ldi	r24, 0x30	; 48
     448:	0e 94 49 03 	call	0x692	; 0x692 <MCP_read>
     44c:	86 95       	lsr	r24
     44e:	86 95       	lsr	r24
     450:	86 95       	lsr	r24
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	89 27       	eor	r24, r25
	}
	else{
		return 1;
	}
	
}
     456:	81 70       	andi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	08 95       	ret

0000045c <CAN_transmit>:
	
	char temp = MCP_read(MCP_CANCTRL);
	
}

int CAN_transmit(struct CAN_message message){
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	2a 97       	sbiw	r28, 0x0a	; 10
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	09 83       	std	Y+1, r16	; 0x01
     47a:	e1 2e       	mov	r14, r17
     47c:	1a 83       	std	Y+2, r17	; 0x02
     47e:	2b 83       	std	Y+3, r18	; 0x03
     480:	3c 83       	std	Y+4, r19	; 0x04
     482:	4d 83       	std	Y+5, r20	; 0x05
     484:	5e 83       	std	Y+6, r21	; 0x06
     486:	6f 83       	std	Y+7, r22	; 0x07
     488:	78 87       	std	Y+8, r23	; 0x08
     48a:	89 87       	std	Y+9, r24	; 0x09
     48c:	9a 87       	std	Y+10, r25	; 0x0a
	// Setting the standard identifier
	MCP_write(message.id >> 3, MCP_TXB0SIDH);
     48e:	61 e3       	ldi	r22, 0x31	; 49
     490:	80 2f       	mov	r24, r16
     492:	86 95       	lsr	r24
     494:	86 95       	lsr	r24
     496:	86 95       	lsr	r24
     498:	0e 94 32 03 	call	0x664	; 0x664 <MCP_write>
	MCP_write(message.id << 5, MCP_TXB0SIDL);
     49c:	62 e3       	ldi	r22, 0x32	; 50
     49e:	80 2f       	mov	r24, r16
     4a0:	82 95       	swap	r24
     4a2:	88 0f       	add	r24, r24
     4a4:	80 7e       	andi	r24, 0xE0	; 224
     4a6:	0e 94 32 03 	call	0x664	; 0x664 <MCP_write>
	
	// setting data length
	MCP_write((0x0F) & message.length, MCP_TXB0DLC);
     4aa:	65 e3       	ldi	r22, 0x35	; 53
     4ac:	81 2f       	mov	r24, r17
     4ae:	8f 70       	andi	r24, 0x0F	; 15
     4b0:	0e 94 32 03 	call	0x664	; 0x664 <MCP_write>
	
	// setting data bytes
	for (uint8_t i = 0x00; i< message.length; i++){
     4b4:	11 23       	and	r17, r17
     4b6:	91 f0       	breq	.+36     	; 0x4dc <CAN_transmit+0x80>
     4b8:	8e 01       	movw	r16, r28
     4ba:	0d 5f       	subi	r16, 0xFD	; 253
     4bc:	1f 4f       	sbci	r17, 0xFF	; 255
     4be:	86 e3       	ldi	r24, 0x36	; 54
     4c0:	e8 0e       	add	r14, r24
     4c2:	0f 2e       	mov	r0, r31
     4c4:	f6 e3       	ldi	r31, 0x36	; 54
     4c6:	ff 2e       	mov	r15, r31
     4c8:	f0 2d       	mov	r31, r0
	MCP_write(message.data[i], MCP_TXB0D0+i);
     4ca:	6f 2d       	mov	r22, r15
     4cc:	f8 01       	movw	r30, r16
     4ce:	81 91       	ld	r24, Z+
     4d0:	8f 01       	movw	r16, r30
     4d2:	0e 94 32 03 	call	0x664	; 0x664 <MCP_write>
     4d6:	f3 94       	inc	r15
	
	// setting data length
	MCP_write((0x0F) & message.length, MCP_TXB0DLC);
	
	// setting data bytes
	for (uint8_t i = 0x00; i< message.length; i++){
     4d8:	fe 10       	cpse	r15, r14
     4da:	f7 cf       	rjmp	.-18     	; 0x4ca <CAN_transmit+0x6e>
	MCP_write(message.data[i], MCP_TXB0D0+i);
	}
	MCP_rts(1);
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 5d 03 	call	0x6ba	; 0x6ba <MCP_rts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e2:	89 ef       	ldi	r24, 0xF9	; 249
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <CAN_transmit+0x8a>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <CAN_transmit+0x90>
     4ec:	00 00       	nop
	_delay_ms(1);
	
	if(!CAN_completed_transmit()){
     4ee:	0e 94 23 02 	call	0x446	; 0x446 <CAN_completed_transmit>
     4f2:	89 2b       	or	r24, r25
     4f4:	19 f4       	brne	.+6      	; 0x4fc <CAN_transmit+0xa0>
		//printf("Transmit not completed, bit = %i \n",test_bit(MCP_TXB0CTRL,3 ) );
		return CAN_check_error();
     4f6:	0e 94 13 02 	call	0x426	; 0x426 <CAN_check_error>
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__stack+0x1>
	}
	return 0;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
}
     500:	2a 96       	adiw	r28, 0x0a	; 10
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	08 95       	ret

0000051a <CAN_int_vect>:
	
}

void CAN_int_vect(void){
	// clear interrupt flag in buffer 0
	MCP_bit_mod(MCP_CANINTF, 0x01, 0);
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	8c e2       	ldi	r24, 0x2C	; 44
     520:	0e 94 6e 03 	call	0x6dc	; 0x6dc <MCP_bit_mod>
	rx_flag = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	80 93 76 01 	sts	0x0176, r24
     52a:	08 95       	ret

0000052c <__vector_1>:
	}
	return new_message;
}

// Interrupt service
ISR(INT0_vect){
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	2f 93       	push	r18
     538:	3f 93       	push	r19
     53a:	4f 93       	push	r20
     53c:	5f 93       	push	r21
     53e:	6f 93       	push	r22
     540:	7f 93       	push	r23
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	af 93       	push	r26
     548:	bf 93       	push	r27
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
     54e:	83 ec       	ldi	r24, 0xC3	; 195
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <__vector_1+0x26>
     556:	00 c0       	rjmp	.+0      	; 0x558 <__vector_1+0x2c>
     558:	00 00       	nop
	_delay_ms(10);
	CAN_int_vect();
     55a:	0e 94 8d 02 	call	0x51a	; 0x51a <CAN_int_vect>
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <read_joystick_position>:
#define loop_until_bit_is_clear( reg, bit ) while( test_bit( reg, bit ) )
#include "joystick.h"
#include "adc.h"
#include <stdbool.h>
struct Menu_position pos;
struct Joystick read_joystick_position(uint8_t channel_one, uint8_t channel_two){
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	d8 2f       	mov	r29, r24
     586:	86 2f       	mov	r24, r22
	int x_pos = (adc_read(channel_two));//-134)*0.8264462809917355;
     588:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     58c:	c8 2f       	mov	r28, r24
	int y_pos = (adc_read(channel_one));//-133)*0.819672131147541;
     58e:	8d 2f       	mov	r24, r29
     590:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     594:	28 2f       	mov	r18, r24
	struct Joystick global_joystick;
	global_joystick.x_pos = x_pos;
	global_joystick.y_pos = y_pos;
	//printf("X: %i, Y: %i \n", x_pos,y_pos);

	return global_joystick;
     596:	6c 2f       	mov	r22, r28
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	82 2f       	mov	r24, r18
     59c:	90 e0       	ldi	r25, 0x00	; 0
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <main>:

volatile char* oled_adresse = 0x1200;
volatile char* adc_adresse = 0x1400;
volatile char* ram_adresse = 0x1800;
int main(void)
{
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	2a 97       	sbiw	r28, 0x0a	; 10
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	de bf       	out	0x3e, r29	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	cd bf       	out	0x3d, r28	; 61
	EXT_MEM_Init();
     5b8:	0e 94 6f 04 	call	0x8de	; 0x8de <EXT_MEM_Init>
	USART_Init(31);
     5bc:	8f e1       	ldi	r24, 0x1F	; 31
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <USART_Init>
	oled_init();
     5c4:	0e 94 a4 03 	call	0x748	; 0x748 <oled_init>
	oled_reset();
     5c8:	0e 94 de 03 	call	0x7bc	; 0x7bc <oled_reset>
	adc_init();
     5cc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	initialize_menu();
     5d0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <initialize_menu>
	DDRB = 0b00000000;
     5d4:	17 ba       	out	0x17, r1	; 23
	CAN_init();
     5d6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <CAN_init>
	printf("Init er GOOD\n");
     5da:	8a e1       	ldi	r24, 0x1A	; 26
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <puts>
	struct CAN_message test;
	test.id = 3;
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	89 83       	std	Y+1, r24	; 0x01
	test.length = 2;
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	8a 83       	std	Y+2, r24	; 0x02
		//joystick_pressed();
		//joystick_navigate_vertical();
		
		//struct Slider temp2 = read_slider_position(channel3,channel4);
		//printf("slider1: %i, slider2: %i \n",temp2.slider1,temp2.slider2);
		printf("X pos: %i, Y pos: %i \n",temp.x_pos,temp.y_pos);
     5ea:	0f 2e       	mov	r0, r31
     5ec:	f7 e2       	ldi	r31, 0x27	; 39
     5ee:	ef 2e       	mov	r14, r31
     5f0:	f1 e0       	ldi	r31, 0x01	; 1
     5f2:	ff 2e       	mov	r15, r31
     5f4:	f0 2d       	mov	r31, r0
	
	//struct CAN_message copy_message;
	//test = joy_message_init();
	while(1)
    {
		struct Joystick temp = read_joystick_position(channel1,channel2);
     5f6:	65 e0       	ldi	r22, 0x05	; 5
     5f8:	84 e0       	ldi	r24, 0x04	; 4
     5fa:	0e 94 c0 02 	call	0x580	; 0x580 <read_joystick_position>
     5fe:	d6 2e       	mov	r13, r22
     600:	c7 2e       	mov	r12, r23
     602:	b8 2e       	mov	r11, r24
     604:	a9 2e       	mov	r10, r25
		//test.data[0] = 22;
		//test.data[1] = 69;
		test.data[0] = (uint8_t)read_joystick_position(channel1, channel2).x_pos;
     606:	65 e0       	ldi	r22, 0x05	; 5
     608:	84 e0       	ldi	r24, 0x04	; 4
     60a:	0e 94 c0 02 	call	0x580	; 0x580 <read_joystick_position>
     60e:	6b 83       	std	Y+3, r22	; 0x03
		test.data[1] = (uint8_t)read_joystick_position(channel1, channel2).y_pos;
     610:	65 e0       	ldi	r22, 0x05	; 5
     612:	84 e0       	ldi	r24, 0x04	; 4
     614:	0e 94 c0 02 	call	0x580	; 0x580 <read_joystick_position>
     618:	38 2f       	mov	r19, r24
     61a:	8c 83       	std	Y+4, r24	; 0x04
		int status = CAN_transmit(test);
     61c:	09 81       	ldd	r16, Y+1	; 0x01
     61e:	1a 81       	ldd	r17, Y+2	; 0x02
     620:	2b 81       	ldd	r18, Y+3	; 0x03
     622:	4d 81       	ldd	r20, Y+5	; 0x05
     624:	5e 81       	ldd	r21, Y+6	; 0x06
     626:	6f 81       	ldd	r22, Y+7	; 0x07
     628:	78 85       	ldd	r23, Y+8	; 0x08
     62a:	89 85       	ldd	r24, Y+9	; 0x09
     62c:	9a 85       	ldd	r25, Y+10	; 0x0a
     62e:	0e 94 2e 02 	call	0x45c	; 0x45c <CAN_transmit>
		//joystick_pressed();
		//joystick_navigate_vertical();
		
		//struct Slider temp2 = read_slider_position(channel3,channel4);
		//printf("slider1: %i, slider2: %i \n",temp2.slider1,temp2.slider2);
		printf("X pos: %i, Y pos: %i \n",temp.x_pos,temp.y_pos);
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ff 92       	push	r15
     63c:	ef 92       	push	r14
     63e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <printf>
     642:	87 ea       	ldi	r24, 0xA7	; 167
     644:	91 e6       	ldi	r25, 0x61	; 97
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <main+0xa2>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <main+0xa8>
     64c:	00 00       	nop
     64e:	0f 90       	pop	r0
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	0f 90       	pop	r0
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	cd cf       	rjmp	.-102    	; 0x5f6 <main+0x52>

0000065c <select_CAN>:
#include "MCP2515.h"
#define DD_SS PB4


void select_CAN(void){
	clear_bit(PORTB, DD_SS);
     65c:	c4 98       	cbi	0x18, 4	; 24
     65e:	08 95       	ret

00000660 <deselect_CAN>:
}

void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
     660:	c4 9a       	sbi	0x18, 4	; 24
     662:	08 95       	ret

00000664 <MCP_write>:
void MCP_init(){
	SPI_MasterInit();
	MCP_reset();
}

void MCP_write(uint8_t data, uint8_t address){
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	c8 2f       	mov	r28, r24
     66a:	d6 2f       	mov	r29, r22
	// printf("MCP_write data = %x, address = %x \n", data, address);
	select_CAN();
     66c:	0e 94 2e 03 	call	0x65c	; 0x65c <select_CAN>
	
	SPI_MasterTransmit(MCP_WRITE);
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     678:	8d 2f       	mov	r24, r29
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     680:	8c 2f       	mov	r24, r28
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	deselect_CAN();
     688:	0e 94 30 03 	call	0x660	; 0x660 <deselect_CAN>
}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <MCP_read>:

uint8_t MCP_read(uint8_t address){
     692:	cf 93       	push	r28
     694:	c8 2f       	mov	r28, r24
	uint8_t temp;
	
	select_CAN();
     696:	0e 94 2e 03 	call	0x65c	; 0x65c <select_CAN>
	
	SPI_MasterTransmit(MCP_READ);
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     6a2:	8c 2f       	mov	r24, r28
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	temp = SPI_MasterReceive();
     6aa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <SPI_MasterReceive>
     6ae:	c8 2f       	mov	r28, r24
	deselect_CAN();
     6b0:	0e 94 30 03 	call	0x660	; 0x660 <deselect_CAN>
	// printf("I MCP_read, temp = %x, address = %x \n", temp, address);
	return temp;
}
     6b4:	8c 2f       	mov	r24, r28
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <MCP_rts>:

void MCP_rts(uint8_t reg){
     6ba:	cf 93       	push	r28
	
if (reg <= 7)
     6bc:	88 30       	cpi	r24, 0x08	; 8
     6be:	18 f4       	brcc	.+6      	; 0x6c6 <MCP_rts+0xc>
{reg = MCP_RTS | reg;
     6c0:	c8 2f       	mov	r28, r24
     6c2:	c0 68       	ori	r28, 0x80	; 128
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <MCP_rts+0xe>
}
else{
	reg = MCP_RTS;
     6c6:	c0 e8       	ldi	r28, 0x80	; 128
}	
	select_CAN();
     6c8:	0e 94 2e 03 	call	0x65c	; 0x65c <select_CAN>
	SPI_MasterTransmit(reg);
     6cc:	8c 2f       	mov	r24, r28
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	deselect_CAN();	
     6d4:	0e 94 30 03 	call	0x660	; 0x660 <deselect_CAN>
}
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <MCP_bit_mod>:
	SPI_MasterTransmit(MCP_READ_STATUS);
	deselect_CAN();
	return SPI_MasterReceive();
}

void MCP_bit_mod(uint8_t address, uint8_t m_byte, uint8_t d_byte){
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	18 2f       	mov	r17, r24
     6e4:	d6 2f       	mov	r29, r22
     6e6:	c4 2f       	mov	r28, r20
	select_CAN();
     6e8:	0e 94 2e 03 	call	0x65c	; 0x65c <select_CAN>
	SPI_MasterTransmit(MCP_BITMOD);
     6ec:	85 e0       	ldi	r24, 0x05	; 5
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     6f4:	81 2f       	mov	r24, r17
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	SPI_MasterTransmit(m_byte);
     6fc:	8d 2f       	mov	r24, r29
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	SPI_MasterTransmit(d_byte);
     704:	8c 2f       	mov	r24, r28
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	deselect_CAN();
     70c:	0e 94 30 03 	call	0x660	; 0x660 <deselect_CAN>
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	08 95       	ret

00000718 <MCP_reset>:

void MCP_reset(){
	select_CAN();
     718:	0e 94 2e 03 	call	0x65c	; 0x65c <select_CAN>
	SPI_MasterTransmit(MCP_RESET);
     71c:	80 ec       	ldi	r24, 0xC0	; 192
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	deselect_CAN();
     724:	0e 94 30 03 	call	0x660	; 0x660 <deselect_CAN>
	uint8_t mode = MCP_read(MCP_CANSTAT);
     728:	8e e0       	ldi	r24, 0x0E	; 14
     72a:	0e 94 49 03 	call	0x692	; 0x692 <MCP_read>
	if ((mode&MODE_MASK)!=MODE_CONFIG)
     72e:	80 7e       	andi	r24, 0xE0	; 224
     730:	80 38       	cpi	r24, 0x80	; 128
     732:	21 f0       	breq	.+8      	; 0x73c <MCP_reset+0x24>
	{
		printf("Not in config after reset\n");
     734:	8e e3       	ldi	r24, 0x3E	; 62
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <puts>
     73c:	08 95       	ret

0000073e <MCP_init>:
void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
}

void MCP_init(){
	SPI_MasterInit();
     73e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <SPI_MasterInit>
	MCP_reset();
     742:	0e 94 8c 03 	call	0x718	; 0x718 <MCP_reset>
     746:	08 95       	ret

00000748 <oled_init>:
#include "joystick.h"
#include "fonts.h"
int coloumn_counter = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     748:	e0 e0       	ldi	r30, 0x00	; 0
     74a:	f0 e1       	ldi	r31, 0x10	; 16
     74c:	8e ea       	ldi	r24, 0xAE	; 174
     74e:	80 83       	st	Z, r24
     750:	81 ea       	ldi	r24, 0xA1	; 161
     752:	80 83       	st	Z, r24
     754:	8a ed       	ldi	r24, 0xDA	; 218
     756:	80 83       	st	Z, r24
     758:	82 e1       	ldi	r24, 0x12	; 18
     75a:	80 83       	st	Z, r24
     75c:	88 ec       	ldi	r24, 0xC8	; 200
     75e:	80 83       	st	Z, r24
     760:	88 ea       	ldi	r24, 0xA8	; 168
     762:	80 83       	st	Z, r24
     764:	8f e3       	ldi	r24, 0x3F	; 63
     766:	80 83       	st	Z, r24
     768:	85 ed       	ldi	r24, 0xD5	; 213
     76a:	80 83       	st	Z, r24
     76c:	80 e8       	ldi	r24, 0x80	; 128
     76e:	80 83       	st	Z, r24
     770:	81 e8       	ldi	r24, 0x81	; 129
     772:	80 83       	st	Z, r24
     774:	80 e5       	ldi	r24, 0x50	; 80
     776:	80 83       	st	Z, r24
     778:	89 ed       	ldi	r24, 0xD9	; 217
     77a:	80 83       	st	Z, r24
     77c:	81 e2       	ldi	r24, 0x21	; 33
     77e:	80 83       	st	Z, r24
     780:	80 e2       	ldi	r24, 0x20	; 32
     782:	80 83       	st	Z, r24
     784:	82 e0       	ldi	r24, 0x02	; 2
     786:	80 83       	st	Z, r24
     788:	8b ed       	ldi	r24, 0xDB	; 219
     78a:	80 83       	st	Z, r24
     78c:	80 e3       	ldi	r24, 0x30	; 48
     78e:	80 83       	st	Z, r24
     790:	8d ea       	ldi	r24, 0xAD	; 173
     792:	80 83       	st	Z, r24
     794:	10 82       	st	Z, r1
     796:	84 ea       	ldi	r24, 0xA4	; 164
     798:	80 83       	st	Z, r24
     79a:	86 ea       	ldi	r24, 0xA6	; 166
     79c:	80 83       	st	Z, r24
     79e:	8f ea       	ldi	r24, 0xAF	; 175
     7a0:	80 83       	st	Z, r24
     7a2:	08 95       	ret

000007a4 <oled_clear_page>:
		oled_clear_page(i);
	}
	//oled_init();
}
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
     7a4:	80 55       	subi	r24, 0x50	; 80
#include "joystick.h"
#include "fonts.h"
int coloumn_counter = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     7a6:	80 93 00 10 	sts	0x1000, r24
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	90 e0       	ldi	r25, 0x00	; 0
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     7ae:	e0 e0       	ldi	r30, 0x00	; 0
     7b0:	f2 e1       	ldi	r31, 0x12	; 18
     7b2:	10 82       	st	Z, r1
     7b4:	01 97       	sbiw	r24, 0x01	; 1
	write_c(coloumn_start);
	write_c(coloumn_end);
}
void oled_clear_page(page){
	oled_goto_page(page);
		for (int i = 0;i<128;i++){
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <oled_clear_page+0xe>
			write_d(0x00);
		}
}
     7ba:	08 95       	ret

000007bc <oled_reset>:
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
	for (int i=0; i<8;i++){
     7c0:	c0 e0       	ldi	r28, 0x00	; 0
     7c2:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_page(i);
     7c4:	ce 01       	movw	r24, r28
     7c6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <oled_clear_page>
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
	for (int i=0; i<8;i++){
     7ca:	21 96       	adiw	r28, 0x01	; 1
     7cc:	c8 30       	cpi	r28, 0x08	; 8
     7ce:	d1 05       	cpc	r29, r1
     7d0:	c9 f7       	brne	.-14     	; 0x7c4 <oled_reset+0x8>
		oled_clear_page(i);
	}
	//oled_init();
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <oled_pos>:
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
     7d8:	80 55       	subi	r24, 0x50	; 80
#include "joystick.h"
#include "fonts.h"
int coloumn_counter = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     7da:	e0 e0       	ldi	r30, 0x00	; 0
     7dc:	f0 e1       	ldi	r31, 0x10	; 16
     7de:	80 83       	st	Z, r24
     7e0:	81 e2       	ldi	r24, 0x21	; 33
     7e2:	80 83       	st	Z, r24
     7e4:	60 83       	st	Z, r22
     7e6:	40 83       	st	Z, r20
     7e8:	08 95       	ret

000007ea <oled_print_letter>:
		for (int i = 0;i<128;i++){
			write_d(0x00);
		}
}

void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
     7ea:	cf 93       	push	r28
     7ec:	c8 2f       	mov	r28, r24
     7ee:	86 2f       	mov	r24, r22
     7f0:	64 2f       	mov	r22, r20
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
     7f2:	42 2f       	mov	r20, r18
     7f4:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <oled_pos>
     7f8:	ec 2f       	mov	r30, r28
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	ee 0f       	add	r30, r30
     806:	ff 1f       	adc	r31, r31
     808:	e0 59       	subi	r30, 0x90	; 144
     80a:	f0 40       	sbci	r31, 0x00	; 0
	int ltr;
	for (int i = 0;i<8;i++){
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     810:	a0 e0       	ldi	r26, 0x00	; 0
     812:	b2 e1       	ldi	r27, 0x12	; 18
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
		ltr = pgm_read_byte(&(font8[letter-32][i]));
     814:	24 91       	lpm	r18, Z
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     816:	2c 93       	st	X, r18
void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
     818:	01 96       	adiw	r24, 0x01	; 1
     81a:	31 96       	adiw	r30, 0x01	; 1
     81c:	88 30       	cpi	r24, 0x08	; 8
     81e:	91 05       	cpc	r25, r1
     820:	c9 f7       	brne	.-14     	; 0x814 <oled_print_letter+0x2a>
		ltr = pgm_read_byte(&(font8[letter-32][i]));
		write_d(ltr);
	}
}
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <oled_print>:
void oled_pos(uint8_t page,uint8_t coloumn_start,uint8_t coloumn_end){
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
     826:	bf 92       	push	r11
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	cf 93       	push	r28
     836:	df 93       	push	r29
     838:	fc 01       	movw	r30, r24
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
     83a:	80 81       	ld	r24, Z
     83c:	88 23       	and	r24, r24
     83e:	49 f1       	breq	.+82     	; 0x892 <oled_print+0x6c>
     840:	ef 01       	movw	r28, r30
     842:	21 96       	adiw	r28, 0x01	; 1
     844:	8f 01       	movw	r16, r30
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
     846:	dd 24       	eor	r13, r13
     848:	d3 94       	inc	r13
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
     84a:	0f 2e       	mov	r0, r31
     84c:	f1 e1       	ldi	r31, 0x11	; 17
     84e:	ef 2e       	mov	r14, r31
     850:	f0 2d       	mov	r31, r0
void oled_pos(uint8_t page,uint8_t coloumn_start,uint8_t coloumn_end){
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
     852:	0f 2e       	mov	r0, r31
     854:	f9 e0       	ldi	r31, 0x09	; 9
     856:	ff 2e       	mov	r15, r31
     858:	f0 2d       	mov	r31, r0
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
			coloumn_start = 0x09;
			coloumn_end = 0x11;
     85a:	0f 2e       	mov	r0, r31
     85c:	f1 e1       	ldi	r31, 0x11	; 17
     85e:	bf 2e       	mov	r11, r31
     860:	f0 2d       	mov	r31, r0
		coloumn_start += 0x09;
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
			coloumn_start = 0x09;
     862:	0f 2e       	mov	r0, r31
     864:	f9 e0       	ldi	r31, 0x09	; 9
     866:	cf 2e       	mov	r12, r31
     868:	f0 2d       	mov	r31, r0
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
		oled_print_letter(word[i], page, coloumn_start,coloumn_end);
     86a:	2e 2d       	mov	r18, r14
     86c:	4f 2d       	mov	r20, r15
     86e:	6d 2d       	mov	r22, r13
     870:	0e 94 f5 03 	call	0x7ea	; 0x7ea <oled_print_letter>
		coloumn_start += 0x09;
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
     874:	f8 01       	movw	r30, r16
     876:	80 81       	ld	r24, Z
     878:	80 32       	cpi	r24, 0x20	; 32
     87a:	21 f0       	breq	.+8      	; 0x884 <oled_print+0x5e>
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
		oled_print_letter(word[i], page, coloumn_start,coloumn_end);
		coloumn_start += 0x09;
     87c:	f9 e0       	ldi	r31, 0x09	; 9
     87e:	ff 0e       	add	r15, r31
		coloumn_end += 0x09;
     880:	ef 0e       	add	r14, r31
     882:	03 c0       	rjmp	.+6      	; 0x88a <oled_print+0x64>
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
     884:	d3 94       	inc	r13
			coloumn_start = 0x09;
			coloumn_end = 0x11;
     886:	eb 2c       	mov	r14, r11
		coloumn_start += 0x09;
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
			coloumn_start = 0x09;
     888:	fc 2c       	mov	r15, r12
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
     88a:	8e 01       	movw	r16, r28
     88c:	89 91       	ld	r24, Y+
     88e:	81 11       	cpse	r24, r1
     890:	ec cf       	rjmp	.-40     	; 0x86a <oled_print+0x44>
			coloumn_start = 0x09;
			coloumn_end = 0x11;
		}
	}
	
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	bf 90       	pop	r11
     8a4:	08 95       	ret

000008a6 <initialize_menu>:
	oled_goto_page(0x00);
	oled_goto_coloumn(0x00,0x00);
}

void initialize_menu(){
	oled_print("Meny1 Meny2 Meny3 Meny4 Meny5");
     8a6:	88 e5       	ldi	r24, 0x58	; 88
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	0e 94 13 04 	call	0x826	; 0x826 <oled_print>
	oled_print_letter('#',0x01,0x00,0x08);
     8ae:	28 e0       	ldi	r18, 0x08	; 8
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	83 e2       	ldi	r24, 0x23	; 35
     8b6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <oled_print_letter>
	pos.current_page = 0x01;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 77 01 	sts	0x0177, r24
     8c0:	08 95       	ret

000008c2 <SPI_MasterInit>:

#include "SPI.h"

void SPI_MasterInit(void){
	/* Set MOSI,SCK and SS output, all others input */
	DDRB = (1<<DD_MOSI) | (1<<DD_SCK) | (1 << DD_SS) | (1 << PB0);
     8c2:	81 eb       	ldi	r24, 0xB1	; 177
     8c4:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
     8c6:	81 e5       	ldi	r24, 0x51	; 81
     8c8:	8d b9       	out	0x0d, r24	; 13
     8ca:	08 95       	ret

000008cc <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData){
	/* Start transmission */
	SPDR = cData;
     8cc:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while	(!(SPSR & (1<<SPIF)));
     8ce:	77 9b       	sbis	0x0e, 7	; 14
     8d0:	fe cf       	rjmp	.-4      	; 0x8ce <SPI_MasterTransmit+0x2>
}
     8d2:	08 95       	ret

000008d4 <SPI_MasterReceive>:

char SPI_MasterReceive(void){
	/* Send dummy data to read from slave */	
	SPI_MasterTransmit(0);
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	0e 94 66 04 	call	0x8cc	; 0x8cc <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	// while	(!(SPSR & (1<<SPIF)));
	
	/* Return data register */
	return	SPDR;
     8da:	8f b1       	in	r24, 0x0f	; 15
     8dc:	08 95       	ret

000008de <EXT_MEM_Init>:
#include <avr/io.h>
#include <stdlib.h>
#include "../../delte filer/uart.h"

void EXT_MEM_Init(void){
	set_bit(MCUCR,SRE);
     8de:	85 b7       	in	r24, 0x35	; 53
     8e0:	80 68       	ori	r24, 0x80	; 128
     8e2:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
     8e4:	80 b7       	in	r24, 0x30	; 48
     8e6:	80 62       	ori	r24, 0x20	; 32
     8e8:	80 bf       	out	0x30, r24	; 48
     8ea:	08 95       	ret

000008ec <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

// Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     8ec:	5d 9b       	sbis	0x0b, 5	; 11
     8ee:	fe cf       	rjmp	.-4      	; 0x8ec <USART_Transmit>
  
//Put data into buffer, sends the data
	UDR0 = data;
     8f0:	8c b9       	out	0x0c, r24	; 12
     8f2:	08 95       	ret

000008f4 <USART_Receive>:
}

unsigned char USART_Receive( void ){

//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
     8f4:	5f 9b       	sbis	0x0b, 7	; 11
     8f6:	fe cf       	rjmp	.-4      	; 0x8f4 <USART_Receive>
//Get and return received data from buffer
	return UDR0;
     8f8:	8c b1       	in	r24, 0x0c	; 12
     8fa:	08 95       	ret

000008fc <USART_Init>:
	//set_bit(SFIOR,XMM2);
	////set_bit(SFIOR,XMM0);
//}
void USART_Init( unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     8fc:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     8fe:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter	*/
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
     900:	88 e1       	ldi	r24, 0x18	; 24
     902:	8a b9       	out	0x0a, r24	; 10
	fdevopen(USART_Transmit,USART_Receive);
     904:	6a e7       	ldi	r22, 0x7A	; 122
     906:	74 e0       	ldi	r23, 0x04	; 4
     908:	86 e7       	ldi	r24, 0x76	; 118
     90a:	94 e0       	ldi	r25, 0x04	; 4
     90c:	0e 94 89 04 	call	0x912	; 0x912 <fdevopen>
     910:	08 95       	ret

00000912 <fdevopen>:
     912:	0f 93       	push	r16
     914:	1f 93       	push	r17
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	ec 01       	movw	r28, r24
     91c:	8b 01       	movw	r16, r22
     91e:	00 97       	sbiw	r24, 0x00	; 0
     920:	31 f4       	brne	.+12     	; 0x92e <fdevopen+0x1c>
     922:	61 15       	cp	r22, r1
     924:	71 05       	cpc	r23, r1
     926:	19 f4       	brne	.+6      	; 0x92e <fdevopen+0x1c>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	38 c0       	rjmp	.+112    	; 0x99e <fdevopen+0x8c>
     92e:	6e e0       	ldi	r22, 0x0E	; 14
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 e7 06 	call	0xdce	; 0xdce <calloc>
     93a:	fc 01       	movw	r30, r24
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	a1 f3       	breq	.-24     	; 0x928 <fdevopen+0x16>
     940:	80 e8       	ldi	r24, 0x80	; 128
     942:	83 83       	std	Z+3, r24	; 0x03
     944:	01 15       	cp	r16, r1
     946:	11 05       	cpc	r17, r1
     948:	71 f0       	breq	.+28     	; 0x966 <fdevopen+0x54>
     94a:	13 87       	std	Z+11, r17	; 0x0b
     94c:	02 87       	std	Z+10, r16	; 0x0a
     94e:	81 e8       	ldi	r24, 0x81	; 129
     950:	83 83       	std	Z+3, r24	; 0x03
     952:	80 91 7c 01 	lds	r24, 0x017C
     956:	90 91 7d 01 	lds	r25, 0x017D
     95a:	89 2b       	or	r24, r25
     95c:	21 f4       	brne	.+8      	; 0x966 <fdevopen+0x54>
     95e:	f0 93 7d 01 	sts	0x017D, r31
     962:	e0 93 7c 01 	sts	0x017C, r30
     966:	20 97       	sbiw	r28, 0x00	; 0
     968:	c9 f0       	breq	.+50     	; 0x99c <fdevopen+0x8a>
     96a:	d1 87       	std	Z+9, r29	; 0x09
     96c:	c0 87       	std	Z+8, r28	; 0x08
     96e:	83 81       	ldd	r24, Z+3	; 0x03
     970:	82 60       	ori	r24, 0x02	; 2
     972:	83 83       	std	Z+3, r24	; 0x03
     974:	80 91 7e 01 	lds	r24, 0x017E
     978:	90 91 7f 01 	lds	r25, 0x017F
     97c:	89 2b       	or	r24, r25
     97e:	71 f4       	brne	.+28     	; 0x99c <fdevopen+0x8a>
     980:	f0 93 7f 01 	sts	0x017F, r31
     984:	e0 93 7e 01 	sts	0x017E, r30
     988:	80 91 80 01 	lds	r24, 0x0180
     98c:	90 91 81 01 	lds	r25, 0x0181
     990:	89 2b       	or	r24, r25
     992:	21 f4       	brne	.+8      	; 0x99c <fdevopen+0x8a>
     994:	f0 93 81 01 	sts	0x0181, r31
     998:	e0 93 80 01 	sts	0x0180, r30
     99c:	cf 01       	movw	r24, r30
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	08 95       	ret

000009a8 <printf>:
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	ea ed       	ldi	r30, 0xDA	; 218
     9ae:	f4 e0       	ldi	r31, 0x04	; 4
     9b0:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__prologue_saves__+0x20>
     9b4:	fe 01       	movw	r30, r28
     9b6:	35 96       	adiw	r30, 0x05	; 5
     9b8:	61 91       	ld	r22, Z+
     9ba:	71 91       	ld	r23, Z+
     9bc:	af 01       	movw	r20, r30
     9be:	80 91 7e 01 	lds	r24, 0x017E
     9c2:	90 91 7f 01 	lds	r25, 0x017F
     9c6:	0e 94 15 05 	call	0xa2a	; 0xa2a <vfprintf>
     9ca:	e2 e0       	ldi	r30, 0x02	; 2
     9cc:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__epilogue_restores__+0x20>

000009d0 <puts>:
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	e0 91 7e 01 	lds	r30, 0x017E
     9dc:	f0 91 7f 01 	lds	r31, 0x017F
     9e0:	23 81       	ldd	r18, Z+3	; 0x03
     9e2:	21 ff       	sbrs	r18, 1
     9e4:	1b c0       	rjmp	.+54     	; 0xa1c <puts+0x4c>
     9e6:	ec 01       	movw	r28, r24
     9e8:	00 e0       	ldi	r16, 0x00	; 0
     9ea:	10 e0       	ldi	r17, 0x00	; 0
     9ec:	89 91       	ld	r24, Y+
     9ee:	60 91 7e 01 	lds	r22, 0x017E
     9f2:	70 91 7f 01 	lds	r23, 0x017F
     9f6:	db 01       	movw	r26, r22
     9f8:	18 96       	adiw	r26, 0x08	; 8
     9fa:	ed 91       	ld	r30, X+
     9fc:	fc 91       	ld	r31, X
     9fe:	19 97       	sbiw	r26, 0x09	; 9
     a00:	88 23       	and	r24, r24
     a02:	31 f0       	breq	.+12     	; 0xa10 <puts+0x40>
     a04:	09 95       	icall
     a06:	89 2b       	or	r24, r25
     a08:	89 f3       	breq	.-30     	; 0x9ec <puts+0x1c>
     a0a:	0f ef       	ldi	r16, 0xFF	; 255
     a0c:	1f ef       	ldi	r17, 0xFF	; 255
     a0e:	ee cf       	rjmp	.-36     	; 0x9ec <puts+0x1c>
     a10:	8a e0       	ldi	r24, 0x0A	; 10
     a12:	09 95       	icall
     a14:	89 2b       	or	r24, r25
     a16:	11 f4       	brne	.+4      	; 0xa1c <puts+0x4c>
     a18:	c8 01       	movw	r24, r16
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <puts+0x50>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	9f ef       	ldi	r25, 0xFF	; 255
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <vfprintf>:
     a2a:	ac e0       	ldi	r26, 0x0C	; 12
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	eb e1       	ldi	r30, 0x1B	; 27
     a30:	f5 e0       	ldi	r31, 0x05	; 5
     a32:	0c 94 d7 08 	jmp	0x11ae	; 0x11ae <__prologue_saves__>
     a36:	7c 01       	movw	r14, r24
     a38:	6b 01       	movw	r12, r22
     a3a:	8a 01       	movw	r16, r20
     a3c:	fc 01       	movw	r30, r24
     a3e:	17 82       	std	Z+7, r1	; 0x07
     a40:	16 82       	std	Z+6, r1	; 0x06
     a42:	83 81       	ldd	r24, Z+3	; 0x03
     a44:	81 ff       	sbrs	r24, 1
     a46:	bd c1       	rjmp	.+890    	; 0xdc2 <vfprintf+0x398>
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	4c 01       	movw	r8, r24
     a4e:	f7 01       	movw	r30, r14
     a50:	93 81       	ldd	r25, Z+3	; 0x03
     a52:	f6 01       	movw	r30, r12
     a54:	93 fd       	sbrc	r25, 3
     a56:	85 91       	lpm	r24, Z+
     a58:	93 ff       	sbrs	r25, 3
     a5a:	81 91       	ld	r24, Z+
     a5c:	6f 01       	movw	r12, r30
     a5e:	88 23       	and	r24, r24
     a60:	09 f4       	brne	.+2      	; 0xa64 <vfprintf+0x3a>
     a62:	ab c1       	rjmp	.+854    	; 0xdba <vfprintf+0x390>
     a64:	85 32       	cpi	r24, 0x25	; 37
     a66:	39 f4       	brne	.+14     	; 0xa76 <vfprintf+0x4c>
     a68:	93 fd       	sbrc	r25, 3
     a6a:	85 91       	lpm	r24, Z+
     a6c:	93 ff       	sbrs	r25, 3
     a6e:	81 91       	ld	r24, Z+
     a70:	6f 01       	movw	r12, r30
     a72:	85 32       	cpi	r24, 0x25	; 37
     a74:	29 f4       	brne	.+10     	; 0xa80 <vfprintf+0x56>
     a76:	b7 01       	movw	r22, r14
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 47 08 	call	0x108e	; 0x108e <fputc>
     a7e:	e7 cf       	rjmp	.-50     	; 0xa4e <vfprintf+0x24>
     a80:	51 2c       	mov	r5, r1
     a82:	31 2c       	mov	r3, r1
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	20 32       	cpi	r18, 0x20	; 32
     a88:	a0 f4       	brcc	.+40     	; 0xab2 <vfprintf+0x88>
     a8a:	8b 32       	cpi	r24, 0x2B	; 43
     a8c:	69 f0       	breq	.+26     	; 0xaa8 <vfprintf+0x7e>
     a8e:	30 f4       	brcc	.+12     	; 0xa9c <vfprintf+0x72>
     a90:	80 32       	cpi	r24, 0x20	; 32
     a92:	59 f0       	breq	.+22     	; 0xaaa <vfprintf+0x80>
     a94:	83 32       	cpi	r24, 0x23	; 35
     a96:	69 f4       	brne	.+26     	; 0xab2 <vfprintf+0x88>
     a98:	20 61       	ori	r18, 0x10	; 16
     a9a:	2c c0       	rjmp	.+88     	; 0xaf4 <vfprintf+0xca>
     a9c:	8d 32       	cpi	r24, 0x2D	; 45
     a9e:	39 f0       	breq	.+14     	; 0xaae <vfprintf+0x84>
     aa0:	80 33       	cpi	r24, 0x30	; 48
     aa2:	39 f4       	brne	.+14     	; 0xab2 <vfprintf+0x88>
     aa4:	21 60       	ori	r18, 0x01	; 1
     aa6:	26 c0       	rjmp	.+76     	; 0xaf4 <vfprintf+0xca>
     aa8:	22 60       	ori	r18, 0x02	; 2
     aaa:	24 60       	ori	r18, 0x04	; 4
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <vfprintf+0xca>
     aae:	28 60       	ori	r18, 0x08	; 8
     ab0:	21 c0       	rjmp	.+66     	; 0xaf4 <vfprintf+0xca>
     ab2:	27 fd       	sbrc	r18, 7
     ab4:	27 c0       	rjmp	.+78     	; 0xb04 <vfprintf+0xda>
     ab6:	30 ed       	ldi	r19, 0xD0	; 208
     ab8:	38 0f       	add	r19, r24
     aba:	3a 30       	cpi	r19, 0x0A	; 10
     abc:	78 f4       	brcc	.+30     	; 0xadc <vfprintf+0xb2>
     abe:	26 ff       	sbrs	r18, 6
     ac0:	06 c0       	rjmp	.+12     	; 0xace <vfprintf+0xa4>
     ac2:	fa e0       	ldi	r31, 0x0A	; 10
     ac4:	5f 9e       	mul	r5, r31
     ac6:	30 0d       	add	r19, r0
     ac8:	11 24       	eor	r1, r1
     aca:	53 2e       	mov	r5, r19
     acc:	13 c0       	rjmp	.+38     	; 0xaf4 <vfprintf+0xca>
     ace:	8a e0       	ldi	r24, 0x0A	; 10
     ad0:	38 9e       	mul	r3, r24
     ad2:	30 0d       	add	r19, r0
     ad4:	11 24       	eor	r1, r1
     ad6:	33 2e       	mov	r3, r19
     ad8:	20 62       	ori	r18, 0x20	; 32
     ada:	0c c0       	rjmp	.+24     	; 0xaf4 <vfprintf+0xca>
     adc:	8e 32       	cpi	r24, 0x2E	; 46
     ade:	21 f4       	brne	.+8      	; 0xae8 <vfprintf+0xbe>
     ae0:	26 fd       	sbrc	r18, 6
     ae2:	6b c1       	rjmp	.+726    	; 0xdba <vfprintf+0x390>
     ae4:	20 64       	ori	r18, 0x40	; 64
     ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <vfprintf+0xca>
     ae8:	8c 36       	cpi	r24, 0x6C	; 108
     aea:	11 f4       	brne	.+4      	; 0xaf0 <vfprintf+0xc6>
     aec:	20 68       	ori	r18, 0x80	; 128
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0xca>
     af0:	88 36       	cpi	r24, 0x68	; 104
     af2:	41 f4       	brne	.+16     	; 0xb04 <vfprintf+0xda>
     af4:	f6 01       	movw	r30, r12
     af6:	93 fd       	sbrc	r25, 3
     af8:	85 91       	lpm	r24, Z+
     afa:	93 ff       	sbrs	r25, 3
     afc:	81 91       	ld	r24, Z+
     afe:	6f 01       	movw	r12, r30
     b00:	81 11       	cpse	r24, r1
     b02:	c1 cf       	rjmp	.-126    	; 0xa86 <vfprintf+0x5c>
     b04:	98 2f       	mov	r25, r24
     b06:	9f 7d       	andi	r25, 0xDF	; 223
     b08:	95 54       	subi	r25, 0x45	; 69
     b0a:	93 30       	cpi	r25, 0x03	; 3
     b0c:	28 f4       	brcc	.+10     	; 0xb18 <vfprintf+0xee>
     b0e:	0c 5f       	subi	r16, 0xFC	; 252
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
     b12:	ff e3       	ldi	r31, 0x3F	; 63
     b14:	f9 83       	std	Y+1, r31	; 0x01
     b16:	0d c0       	rjmp	.+26     	; 0xb32 <vfprintf+0x108>
     b18:	83 36       	cpi	r24, 0x63	; 99
     b1a:	31 f0       	breq	.+12     	; 0xb28 <vfprintf+0xfe>
     b1c:	83 37       	cpi	r24, 0x73	; 115
     b1e:	71 f0       	breq	.+28     	; 0xb3c <vfprintf+0x112>
     b20:	83 35       	cpi	r24, 0x53	; 83
     b22:	09 f0       	breq	.+2      	; 0xb26 <vfprintf+0xfc>
     b24:	5b c0       	rjmp	.+182    	; 0xbdc <vfprintf+0x1b2>
     b26:	22 c0       	rjmp	.+68     	; 0xb6c <vfprintf+0x142>
     b28:	f8 01       	movw	r30, r16
     b2a:	80 81       	ld	r24, Z
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	0e 5f       	subi	r16, 0xFE	; 254
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
     b32:	44 24       	eor	r4, r4
     b34:	43 94       	inc	r4
     b36:	51 2c       	mov	r5, r1
     b38:	54 01       	movw	r10, r8
     b3a:	15 c0       	rjmp	.+42     	; 0xb66 <vfprintf+0x13c>
     b3c:	38 01       	movw	r6, r16
     b3e:	f2 e0       	ldi	r31, 0x02	; 2
     b40:	6f 0e       	add	r6, r31
     b42:	71 1c       	adc	r7, r1
     b44:	f8 01       	movw	r30, r16
     b46:	a0 80       	ld	r10, Z
     b48:	b1 80       	ldd	r11, Z+1	; 0x01
     b4a:	26 ff       	sbrs	r18, 6
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <vfprintf+0x12a>
     b4e:	65 2d       	mov	r22, r5
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x12e>
     b54:	6f ef       	ldi	r22, 0xFF	; 255
     b56:	7f ef       	ldi	r23, 0xFF	; 255
     b58:	c5 01       	movw	r24, r10
     b5a:	2c 87       	std	Y+12, r18	; 0x0c
     b5c:	0e 94 3c 08 	call	0x1078	; 0x1078 <strnlen>
     b60:	2c 01       	movw	r4, r24
     b62:	83 01       	movw	r16, r6
     b64:	2c 85       	ldd	r18, Y+12	; 0x0c
     b66:	2f 77       	andi	r18, 0x7F	; 127
     b68:	22 2e       	mov	r2, r18
     b6a:	17 c0       	rjmp	.+46     	; 0xb9a <vfprintf+0x170>
     b6c:	38 01       	movw	r6, r16
     b6e:	f2 e0       	ldi	r31, 0x02	; 2
     b70:	6f 0e       	add	r6, r31
     b72:	71 1c       	adc	r7, r1
     b74:	f8 01       	movw	r30, r16
     b76:	a0 80       	ld	r10, Z
     b78:	b1 80       	ldd	r11, Z+1	; 0x01
     b7a:	26 ff       	sbrs	r18, 6
     b7c:	03 c0       	rjmp	.+6      	; 0xb84 <vfprintf+0x15a>
     b7e:	65 2d       	mov	r22, r5
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <vfprintf+0x15e>
     b84:	6f ef       	ldi	r22, 0xFF	; 255
     b86:	7f ef       	ldi	r23, 0xFF	; 255
     b88:	c5 01       	movw	r24, r10
     b8a:	2c 87       	std	Y+12, r18	; 0x0c
     b8c:	0e 94 2a 08 	call	0x1054	; 0x1054 <strnlen_P>
     b90:	2c 01       	movw	r4, r24
     b92:	2c 85       	ldd	r18, Y+12	; 0x0c
     b94:	20 68       	ori	r18, 0x80	; 128
     b96:	22 2e       	mov	r2, r18
     b98:	83 01       	movw	r16, r6
     b9a:	23 fc       	sbrc	r2, 3
     b9c:	1b c0       	rjmp	.+54     	; 0xbd4 <vfprintf+0x1aa>
     b9e:	83 2d       	mov	r24, r3
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	48 16       	cp	r4, r24
     ba4:	59 06       	cpc	r5, r25
     ba6:	b0 f4       	brcc	.+44     	; 0xbd4 <vfprintf+0x1aa>
     ba8:	b7 01       	movw	r22, r14
     baa:	80 e2       	ldi	r24, 0x20	; 32
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 47 08 	call	0x108e	; 0x108e <fputc>
     bb2:	3a 94       	dec	r3
     bb4:	f4 cf       	rjmp	.-24     	; 0xb9e <vfprintf+0x174>
     bb6:	f5 01       	movw	r30, r10
     bb8:	27 fc       	sbrc	r2, 7
     bba:	85 91       	lpm	r24, Z+
     bbc:	27 fe       	sbrs	r2, 7
     bbe:	81 91       	ld	r24, Z+
     bc0:	5f 01       	movw	r10, r30
     bc2:	b7 01       	movw	r22, r14
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 47 08 	call	0x108e	; 0x108e <fputc>
     bca:	31 10       	cpse	r3, r1
     bcc:	3a 94       	dec	r3
     bce:	f1 e0       	ldi	r31, 0x01	; 1
     bd0:	4f 1a       	sub	r4, r31
     bd2:	51 08       	sbc	r5, r1
     bd4:	41 14       	cp	r4, r1
     bd6:	51 04       	cpc	r5, r1
     bd8:	71 f7       	brne	.-36     	; 0xbb6 <vfprintf+0x18c>
     bda:	e5 c0       	rjmp	.+458    	; 0xda6 <vfprintf+0x37c>
     bdc:	84 36       	cpi	r24, 0x64	; 100
     bde:	11 f0       	breq	.+4      	; 0xbe4 <vfprintf+0x1ba>
     be0:	89 36       	cpi	r24, 0x69	; 105
     be2:	39 f5       	brne	.+78     	; 0xc32 <vfprintf+0x208>
     be4:	f8 01       	movw	r30, r16
     be6:	27 ff       	sbrs	r18, 7
     be8:	07 c0       	rjmp	.+14     	; 0xbf8 <vfprintf+0x1ce>
     bea:	60 81       	ld	r22, Z
     bec:	71 81       	ldd	r23, Z+1	; 0x01
     bee:	82 81       	ldd	r24, Z+2	; 0x02
     bf0:	93 81       	ldd	r25, Z+3	; 0x03
     bf2:	0c 5f       	subi	r16, 0xFC	; 252
     bf4:	1f 4f       	sbci	r17, 0xFF	; 255
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <vfprintf+0x1de>
     bf8:	60 81       	ld	r22, Z
     bfa:	71 81       	ldd	r23, Z+1	; 0x01
     bfc:	88 27       	eor	r24, r24
     bfe:	77 fd       	sbrc	r23, 7
     c00:	80 95       	com	r24
     c02:	98 2f       	mov	r25, r24
     c04:	0e 5f       	subi	r16, 0xFE	; 254
     c06:	1f 4f       	sbci	r17, 0xFF	; 255
     c08:	2f 76       	andi	r18, 0x6F	; 111
     c0a:	b2 2e       	mov	r11, r18
     c0c:	97 ff       	sbrs	r25, 7
     c0e:	09 c0       	rjmp	.+18     	; 0xc22 <vfprintf+0x1f8>
     c10:	90 95       	com	r25
     c12:	80 95       	com	r24
     c14:	70 95       	com	r23
     c16:	61 95       	neg	r22
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	8f 4f       	sbci	r24, 0xFF	; 255
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	20 68       	ori	r18, 0x80	; 128
     c20:	b2 2e       	mov	r11, r18
     c22:	2a e0       	ldi	r18, 0x0A	; 10
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	a4 01       	movw	r20, r8
     c28:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__ultoa_invert>
     c2c:	a8 2e       	mov	r10, r24
     c2e:	a8 18       	sub	r10, r8
     c30:	44 c0       	rjmp	.+136    	; 0xcba <vfprintf+0x290>
     c32:	85 37       	cpi	r24, 0x75	; 117
     c34:	29 f4       	brne	.+10     	; 0xc40 <vfprintf+0x216>
     c36:	2f 7e       	andi	r18, 0xEF	; 239
     c38:	b2 2e       	mov	r11, r18
     c3a:	2a e0       	ldi	r18, 0x0A	; 10
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	25 c0       	rjmp	.+74     	; 0xc8a <vfprintf+0x260>
     c40:	f2 2f       	mov	r31, r18
     c42:	f9 7f       	andi	r31, 0xF9	; 249
     c44:	bf 2e       	mov	r11, r31
     c46:	8f 36       	cpi	r24, 0x6F	; 111
     c48:	c1 f0       	breq	.+48     	; 0xc7a <vfprintf+0x250>
     c4a:	18 f4       	brcc	.+6      	; 0xc52 <vfprintf+0x228>
     c4c:	88 35       	cpi	r24, 0x58	; 88
     c4e:	79 f0       	breq	.+30     	; 0xc6e <vfprintf+0x244>
     c50:	b4 c0       	rjmp	.+360    	; 0xdba <vfprintf+0x390>
     c52:	80 37       	cpi	r24, 0x70	; 112
     c54:	19 f0       	breq	.+6      	; 0xc5c <vfprintf+0x232>
     c56:	88 37       	cpi	r24, 0x78	; 120
     c58:	21 f0       	breq	.+8      	; 0xc62 <vfprintf+0x238>
     c5a:	af c0       	rjmp	.+350    	; 0xdba <vfprintf+0x390>
     c5c:	2f 2f       	mov	r18, r31
     c5e:	20 61       	ori	r18, 0x10	; 16
     c60:	b2 2e       	mov	r11, r18
     c62:	b4 fe       	sbrs	r11, 4
     c64:	0d c0       	rjmp	.+26     	; 0xc80 <vfprintf+0x256>
     c66:	8b 2d       	mov	r24, r11
     c68:	84 60       	ori	r24, 0x04	; 4
     c6a:	b8 2e       	mov	r11, r24
     c6c:	09 c0       	rjmp	.+18     	; 0xc80 <vfprintf+0x256>
     c6e:	24 ff       	sbrs	r18, 4
     c70:	0a c0       	rjmp	.+20     	; 0xc86 <vfprintf+0x25c>
     c72:	9f 2f       	mov	r25, r31
     c74:	96 60       	ori	r25, 0x06	; 6
     c76:	b9 2e       	mov	r11, r25
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x25c>
     c7a:	28 e0       	ldi	r18, 0x08	; 8
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <vfprintf+0x260>
     c80:	20 e1       	ldi	r18, 0x10	; 16
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <vfprintf+0x260>
     c86:	20 e1       	ldi	r18, 0x10	; 16
     c88:	32 e0       	ldi	r19, 0x02	; 2
     c8a:	f8 01       	movw	r30, r16
     c8c:	b7 fe       	sbrs	r11, 7
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <vfprintf+0x274>
     c90:	60 81       	ld	r22, Z
     c92:	71 81       	ldd	r23, Z+1	; 0x01
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	93 81       	ldd	r25, Z+3	; 0x03
     c98:	0c 5f       	subi	r16, 0xFC	; 252
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <vfprintf+0x280>
     c9e:	60 81       	ld	r22, Z
     ca0:	71 81       	ldd	r23, Z+1	; 0x01
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 5f       	subi	r16, 0xFE	; 254
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	a4 01       	movw	r20, r8
     cac:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__ultoa_invert>
     cb0:	a8 2e       	mov	r10, r24
     cb2:	a8 18       	sub	r10, r8
     cb4:	fb 2d       	mov	r31, r11
     cb6:	ff 77       	andi	r31, 0x7F	; 127
     cb8:	bf 2e       	mov	r11, r31
     cba:	b6 fe       	sbrs	r11, 6
     cbc:	0b c0       	rjmp	.+22     	; 0xcd4 <vfprintf+0x2aa>
     cbe:	2b 2d       	mov	r18, r11
     cc0:	2e 7f       	andi	r18, 0xFE	; 254
     cc2:	a5 14       	cp	r10, r5
     cc4:	50 f4       	brcc	.+20     	; 0xcda <vfprintf+0x2b0>
     cc6:	b4 fe       	sbrs	r11, 4
     cc8:	0a c0       	rjmp	.+20     	; 0xcde <vfprintf+0x2b4>
     cca:	b2 fc       	sbrc	r11, 2
     ccc:	08 c0       	rjmp	.+16     	; 0xcde <vfprintf+0x2b4>
     cce:	2b 2d       	mov	r18, r11
     cd0:	2e 7e       	andi	r18, 0xEE	; 238
     cd2:	05 c0       	rjmp	.+10     	; 0xcde <vfprintf+0x2b4>
     cd4:	7a 2c       	mov	r7, r10
     cd6:	2b 2d       	mov	r18, r11
     cd8:	03 c0       	rjmp	.+6      	; 0xce0 <vfprintf+0x2b6>
     cda:	7a 2c       	mov	r7, r10
     cdc:	01 c0       	rjmp	.+2      	; 0xce0 <vfprintf+0x2b6>
     cde:	75 2c       	mov	r7, r5
     ce0:	24 ff       	sbrs	r18, 4
     ce2:	0d c0       	rjmp	.+26     	; 0xcfe <vfprintf+0x2d4>
     ce4:	fe 01       	movw	r30, r28
     ce6:	ea 0d       	add	r30, r10
     ce8:	f1 1d       	adc	r31, r1
     cea:	80 81       	ld	r24, Z
     cec:	80 33       	cpi	r24, 0x30	; 48
     cee:	11 f4       	brne	.+4      	; 0xcf4 <vfprintf+0x2ca>
     cf0:	29 7e       	andi	r18, 0xE9	; 233
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <vfprintf+0x2dc>
     cf4:	22 ff       	sbrs	r18, 2
     cf6:	06 c0       	rjmp	.+12     	; 0xd04 <vfprintf+0x2da>
     cf8:	73 94       	inc	r7
     cfa:	73 94       	inc	r7
     cfc:	04 c0       	rjmp	.+8      	; 0xd06 <vfprintf+0x2dc>
     cfe:	82 2f       	mov	r24, r18
     d00:	86 78       	andi	r24, 0x86	; 134
     d02:	09 f0       	breq	.+2      	; 0xd06 <vfprintf+0x2dc>
     d04:	73 94       	inc	r7
     d06:	23 fd       	sbrc	r18, 3
     d08:	13 c0       	rjmp	.+38     	; 0xd30 <vfprintf+0x306>
     d0a:	20 ff       	sbrs	r18, 0
     d0c:	06 c0       	rjmp	.+12     	; 0xd1a <vfprintf+0x2f0>
     d0e:	5a 2c       	mov	r5, r10
     d10:	73 14       	cp	r7, r3
     d12:	18 f4       	brcc	.+6      	; 0xd1a <vfprintf+0x2f0>
     d14:	53 0c       	add	r5, r3
     d16:	57 18       	sub	r5, r7
     d18:	73 2c       	mov	r7, r3
     d1a:	73 14       	cp	r7, r3
     d1c:	68 f4       	brcc	.+26     	; 0xd38 <vfprintf+0x30e>
     d1e:	b7 01       	movw	r22, r14
     d20:	80 e2       	ldi	r24, 0x20	; 32
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	2c 87       	std	Y+12, r18	; 0x0c
     d26:	0e 94 47 08 	call	0x108e	; 0x108e <fputc>
     d2a:	73 94       	inc	r7
     d2c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d2e:	f5 cf       	rjmp	.-22     	; 0xd1a <vfprintf+0x2f0>
     d30:	73 14       	cp	r7, r3
     d32:	10 f4       	brcc	.+4      	; 0xd38 <vfprintf+0x30e>
     d34:	37 18       	sub	r3, r7
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <vfprintf+0x310>
     d38:	31 2c       	mov	r3, r1
     d3a:	24 ff       	sbrs	r18, 4
     d3c:	12 c0       	rjmp	.+36     	; 0xd62 <vfprintf+0x338>
     d3e:	b7 01       	movw	r22, r14
     d40:	80 e3       	ldi	r24, 0x30	; 48
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	2c 87       	std	Y+12, r18	; 0x0c
     d46:	0e 94 47 08 	call	0x108e	; 0x108e <fputc>
     d4a:	2c 85       	ldd	r18, Y+12	; 0x0c
     d4c:	22 ff       	sbrs	r18, 2
     d4e:	17 c0       	rjmp	.+46     	; 0xd7e <vfprintf+0x354>
     d50:	21 ff       	sbrs	r18, 1
     d52:	03 c0       	rjmp	.+6      	; 0xd5a <vfprintf+0x330>
     d54:	88 e5       	ldi	r24, 0x58	; 88
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <vfprintf+0x334>
     d5a:	88 e7       	ldi	r24, 0x78	; 120
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	b7 01       	movw	r22, r14
     d60:	0c c0       	rjmp	.+24     	; 0xd7a <vfprintf+0x350>
     d62:	82 2f       	mov	r24, r18
     d64:	86 78       	andi	r24, 0x86	; 134
     d66:	59 f0       	breq	.+22     	; 0xd7e <vfprintf+0x354>
     d68:	21 fd       	sbrc	r18, 1
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <vfprintf+0x346>
     d6c:	80 e2       	ldi	r24, 0x20	; 32
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <vfprintf+0x348>
     d70:	8b e2       	ldi	r24, 0x2B	; 43
     d72:	27 fd       	sbrc	r18, 7
     d74:	8d e2       	ldi	r24, 0x2D	; 45
     d76:	b7 01       	movw	r22, r14
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 47 08 	call	0x108e	; 0x108e <fputc>
     d7e:	a5 14       	cp	r10, r5
     d80:	38 f4       	brcc	.+14     	; 0xd90 <vfprintf+0x366>
     d82:	b7 01       	movw	r22, r14
     d84:	80 e3       	ldi	r24, 0x30	; 48
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 47 08 	call	0x108e	; 0x108e <fputc>
     d8c:	5a 94       	dec	r5
     d8e:	f7 cf       	rjmp	.-18     	; 0xd7e <vfprintf+0x354>
     d90:	aa 94       	dec	r10
     d92:	f4 01       	movw	r30, r8
     d94:	ea 0d       	add	r30, r10
     d96:	f1 1d       	adc	r31, r1
     d98:	80 81       	ld	r24, Z
     d9a:	b7 01       	movw	r22, r14
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 47 08 	call	0x108e	; 0x108e <fputc>
     da2:	a1 10       	cpse	r10, r1
     da4:	f5 cf       	rjmp	.-22     	; 0xd90 <vfprintf+0x366>
     da6:	33 20       	and	r3, r3
     da8:	09 f4       	brne	.+2      	; 0xdac <vfprintf+0x382>
     daa:	51 ce       	rjmp	.-862    	; 0xa4e <vfprintf+0x24>
     dac:	b7 01       	movw	r22, r14
     dae:	80 e2       	ldi	r24, 0x20	; 32
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 47 08 	call	0x108e	; 0x108e <fputc>
     db6:	3a 94       	dec	r3
     db8:	f6 cf       	rjmp	.-20     	; 0xda6 <vfprintf+0x37c>
     dba:	f7 01       	movw	r30, r14
     dbc:	86 81       	ldd	r24, Z+6	; 0x06
     dbe:	97 81       	ldd	r25, Z+7	; 0x07
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <vfprintf+0x39c>
     dc2:	8f ef       	ldi	r24, 0xFF	; 255
     dc4:	9f ef       	ldi	r25, 0xFF	; 255
     dc6:	2c 96       	adiw	r28, 0x0c	; 12
     dc8:	e2 e1       	ldi	r30, 0x12	; 18
     dca:	0c 94 f3 08 	jmp	0x11e6	; 0x11e6 <__epilogue_restores__>

00000dce <calloc>:
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	86 9f       	mul	r24, r22
     dd8:	80 01       	movw	r16, r0
     dda:	87 9f       	mul	r24, r23
     ddc:	10 0d       	add	r17, r0
     dde:	96 9f       	mul	r25, r22
     de0:	10 0d       	add	r17, r0
     de2:	11 24       	eor	r1, r1
     de4:	c8 01       	movw	r24, r16
     de6:	0e 94 03 07 	call	0xe06	; 0xe06 <malloc>
     dea:	ec 01       	movw	r28, r24
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	29 f0       	breq	.+10     	; 0xdfa <calloc+0x2c>
     df0:	a8 01       	movw	r20, r16
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	0e 94 35 08 	call	0x106a	; 0x106a <memset>
     dfa:	ce 01       	movw	r24, r28
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	08 95       	ret

00000e06 <malloc>:
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	82 30       	cpi	r24, 0x02	; 2
     e0c:	91 05       	cpc	r25, r1
     e0e:	10 f4       	brcc	.+4      	; 0xe14 <malloc+0xe>
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	e0 91 84 01 	lds	r30, 0x0184
     e18:	f0 91 85 01 	lds	r31, 0x0185
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	a0 e0       	ldi	r26, 0x00	; 0
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	30 97       	sbiw	r30, 0x00	; 0
     e26:	39 f1       	breq	.+78     	; 0xe76 <malloc+0x70>
     e28:	40 81       	ld	r20, Z
     e2a:	51 81       	ldd	r21, Z+1	; 0x01
     e2c:	48 17       	cp	r20, r24
     e2e:	59 07       	cpc	r21, r25
     e30:	b8 f0       	brcs	.+46     	; 0xe60 <malloc+0x5a>
     e32:	48 17       	cp	r20, r24
     e34:	59 07       	cpc	r21, r25
     e36:	71 f4       	brne	.+28     	; 0xe54 <malloc+0x4e>
     e38:	82 81       	ldd	r24, Z+2	; 0x02
     e3a:	93 81       	ldd	r25, Z+3	; 0x03
     e3c:	10 97       	sbiw	r26, 0x00	; 0
     e3e:	29 f0       	breq	.+10     	; 0xe4a <malloc+0x44>
     e40:	13 96       	adiw	r26, 0x03	; 3
     e42:	9c 93       	st	X, r25
     e44:	8e 93       	st	-X, r24
     e46:	12 97       	sbiw	r26, 0x02	; 2
     e48:	2c c0       	rjmp	.+88     	; 0xea2 <malloc+0x9c>
     e4a:	90 93 85 01 	sts	0x0185, r25
     e4e:	80 93 84 01 	sts	0x0184, r24
     e52:	27 c0       	rjmp	.+78     	; 0xea2 <malloc+0x9c>
     e54:	21 15       	cp	r18, r1
     e56:	31 05       	cpc	r19, r1
     e58:	31 f0       	breq	.+12     	; 0xe66 <malloc+0x60>
     e5a:	42 17       	cp	r20, r18
     e5c:	53 07       	cpc	r21, r19
     e5e:	18 f0       	brcs	.+6      	; 0xe66 <malloc+0x60>
     e60:	a9 01       	movw	r20, r18
     e62:	db 01       	movw	r26, r22
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <malloc+0x62>
     e66:	ef 01       	movw	r28, r30
     e68:	9a 01       	movw	r18, r20
     e6a:	bd 01       	movw	r22, r26
     e6c:	df 01       	movw	r26, r30
     e6e:	02 80       	ldd	r0, Z+2	; 0x02
     e70:	f3 81       	ldd	r31, Z+3	; 0x03
     e72:	e0 2d       	mov	r30, r0
     e74:	d7 cf       	rjmp	.-82     	; 0xe24 <malloc+0x1e>
     e76:	21 15       	cp	r18, r1
     e78:	31 05       	cpc	r19, r1
     e7a:	f9 f0       	breq	.+62     	; 0xeba <malloc+0xb4>
     e7c:	28 1b       	sub	r18, r24
     e7e:	39 0b       	sbc	r19, r25
     e80:	24 30       	cpi	r18, 0x04	; 4
     e82:	31 05       	cpc	r19, r1
     e84:	80 f4       	brcc	.+32     	; 0xea6 <malloc+0xa0>
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	9b 81       	ldd	r25, Y+3	; 0x03
     e8a:	61 15       	cp	r22, r1
     e8c:	71 05       	cpc	r23, r1
     e8e:	21 f0       	breq	.+8      	; 0xe98 <malloc+0x92>
     e90:	fb 01       	movw	r30, r22
     e92:	93 83       	std	Z+3, r25	; 0x03
     e94:	82 83       	std	Z+2, r24	; 0x02
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <malloc+0x9a>
     e98:	90 93 85 01 	sts	0x0185, r25
     e9c:	80 93 84 01 	sts	0x0184, r24
     ea0:	fe 01       	movw	r30, r28
     ea2:	32 96       	adiw	r30, 0x02	; 2
     ea4:	44 c0       	rjmp	.+136    	; 0xf2e <malloc+0x128>
     ea6:	fe 01       	movw	r30, r28
     ea8:	e2 0f       	add	r30, r18
     eaa:	f3 1f       	adc	r31, r19
     eac:	81 93       	st	Z+, r24
     eae:	91 93       	st	Z+, r25
     eb0:	22 50       	subi	r18, 0x02	; 2
     eb2:	31 09       	sbc	r19, r1
     eb4:	39 83       	std	Y+1, r19	; 0x01
     eb6:	28 83       	st	Y, r18
     eb8:	3a c0       	rjmp	.+116    	; 0xf2e <malloc+0x128>
     eba:	20 91 82 01 	lds	r18, 0x0182
     ebe:	30 91 83 01 	lds	r19, 0x0183
     ec2:	23 2b       	or	r18, r19
     ec4:	41 f4       	brne	.+16     	; 0xed6 <malloc+0xd0>
     ec6:	20 91 02 01 	lds	r18, 0x0102
     eca:	30 91 03 01 	lds	r19, 0x0103
     ece:	30 93 83 01 	sts	0x0183, r19
     ed2:	20 93 82 01 	sts	0x0182, r18
     ed6:	20 91 00 01 	lds	r18, 0x0100
     eda:	30 91 01 01 	lds	r19, 0x0101
     ede:	21 15       	cp	r18, r1
     ee0:	31 05       	cpc	r19, r1
     ee2:	41 f4       	brne	.+16     	; 0xef4 <malloc+0xee>
     ee4:	2d b7       	in	r18, 0x3d	; 61
     ee6:	3e b7       	in	r19, 0x3e	; 62
     ee8:	40 91 04 01 	lds	r20, 0x0104
     eec:	50 91 05 01 	lds	r21, 0x0105
     ef0:	24 1b       	sub	r18, r20
     ef2:	35 0b       	sbc	r19, r21
     ef4:	e0 91 82 01 	lds	r30, 0x0182
     ef8:	f0 91 83 01 	lds	r31, 0x0183
     efc:	e2 17       	cp	r30, r18
     efe:	f3 07       	cpc	r31, r19
     f00:	a0 f4       	brcc	.+40     	; 0xf2a <malloc+0x124>
     f02:	2e 1b       	sub	r18, r30
     f04:	3f 0b       	sbc	r19, r31
     f06:	28 17       	cp	r18, r24
     f08:	39 07       	cpc	r19, r25
     f0a:	78 f0       	brcs	.+30     	; 0xf2a <malloc+0x124>
     f0c:	ac 01       	movw	r20, r24
     f0e:	4e 5f       	subi	r20, 0xFE	; 254
     f10:	5f 4f       	sbci	r21, 0xFF	; 255
     f12:	24 17       	cp	r18, r20
     f14:	35 07       	cpc	r19, r21
     f16:	48 f0       	brcs	.+18     	; 0xf2a <malloc+0x124>
     f18:	4e 0f       	add	r20, r30
     f1a:	5f 1f       	adc	r21, r31
     f1c:	50 93 83 01 	sts	0x0183, r21
     f20:	40 93 82 01 	sts	0x0182, r20
     f24:	81 93       	st	Z+, r24
     f26:	91 93       	st	Z+, r25
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <malloc+0x128>
     f2a:	e0 e0       	ldi	r30, 0x00	; 0
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	cf 01       	movw	r24, r30
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <free>:
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	09 f4       	brne	.+2      	; 0xf40 <free+0xa>
     f3e:	87 c0       	rjmp	.+270    	; 0x104e <free+0x118>
     f40:	fc 01       	movw	r30, r24
     f42:	32 97       	sbiw	r30, 0x02	; 2
     f44:	13 82       	std	Z+3, r1	; 0x03
     f46:	12 82       	std	Z+2, r1	; 0x02
     f48:	c0 91 84 01 	lds	r28, 0x0184
     f4c:	d0 91 85 01 	lds	r29, 0x0185
     f50:	20 97       	sbiw	r28, 0x00	; 0
     f52:	81 f4       	brne	.+32     	; 0xf74 <free+0x3e>
     f54:	20 81       	ld	r18, Z
     f56:	31 81       	ldd	r19, Z+1	; 0x01
     f58:	28 0f       	add	r18, r24
     f5a:	39 1f       	adc	r19, r25
     f5c:	80 91 82 01 	lds	r24, 0x0182
     f60:	90 91 83 01 	lds	r25, 0x0183
     f64:	82 17       	cp	r24, r18
     f66:	93 07       	cpc	r25, r19
     f68:	79 f5       	brne	.+94     	; 0xfc8 <free+0x92>
     f6a:	f0 93 83 01 	sts	0x0183, r31
     f6e:	e0 93 82 01 	sts	0x0182, r30
     f72:	6d c0       	rjmp	.+218    	; 0x104e <free+0x118>
     f74:	de 01       	movw	r26, r28
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	ae 17       	cp	r26, r30
     f7c:	bf 07       	cpc	r27, r31
     f7e:	50 f4       	brcc	.+20     	; 0xf94 <free+0x5e>
     f80:	12 96       	adiw	r26, 0x02	; 2
     f82:	4d 91       	ld	r20, X+
     f84:	5c 91       	ld	r21, X
     f86:	13 97       	sbiw	r26, 0x03	; 3
     f88:	9d 01       	movw	r18, r26
     f8a:	41 15       	cp	r20, r1
     f8c:	51 05       	cpc	r21, r1
     f8e:	09 f1       	breq	.+66     	; 0xfd2 <free+0x9c>
     f90:	da 01       	movw	r26, r20
     f92:	f3 cf       	rjmp	.-26     	; 0xf7a <free+0x44>
     f94:	b3 83       	std	Z+3, r27	; 0x03
     f96:	a2 83       	std	Z+2, r26	; 0x02
     f98:	40 81       	ld	r20, Z
     f9a:	51 81       	ldd	r21, Z+1	; 0x01
     f9c:	84 0f       	add	r24, r20
     f9e:	95 1f       	adc	r25, r21
     fa0:	8a 17       	cp	r24, r26
     fa2:	9b 07       	cpc	r25, r27
     fa4:	71 f4       	brne	.+28     	; 0xfc2 <free+0x8c>
     fa6:	8d 91       	ld	r24, X+
     fa8:	9c 91       	ld	r25, X
     faa:	11 97       	sbiw	r26, 0x01	; 1
     fac:	84 0f       	add	r24, r20
     fae:	95 1f       	adc	r25, r21
     fb0:	02 96       	adiw	r24, 0x02	; 2
     fb2:	91 83       	std	Z+1, r25	; 0x01
     fb4:	80 83       	st	Z, r24
     fb6:	12 96       	adiw	r26, 0x02	; 2
     fb8:	8d 91       	ld	r24, X+
     fba:	9c 91       	ld	r25, X
     fbc:	13 97       	sbiw	r26, 0x03	; 3
     fbe:	93 83       	std	Z+3, r25	; 0x03
     fc0:	82 83       	std	Z+2, r24	; 0x02
     fc2:	21 15       	cp	r18, r1
     fc4:	31 05       	cpc	r19, r1
     fc6:	29 f4       	brne	.+10     	; 0xfd2 <free+0x9c>
     fc8:	f0 93 85 01 	sts	0x0185, r31
     fcc:	e0 93 84 01 	sts	0x0184, r30
     fd0:	3e c0       	rjmp	.+124    	; 0x104e <free+0x118>
     fd2:	d9 01       	movw	r26, r18
     fd4:	13 96       	adiw	r26, 0x03	; 3
     fd6:	fc 93       	st	X, r31
     fd8:	ee 93       	st	-X, r30
     fda:	12 97       	sbiw	r26, 0x02	; 2
     fdc:	4d 91       	ld	r20, X+
     fde:	5d 91       	ld	r21, X+
     fe0:	a4 0f       	add	r26, r20
     fe2:	b5 1f       	adc	r27, r21
     fe4:	ea 17       	cp	r30, r26
     fe6:	fb 07       	cpc	r31, r27
     fe8:	79 f4       	brne	.+30     	; 0x1008 <free+0xd2>
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	84 0f       	add	r24, r20
     ff0:	95 1f       	adc	r25, r21
     ff2:	02 96       	adiw	r24, 0x02	; 2
     ff4:	d9 01       	movw	r26, r18
     ff6:	11 96       	adiw	r26, 0x01	; 1
     ff8:	9c 93       	st	X, r25
     ffa:	8e 93       	st	-X, r24
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	13 96       	adiw	r26, 0x03	; 3
    1002:	9c 93       	st	X, r25
    1004:	8e 93       	st	-X, r24
    1006:	12 97       	sbiw	r26, 0x02	; 2
    1008:	e0 e0       	ldi	r30, 0x00	; 0
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	19 f0       	breq	.+6      	; 0x101a <free+0xe4>
    1014:	fe 01       	movw	r30, r28
    1016:	ec 01       	movw	r28, r24
    1018:	f9 cf       	rjmp	.-14     	; 0x100c <free+0xd6>
    101a:	ce 01       	movw	r24, r28
    101c:	02 96       	adiw	r24, 0x02	; 2
    101e:	28 81       	ld	r18, Y
    1020:	39 81       	ldd	r19, Y+1	; 0x01
    1022:	82 0f       	add	r24, r18
    1024:	93 1f       	adc	r25, r19
    1026:	20 91 82 01 	lds	r18, 0x0182
    102a:	30 91 83 01 	lds	r19, 0x0183
    102e:	28 17       	cp	r18, r24
    1030:	39 07       	cpc	r19, r25
    1032:	69 f4       	brne	.+26     	; 0x104e <free+0x118>
    1034:	30 97       	sbiw	r30, 0x00	; 0
    1036:	29 f4       	brne	.+10     	; 0x1042 <free+0x10c>
    1038:	10 92 85 01 	sts	0x0185, r1
    103c:	10 92 84 01 	sts	0x0184, r1
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <free+0x110>
    1042:	13 82       	std	Z+3, r1	; 0x03
    1044:	12 82       	std	Z+2, r1	; 0x02
    1046:	d0 93 83 01 	sts	0x0183, r29
    104a:	c0 93 82 01 	sts	0x0182, r28
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <strnlen_P>:
    1054:	fc 01       	movw	r30, r24
    1056:	05 90       	lpm	r0, Z+
    1058:	61 50       	subi	r22, 0x01	; 1
    105a:	70 40       	sbci	r23, 0x00	; 0
    105c:	01 10       	cpse	r0, r1
    105e:	d8 f7       	brcc	.-10     	; 0x1056 <strnlen_P+0x2>
    1060:	80 95       	com	r24
    1062:	90 95       	com	r25
    1064:	8e 0f       	add	r24, r30
    1066:	9f 1f       	adc	r25, r31
    1068:	08 95       	ret

0000106a <memset>:
    106a:	dc 01       	movw	r26, r24
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <memset+0x6>
    106e:	6d 93       	st	X+, r22
    1070:	41 50       	subi	r20, 0x01	; 1
    1072:	50 40       	sbci	r21, 0x00	; 0
    1074:	e0 f7       	brcc	.-8      	; 0x106e <memset+0x4>
    1076:	08 95       	ret

00001078 <strnlen>:
    1078:	fc 01       	movw	r30, r24
    107a:	61 50       	subi	r22, 0x01	; 1
    107c:	70 40       	sbci	r23, 0x00	; 0
    107e:	01 90       	ld	r0, Z+
    1080:	01 10       	cpse	r0, r1
    1082:	d8 f7       	brcc	.-10     	; 0x107a <strnlen+0x2>
    1084:	80 95       	com	r24
    1086:	90 95       	com	r25
    1088:	8e 0f       	add	r24, r30
    108a:	9f 1f       	adc	r25, r31
    108c:	08 95       	ret

0000108e <fputc>:
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	18 2f       	mov	r17, r24
    1098:	09 2f       	mov	r16, r25
    109a:	eb 01       	movw	r28, r22
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	81 fd       	sbrc	r24, 1
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <fputc+0x1a>
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	9f ef       	ldi	r25, 0xFF	; 255
    10a6:	20 c0       	rjmp	.+64     	; 0x10e8 <fputc+0x5a>
    10a8:	82 ff       	sbrs	r24, 2
    10aa:	10 c0       	rjmp	.+32     	; 0x10cc <fputc+0x3e>
    10ac:	4e 81       	ldd	r20, Y+6	; 0x06
    10ae:	5f 81       	ldd	r21, Y+7	; 0x07
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	3d 81       	ldd	r19, Y+5	; 0x05
    10b4:	42 17       	cp	r20, r18
    10b6:	53 07       	cpc	r21, r19
    10b8:	7c f4       	brge	.+30     	; 0x10d8 <fputc+0x4a>
    10ba:	e8 81       	ld	r30, Y
    10bc:	f9 81       	ldd	r31, Y+1	; 0x01
    10be:	9f 01       	movw	r18, r30
    10c0:	2f 5f       	subi	r18, 0xFF	; 255
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	39 83       	std	Y+1, r19	; 0x01
    10c6:	28 83       	st	Y, r18
    10c8:	10 83       	st	Z, r17
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <fputc+0x4a>
    10cc:	e8 85       	ldd	r30, Y+8	; 0x08
    10ce:	f9 85       	ldd	r31, Y+9	; 0x09
    10d0:	81 2f       	mov	r24, r17
    10d2:	09 95       	icall
    10d4:	89 2b       	or	r24, r25
    10d6:	29 f7       	brne	.-54     	; 0x10a2 <fputc+0x14>
    10d8:	2e 81       	ldd	r18, Y+6	; 0x06
    10da:	3f 81       	ldd	r19, Y+7	; 0x07
    10dc:	2f 5f       	subi	r18, 0xFF	; 255
    10de:	3f 4f       	sbci	r19, 0xFF	; 255
    10e0:	3f 83       	std	Y+7, r19	; 0x07
    10e2:	2e 83       	std	Y+6, r18	; 0x06
    10e4:	81 2f       	mov	r24, r17
    10e6:	90 2f       	mov	r25, r16
    10e8:	df 91       	pop	r29
    10ea:	cf 91       	pop	r28
    10ec:	1f 91       	pop	r17
    10ee:	0f 91       	pop	r16
    10f0:	08 95       	ret

000010f2 <__ultoa_invert>:
    10f2:	fa 01       	movw	r30, r20
    10f4:	aa 27       	eor	r26, r26
    10f6:	28 30       	cpi	r18, 0x08	; 8
    10f8:	51 f1       	breq	.+84     	; 0x114e <__ultoa_invert+0x5c>
    10fa:	20 31       	cpi	r18, 0x10	; 16
    10fc:	81 f1       	breq	.+96     	; 0x115e <__ultoa_invert+0x6c>
    10fe:	e8 94       	clt
    1100:	6f 93       	push	r22
    1102:	6e 7f       	andi	r22, 0xFE	; 254
    1104:	6e 5f       	subi	r22, 0xFE	; 254
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	8f 4f       	sbci	r24, 0xFF	; 255
    110a:	9f 4f       	sbci	r25, 0xFF	; 255
    110c:	af 4f       	sbci	r26, 0xFF	; 255
    110e:	b1 e0       	ldi	r27, 0x01	; 1
    1110:	3e d0       	rcall	.+124    	; 0x118e <__ultoa_invert+0x9c>
    1112:	b4 e0       	ldi	r27, 0x04	; 4
    1114:	3c d0       	rcall	.+120    	; 0x118e <__ultoa_invert+0x9c>
    1116:	67 0f       	add	r22, r23
    1118:	78 1f       	adc	r23, r24
    111a:	89 1f       	adc	r24, r25
    111c:	9a 1f       	adc	r25, r26
    111e:	a1 1d       	adc	r26, r1
    1120:	68 0f       	add	r22, r24
    1122:	79 1f       	adc	r23, r25
    1124:	8a 1f       	adc	r24, r26
    1126:	91 1d       	adc	r25, r1
    1128:	a1 1d       	adc	r26, r1
    112a:	6a 0f       	add	r22, r26
    112c:	71 1d       	adc	r23, r1
    112e:	81 1d       	adc	r24, r1
    1130:	91 1d       	adc	r25, r1
    1132:	a1 1d       	adc	r26, r1
    1134:	20 d0       	rcall	.+64     	; 0x1176 <__ultoa_invert+0x84>
    1136:	09 f4       	brne	.+2      	; 0x113a <__ultoa_invert+0x48>
    1138:	68 94       	set
    113a:	3f 91       	pop	r19
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	26 9f       	mul	r18, r22
    1140:	11 24       	eor	r1, r1
    1142:	30 19       	sub	r19, r0
    1144:	30 5d       	subi	r19, 0xD0	; 208
    1146:	31 93       	st	Z+, r19
    1148:	de f6       	brtc	.-74     	; 0x1100 <__ultoa_invert+0xe>
    114a:	cf 01       	movw	r24, r30
    114c:	08 95       	ret
    114e:	46 2f       	mov	r20, r22
    1150:	47 70       	andi	r20, 0x07	; 7
    1152:	40 5d       	subi	r20, 0xD0	; 208
    1154:	41 93       	st	Z+, r20
    1156:	b3 e0       	ldi	r27, 0x03	; 3
    1158:	0f d0       	rcall	.+30     	; 0x1178 <__ultoa_invert+0x86>
    115a:	c9 f7       	brne	.-14     	; 0x114e <__ultoa_invert+0x5c>
    115c:	f6 cf       	rjmp	.-20     	; 0x114a <__ultoa_invert+0x58>
    115e:	46 2f       	mov	r20, r22
    1160:	4f 70       	andi	r20, 0x0F	; 15
    1162:	40 5d       	subi	r20, 0xD0	; 208
    1164:	4a 33       	cpi	r20, 0x3A	; 58
    1166:	18 f0       	brcs	.+6      	; 0x116e <__ultoa_invert+0x7c>
    1168:	49 5d       	subi	r20, 0xD9	; 217
    116a:	31 fd       	sbrc	r19, 1
    116c:	40 52       	subi	r20, 0x20	; 32
    116e:	41 93       	st	Z+, r20
    1170:	02 d0       	rcall	.+4      	; 0x1176 <__ultoa_invert+0x84>
    1172:	a9 f7       	brne	.-22     	; 0x115e <__ultoa_invert+0x6c>
    1174:	ea cf       	rjmp	.-44     	; 0x114a <__ultoa_invert+0x58>
    1176:	b4 e0       	ldi	r27, 0x04	; 4
    1178:	a6 95       	lsr	r26
    117a:	97 95       	ror	r25
    117c:	87 95       	ror	r24
    117e:	77 95       	ror	r23
    1180:	67 95       	ror	r22
    1182:	ba 95       	dec	r27
    1184:	c9 f7       	brne	.-14     	; 0x1178 <__ultoa_invert+0x86>
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	61 05       	cpc	r22, r1
    118a:	71 05       	cpc	r23, r1
    118c:	08 95       	ret
    118e:	9b 01       	movw	r18, r22
    1190:	ac 01       	movw	r20, r24
    1192:	0a 2e       	mov	r0, r26
    1194:	06 94       	lsr	r0
    1196:	57 95       	ror	r21
    1198:	47 95       	ror	r20
    119a:	37 95       	ror	r19
    119c:	27 95       	ror	r18
    119e:	ba 95       	dec	r27
    11a0:	c9 f7       	brne	.-14     	; 0x1194 <__ultoa_invert+0xa2>
    11a2:	62 0f       	add	r22, r18
    11a4:	73 1f       	adc	r23, r19
    11a6:	84 1f       	adc	r24, r20
    11a8:	95 1f       	adc	r25, r21
    11aa:	a0 1d       	adc	r26, r0
    11ac:	08 95       	ret

000011ae <__prologue_saves__>:
    11ae:	2f 92       	push	r2
    11b0:	3f 92       	push	r3
    11b2:	4f 92       	push	r4
    11b4:	5f 92       	push	r5
    11b6:	6f 92       	push	r6
    11b8:	7f 92       	push	r7
    11ba:	8f 92       	push	r8
    11bc:	9f 92       	push	r9
    11be:	af 92       	push	r10
    11c0:	bf 92       	push	r11
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	ca 1b       	sub	r28, r26
    11d8:	db 0b       	sbc	r29, r27
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	09 94       	ijmp

000011e6 <__epilogue_restores__>:
    11e6:	2a 88       	ldd	r2, Y+18	; 0x12
    11e8:	39 88       	ldd	r3, Y+17	; 0x11
    11ea:	48 88       	ldd	r4, Y+16	; 0x10
    11ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    11ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    11f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    11f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    11f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    11f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    11f8:	b9 84       	ldd	r11, Y+9	; 0x09
    11fa:	c8 84       	ldd	r12, Y+8	; 0x08
    11fc:	df 80       	ldd	r13, Y+7	; 0x07
    11fe:	ee 80       	ldd	r14, Y+6	; 0x06
    1200:	fd 80       	ldd	r15, Y+5	; 0x05
    1202:	0c 81       	ldd	r16, Y+4	; 0x04
    1204:	1b 81       	ldd	r17, Y+3	; 0x03
    1206:	aa 81       	ldd	r26, Y+2	; 0x02
    1208:	b9 81       	ldd	r27, Y+1	; 0x01
    120a:	ce 0f       	add	r28, r30
    120c:	d1 1d       	adc	r29, r1
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	ed 01       	movw	r28, r26
    121a:	08 95       	ret

0000121c <_exit>:
    121c:	f8 94       	cli

0000121e <__stop_program>:
    121e:	ff cf       	rjmp	.-2      	; 0x121e <__stop_program>
