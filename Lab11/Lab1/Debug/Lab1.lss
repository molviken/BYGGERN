
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000190  00800100  00001628  000016bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800290  00800290  0000184c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000184c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002f8  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003727  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f4c  00000000  00000000  000052c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fae  00000000  00000000  00006213  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000778  00000000  00000000  000071c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008bc  00000000  00000000  0000793c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001846  00000000  00000000  000081f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  00009a3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <menu_create+0x1ba>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 e2       	ldi	r30, 0x28	; 40
     37c:	f6 e1       	ldi	r31, 0x16	; 22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 39       	cpi	r26, 0x90	; 144
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a0 e9       	ldi	r26, 0x90	; 144
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 39       	cpi	r26, 0x9E	; 158
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 a4 03 	call	0x748	; 0x748 <main>
     39e:	0c 94 12 0b 	jmp	0x1624	; 0x1624 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
#include <string.h>
#include "uart.h"
#include <avr/io.h>
#include <util/delay.h>
void adc_init(void){
	set_bit(MCUCR,SRE);
     3a6:	85 b7       	in	r24, 0x35	; 53
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
     3ac:	80 b7       	in	r24, 0x30	; 48
     3ae:	80 62       	ori	r24, 0x20	; 32
     3b0:	80 bf       	out	0x30, r24	; 48
	clear_bit(DDRE,DDE0);
     3b2:	30 98       	cbi	0x06, 0	; 6
     3b4:	08 95       	ret

000003b6 <adc_read>:
}

uint8_t adc_read(uint8_t channel){
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	1f 92       	push	r1
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
	
	volatile char* adc_adr = (char *) 0x1400;
	adc_adr[0] = channel;
     3c0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c4:	92 e4       	ldi	r25, 0x42	; 66
     3c6:	9a 95       	dec	r25
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <adc_read+0x10>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <adc_read+0x16>
	_delay_us(200);
	volatile uint8_t retreived_value = adc_adr[channel];
     3cc:	e8 2f       	mov	r30, r24
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	fc 5e       	subi	r31, 0xEC	; 236
     3d2:	80 81       	ld	r24, Z
     3d4:	89 83       	std	Y+1, r24	; 0x01
	return retreived_value;
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <CAN_init>:
#include "MCPkontroll.h"
#include "joystick.h"
uint8_t rx_flag = 0;

void CAN_init(){
	MCP_init();
     3e0:	0e 94 3e 04 	call	0x87c	; 0x87c <MCP_init>
	// Turn mask/filters off
	MCP_bit_mod(MCP_RXB0CTRL, 0b01100100, 0xFF);
     3e4:	4f ef       	ldi	r20, 0xFF	; 255
     3e6:	64 e6       	ldi	r22, 0x64	; 100
     3e8:	80 e6       	ldi	r24, 0x60	; 96
     3ea:	0e 94 12 04 	call	0x824	; 0x824 <MCP_bit_mod>
	
	// Set LoopBack mode on
	MCP_bit_mod(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); // MCP_CANCTRL = MODE_LOOPBACK;
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	60 ee       	ldi	r22, 0xE0	; 224
     3f2:	8f e0       	ldi	r24, 0x0F	; 15
     3f4:	0e 94 12 04 	call	0x824	; 0x824 <MCP_bit_mod>
	
	// Enable interrupt when a valid message has been received
	MCP_bit_mod(MCP_CANINTE, MCP_RX0IF, 1);
     3f8:	41 e0       	ldi	r20, 0x01	; 1
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	8b e2       	ldi	r24, 0x2B	; 43
     3fe:	0e 94 12 04 	call	0x824	; 0x824 <MCP_bit_mod>
	MCP_bit_mod(MCP_CANINTE, MCP_TX0IF, 1);
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	64 e0       	ldi	r22, 0x04	; 4
     406:	8b e2       	ldi	r24, 0x2B	; 43
     408:	0e 94 12 04 	call	0x824	; 0x824 <MCP_bit_mod>
	if ((MCP_read(MCP_CANSTAT) & MODE_MASK) != MODE_NORMAL)
     40c:	8e e0       	ldi	r24, 0x0E	; 14
     40e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
	{
		//printf("NOT in NORMAL mode!\n");
	}
	
	MCP_read(MCP_CANCTRL);
     412:	8f e0       	ldi	r24, 0x0F	; 15
     414:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
     418:	08 95       	ret

0000041a <CAN_check_error>:
	}
	return 0;
}

int CAN_check_error(void){
	uint8_t error = MCP_read(MCP_TXB0CTRL);
     41a:	80 e3       	ldi	r24, 0x30	; 48
     41c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
	// Checking transmission error
	if(test_bit(error,4)){return -1;}
     420:	84 fd       	sbrc	r24, 4
     422:	05 c0       	rjmp	.+10     	; 0x42e <CAN_check_error+0x14>
		
	// checking for message lost arbitration
	if(test_bit(error,5)){return -2;}
     424:	85 ff       	sbrs	r24, 5
     426:	06 c0       	rjmp	.+12     	; 0x434 <CAN_check_error+0x1a>
     428:	8e ef       	ldi	r24, 0xFE	; 254
     42a:	9f ef       	ldi	r25, 0xFF	; 255
     42c:	08 95       	ret
}

int CAN_check_error(void){
	uint8_t error = MCP_read(MCP_TXB0CTRL);
	// Checking transmission error
	if(test_bit(error,4)){return -1;}
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	9f ef       	ldi	r25, 0xFF	; 255
     432:	08 95       	ret
		
	// checking for message lost arbitration
	if(test_bit(error,5)){return -2;}
	else{return 1;}
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
}
     438:	08 95       	ret

0000043a <CAN_completed_transmit>:

int CAN_completed_transmit(void){
	if (test_bit(MCP_read(MCP_TXB0CTRL),3)){
     43a:	80 e3       	ldi	r24, 0x30	; 48
     43c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
     440:	86 95       	lsr	r24
     442:	86 95       	lsr	r24
     444:	86 95       	lsr	r24
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	89 27       	eor	r24, r25
	}
	else{
		return 1;
	}
	
}
     44a:	81 70       	andi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	08 95       	ret

00000450 <CAN_transmit>:
	
	MCP_read(MCP_CANCTRL);
	
}

int CAN_transmit(struct CAN_message message){
     450:	ef 92       	push	r14
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	2a 97       	sbiw	r28, 0x0a	; 10
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	09 83       	std	Y+1, r16	; 0x01
     46e:	e1 2e       	mov	r14, r17
     470:	1a 83       	std	Y+2, r17	; 0x02
     472:	2b 83       	std	Y+3, r18	; 0x03
     474:	3c 83       	std	Y+4, r19	; 0x04
     476:	4d 83       	std	Y+5, r20	; 0x05
     478:	5e 83       	std	Y+6, r21	; 0x06
     47a:	6f 83       	std	Y+7, r22	; 0x07
     47c:	78 87       	std	Y+8, r23	; 0x08
     47e:	89 87       	std	Y+9, r24	; 0x09
     480:	9a 87       	std	Y+10, r25	; 0x0a
	// Setting the standard identifier
	MCP_write(message.id >> 3, MCP_TXB0SIDH);
     482:	61 e3       	ldi	r22, 0x31	; 49
     484:	80 2f       	mov	r24, r16
     486:	86 95       	lsr	r24
     488:	86 95       	lsr	r24
     48a:	86 95       	lsr	r24
     48c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <MCP_write>
	MCP_write(message.id << 5, MCP_TXB0SIDL);
     490:	62 e3       	ldi	r22, 0x32	; 50
     492:	80 2f       	mov	r24, r16
     494:	82 95       	swap	r24
     496:	88 0f       	add	r24, r24
     498:	80 7e       	andi	r24, 0xE0	; 224
     49a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <MCP_write>
	
	// setting data length
	MCP_write((0x0F) & message.length, MCP_TXB0DLC);
     49e:	65 e3       	ldi	r22, 0x35	; 53
     4a0:	81 2f       	mov	r24, r17
     4a2:	8f 70       	andi	r24, 0x0F	; 15
     4a4:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <MCP_write>
	
	// setting data bytes
	for (uint8_t i = 0x00; i< message.length; i++){
     4a8:	11 23       	and	r17, r17
     4aa:	91 f0       	breq	.+36     	; 0x4d0 <CAN_transmit+0x80>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0d 5f       	subi	r16, 0xFD	; 253
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	86 e3       	ldi	r24, 0x36	; 54
     4b4:	e8 0e       	add	r14, r24
     4b6:	0f 2e       	mov	r0, r31
     4b8:	f6 e3       	ldi	r31, 0x36	; 54
     4ba:	ff 2e       	mov	r15, r31
     4bc:	f0 2d       	mov	r31, r0
	MCP_write(message.data[i], MCP_TXB0D0+i);
     4be:	6f 2d       	mov	r22, r15
     4c0:	f8 01       	movw	r30, r16
     4c2:	81 91       	ld	r24, Z+
     4c4:	8f 01       	movw	r16, r30
     4c6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <MCP_write>
     4ca:	f3 94       	inc	r15
	
	// setting data length
	MCP_write((0x0F) & message.length, MCP_TXB0DLC);
	
	// setting data bytes
	for (uint8_t i = 0x00; i< message.length; i++){
     4cc:	fe 10       	cpse	r15, r14
     4ce:	f7 cf       	rjmp	.-18     	; 0x4be <CAN_transmit+0x6e>
	MCP_write(message.data[i], MCP_TXB0D0+i);
	}
	MCP_rts(1);
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	0e 94 02 04 	call	0x804	; 0x804 <MCP_rts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d6:	89 ef       	ldi	r24, 0xF9	; 249
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	f1 f7       	brne	.-4      	; 0x4da <CAN_transmit+0x8a>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <CAN_transmit+0x90>
     4e0:	00 00       	nop
	_delay_ms(1);
	
	if(!CAN_completed_transmit()){
     4e2:	0e 94 1d 02 	call	0x43a	; 0x43a <CAN_completed_transmit>
     4e6:	89 2b       	or	r24, r25
     4e8:	19 f4       	brne	.+6      	; 0x4f0 <CAN_transmit+0xa0>
		//printf("Transmit not completed, bit = %i \n",test_bit(MCP_TXB0CTRL,3));
		return CAN_check_error();
     4ea:	0e 94 0d 02 	call	0x41a	; 0x41a <CAN_check_error>
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <CAN_transmit+0xa4>
	}
	return 0;
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
}
     4f4:	2a 96       	adiw	r28, 0x0a	; 10
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	df 91       	pop	r29
     502:	cf 91       	pop	r28
     504:	1f 91       	pop	r17
     506:	0f 91       	pop	r16
     508:	ff 90       	pop	r15
     50a:	ef 90       	pop	r14
     50c:	08 95       	ret

0000050e <CAN_receive>:
	// clear interrupt flag in buffer 0
	MCP_bit_mod(MCP_CANINTF, 0x01, 0);
	rx_flag = 1;
}

struct CAN_message CAN_receive(void){
     50e:	af 92       	push	r10
     510:	bf 92       	push	r11
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	2a 97       	sbiw	r28, 0x0a	; 10
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	7c 01       	movw	r14, r24
	struct CAN_message new_message;
	MCP_read(MCP_RXB0SIDL) >> 5;
     534:	82 e6       	ldi	r24, 0x62	; 98
     536:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
	MCP_read(MCP_RXB0SIDH) << 3;
     53a:	81 e6       	ldi	r24, 0x61	; 97
     53c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
	if(test_bit(MCP_RX0IF,0) == 1){
		// writing the 8 bits we want from IDH and IDL
		new_message.id = MCP_read(MCP_RXB0SIDL) >> 5;
     540:	82 e6       	ldi	r24, 0x62	; 98
     542:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
     546:	a8 2e       	mov	r10, r24
		new_message.id |= MCP_read(MCP_RXB0SIDH) << 3;
     548:	81 e6       	ldi	r24, 0x61	; 97
     54a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
     54e:	28 e0       	ldi	r18, 0x08	; 8
     550:	82 9f       	mul	r24, r18
     552:	c0 01       	movw	r24, r0
     554:	11 24       	eor	r1, r1
	struct CAN_message new_message;
	MCP_read(MCP_RXB0SIDL) >> 5;
	MCP_read(MCP_RXB0SIDH) << 3;
	if(test_bit(MCP_RX0IF,0) == 1){
		// writing the 8 bits we want from IDH and IDL
		new_message.id = MCP_read(MCP_RXB0SIDL) >> 5;
     556:	a6 94       	lsr	r10
     558:	a6 94       	lsr	r10
     55a:	a6 94       	lsr	r10
     55c:	a6 94       	lsr	r10
     55e:	a6 94       	lsr	r10
		new_message.id |= MCP_read(MCP_RXB0SIDH) << 3;
     560:	a8 2a       	or	r10, r24
		// Get the length (only last 4 bits)
		new_message.length = MCP_read(0x65);
     562:	85 e6       	ldi	r24, 0x65	; 101
     564:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
     568:	b8 2e       	mov	r11, r24
		
		// Get the required data from RXB0DM
		for(uint8_t i = 0; i < new_message.length; i++){
     56a:	88 23       	and	r24, r24
     56c:	a9 f0       	breq	.+42     	; 0x598 <CAN_receive+0x8a>
     56e:	8e 01       	movw	r16, r28
     570:	0d 5f       	subi	r16, 0xFD	; 253
     572:	1f 4f       	sbci	r17, 0xFF	; 255
     574:	0f 2e       	mov	r0, r31
     576:	f6 e6       	ldi	r31, 0x66	; 102
     578:	cf 2e       	mov	r12, r31
     57a:	f0 2d       	mov	r31, r0
     57c:	c8 0e       	add	r12, r24
     57e:	0f 2e       	mov	r0, r31
     580:	f6 e6       	ldi	r31, 0x66	; 102
     582:	df 2e       	mov	r13, r31
     584:	f0 2d       	mov	r31, r0
			new_message.data[i] = MCP_read(MCP_RXB0D0 + i);
     586:	8d 2d       	mov	r24, r13
     588:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
     58c:	f8 01       	movw	r30, r16
     58e:	81 93       	st	Z+, r24
     590:	8f 01       	movw	r16, r30
     592:	d3 94       	inc	r13
		new_message.id |= MCP_read(MCP_RXB0SIDH) << 3;
		// Get the length (only last 4 bits)
		new_message.length = MCP_read(0x65);
		
		// Get the required data from RXB0DM
		for(uint8_t i = 0; i < new_message.length; i++){
     594:	dc 10       	cpse	r13, r12
     596:	f7 cf       	rjmp	.-18     	; 0x586 <CAN_receive+0x78>
			new_message.data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		MCP_bit_mod(MCP_CANINTF, 0xff, 0);
     598:	40 e0       	ldi	r20, 0x00	; 0
     59a:	6f ef       	ldi	r22, 0xFF	; 255
     59c:	8c e2       	ldi	r24, 0x2C	; 44
     59e:	0e 94 12 04 	call	0x824	; 0x824 <MCP_bit_mod>
	}
	else{
		// message not received
		new_message.id = -1;
	}
	return new_message;
     5a2:	a9 82       	std	Y+1, r10	; 0x01
     5a4:	ba 82       	std	Y+2, r11	; 0x02
     5a6:	8a e0       	ldi	r24, 0x0A	; 10
     5a8:	fe 01       	movw	r30, r28
     5aa:	31 96       	adiw	r30, 0x01	; 1
     5ac:	d7 01       	movw	r26, r14
     5ae:	01 90       	ld	r0, Z+
     5b0:	0d 92       	st	X+, r0
     5b2:	8a 95       	dec	r24
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <CAN_receive+0xa0>
}
     5b6:	c7 01       	movw	r24, r14
     5b8:	2a 96       	adiw	r28, 0x0a	; 10
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	1f 91       	pop	r17
     5ca:	0f 91       	pop	r16
     5cc:	ff 90       	pop	r15
     5ce:	ef 90       	pop	r14
     5d0:	df 90       	pop	r13
     5d2:	cf 90       	pop	r12
     5d4:	bf 90       	pop	r11
     5d6:	af 90       	pop	r10
     5d8:	08 95       	ret

000005da <start_game>:

// Interrupt service
//ISR(INT0_vect){
	//CAN_int_vect();
//}
int start_game(int mode, int opt){
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	64 97       	sbiw	r28, 0x14	; 20
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
	struct CAN_message chosen_game;
	chosen_game.id = 10;
	chosen_game.length = 8;
     5fa:	98 e0       	ldi	r25, 0x08	; 8
     5fc:	9a 83       	std	Y+2, r25	; 0x02
	int8_t game_mode = mode;
	int8_t controller_mode = opt;
	struct Joystick joy;
	struct Slider sli;
	
	if(game_mode == 1){
     5fe:	81 30       	cpi	r24, 0x01	; 1
     600:	39 f4       	brne	.+14     	; 0x610 <start_game+0x36>
		switch(controller_mode){
     602:	62 30       	cpi	r22, 0x02	; 2
     604:	81 f0       	breq	.+32     	; 0x626 <start_game+0x4c>
//ISR(INT0_vect){
	//CAN_int_vect();
//}
int start_game(int mode, int opt){
	struct CAN_message chosen_game;
	chosen_game.id = 10;
     606:	0f 2e       	mov	r0, r31
     608:	fa e0       	ldi	r31, 0x0A	; 10
     60a:	df 2e       	mov	r13, r31
     60c:	f0 2d       	mov	r31, r0
     60e:	1e c0       	rjmp	.+60     	; 0x64c <start_game+0x72>
			case 2:
			chosen_game.id = 11;
			break;
		}
	}
	else if(game_mode == 2){
     610:	82 30       	cpi	r24, 0x02	; 2
     612:	71 f4       	brne	.+28     	; 0x630 <start_game+0x56>
		switch(controller_mode){
     614:	61 30       	cpi	r22, 0x01	; 1
     616:	89 f0       	breq	.+34     	; 0x63a <start_game+0x60>
     618:	62 30       	cpi	r22, 0x02	; 2
     61a:	a1 f0       	breq	.+40     	; 0x644 <start_game+0x6a>
//ISR(INT0_vect){
	//CAN_int_vect();
//}
int start_game(int mode, int opt){
	struct CAN_message chosen_game;
	chosen_game.id = 10;
     61c:	0f 2e       	mov	r0, r31
     61e:	fa e0       	ldi	r31, 0x0A	; 10
     620:	df 2e       	mov	r13, r31
     622:	f0 2d       	mov	r31, r0
     624:	13 c0       	rjmp	.+38     	; 0x64c <start_game+0x72>
			case 1:
			chosen_game.id = 10;
			break;
			
			case 2:
			chosen_game.id = 11;
     626:	0f 2e       	mov	r0, r31
     628:	fb e0       	ldi	r31, 0x0B	; 11
     62a:	df 2e       	mov	r13, r31
     62c:	f0 2d       	mov	r31, r0
     62e:	0e c0       	rjmp	.+28     	; 0x64c <start_game+0x72>
//ISR(INT0_vect){
	//CAN_int_vect();
//}
int start_game(int mode, int opt){
	struct CAN_message chosen_game;
	chosen_game.id = 10;
     630:	0f 2e       	mov	r0, r31
     632:	fa e0       	ldi	r31, 0x0A	; 10
     634:	df 2e       	mov	r13, r31
     636:	f0 2d       	mov	r31, r0
     638:	09 c0       	rjmp	.+18     	; 0x64c <start_game+0x72>
		}
	}
	else if(game_mode == 2){
		switch(controller_mode){
			case 1:
			chosen_game.id = 14;
     63a:	0f 2e       	mov	r0, r31
     63c:	fe e0       	ldi	r31, 0x0E	; 14
     63e:	df 2e       	mov	r13, r31
     640:	f0 2d       	mov	r31, r0
     642:	04 c0       	rjmp	.+8      	; 0x64c <start_game+0x72>
			break;

			case 2:
			chosen_game.id = 15;
     644:	0f 2e       	mov	r0, r31
     646:	ff e0       	ldi	r31, 0x0F	; 15
     648:	df 2e       	mov	r13, r31
     64a:	f0 2d       	mov	r31, r0
		game_over_check = CAN_receive();
		joy = read_joystick_position(channel1, channel2);
		sli = read_slider_position(channel3, channel4);
		chosen_game.data[0] = (uint8_t)joy.x_pos;
		chosen_game.data[3] = (uint8_t)sli.slider2;
		printf("trans id: %d rec id: %d  \n",chosen_game.id, game_over_check.id);
     64c:	0f 2e       	mov	r0, r31
     64e:	f6 e0       	ldi	r31, 0x06	; 6
     650:	ef 2e       	mov	r14, r31
     652:	f1 e0       	ldi	r31, 0x01	; 1
     654:	ff 2e       	mov	r15, r31
     656:	f0 2d       	mov	r31, r0
		//game_over_check = CAN_receive();
		//TCNT1 = 0;
		//TIFR |= (1 << OCF1B);
	//}
	while(game_over_check.id != 1){
		game_over_check = CAN_receive();
     658:	ce 01       	movw	r24, r28
     65a:	0b 96       	adiw	r24, 0x0b	; 11
     65c:	0e 94 87 02 	call	0x50e	; 0x50e <CAN_receive>
     660:	cb 84       	ldd	r12, Y+11	; 0x0b
		joy = read_joystick_position(channel1, channel2);
     662:	65 e0       	ldi	r22, 0x05	; 5
     664:	84 e0       	ldi	r24, 0x04	; 4
     666:	0e 94 81 03 	call	0x702	; 0x702 <read_joystick_position>
     66a:	16 2f       	mov	r17, r22
		sli = read_slider_position(channel3, channel4);
     66c:	67 e0       	ldi	r22, 0x07	; 7
     66e:	86 e0       	ldi	r24, 0x06	; 6
     670:	0e 94 93 03 	call	0x726	; 0x726 <read_slider_position>
		chosen_game.data[0] = (uint8_t)joy.x_pos;
     674:	1b 83       	std	Y+3, r17	; 0x03
		chosen_game.data[3] = (uint8_t)sli.slider2;
     676:	8e 83       	std	Y+6, r24	; 0x06
		printf("trans id: %d rec id: %d  \n",chosen_game.id, game_over_check.id);
     678:	1f 92       	push	r1
     67a:	cf 92       	push	r12
     67c:	1f 92       	push	r1
     67e:	df 92       	push	r13
     680:	ff 92       	push	r15
     682:	ef 92       	push	r14
     684:	0e 94 ff 07 	call	0xffe	; 0xffe <printf>
		CAN_transmit(chosen_game);
     688:	d9 82       	std	Y+1, r13	; 0x01
     68a:	0d 2d       	mov	r16, r13
     68c:	1a 81       	ldd	r17, Y+2	; 0x02
     68e:	2b 81       	ldd	r18, Y+3	; 0x03
     690:	3c 81       	ldd	r19, Y+4	; 0x04
     692:	4d 81       	ldd	r20, Y+5	; 0x05
     694:	5e 81       	ldd	r21, Y+6	; 0x06
     696:	6f 81       	ldd	r22, Y+7	; 0x07
     698:	78 85       	ldd	r23, Y+8	; 0x08
     69a:	89 85       	ldd	r24, Y+9	; 0x09
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	0e 94 28 02 	call	0x450	; 0x450 <CAN_transmit>
     6a2:	83 ec       	ldi	r24, 0xC3	; 195
     6a4:	99 e0       	ldi	r25, 0x09	; 9
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	f1 f7       	brne	.-4      	; 0x6a6 <start_game+0xcc>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <start_game+0xd2>
     6ac:	00 00       	nop
	//if(TIFR & (1 << OCF1B)){ // if counter has reached OCR1B
		//game_over_check = CAN_receive();
		//TCNT1 = 0;
		//TIFR |= (1 << OCF1B);
	//}
	while(game_over_check.id != 1){
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	c9 12       	cpse	r12, r25
     6be:	cc cf       	rjmp	.-104    	; 0x658 <start_game+0x7e>
		chosen_game.data[3] = (uint8_t)sli.slider2;
		printf("trans id: %d rec id: %d  \n",chosen_game.id, game_over_check.id);
		CAN_transmit(chosen_game);
		_delay_ms(10);
	}
     6c0:	64 96       	adiw	r28, 0x14	; 20
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	de bf       	out	0x3e, r29	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	cd bf       	out	0x3d, r28	; 61
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	df 90       	pop	r13
     6da:	cf 90       	pop	r12
     6dc:	08 95       	ret

000006de <EEPROM_write>:

void EEPROM_write(uint8_t uiAddress, uint8_t ucData){
	/* 
	Wait for completion of previous write
	 */
	while(EECR & (1<<EEWE)){}
     6de:	e1 99       	sbic	0x1c, 1	; 28
     6e0:	fe cf       	rjmp	.-4      	; 0x6de <EEPROM_write>

	
	/* Set up address and data registers */
	EEAR = uiAddress;
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	9f bb       	out	0x1f, r25	; 31
     6e6:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     6e8:	6d bb       	out	0x1d, r22	; 29
	/* 
	Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     6ea:	e2 9a       	sbi	0x1c, 2	; 28


	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     6ec:	e1 9a       	sbi	0x1c, 1	; 28
     6ee:	08 95       	ret

000006f0 <EEPROM_read>:
}

char* EEPROM_read(uint8_t uiAddress){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE)){
     6f0:	e1 99       	sbic	0x1c, 1	; 28
     6f2:	fe cf       	rjmp	.-4      	; 0x6f0 <EEPROM_read>
		
	}
	/* Set up address register */
	EEAR = uiAddress;
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	9f bb       	out	0x1f, r25	; 31
     6f8:	8e bb       	out	0x1e, r24	; 30
	/*
	Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     6fa:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     6fc:	8d b3       	in	r24, 0x1d	; 29
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	08 95       	ret

00000702 <read_joystick_position>:
#define loop_until_bit_is_clear( reg, bit ) while( test_bit( reg, bit ) )
#include "joystick.h"
#include "adc.h"
#include <stdbool.h>
struct Menu_position pos;
struct Joystick read_joystick_position(uint8_t channel_one, uint8_t channel_two){
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	d8 2f       	mov	r29, r24
     708:	86 2f       	mov	r24, r22
	int x_pos = (adc_read(channel_two));//-134)*0.8264462809917355;
     70a:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     70e:	c8 2f       	mov	r28, r24
	int y_pos = (adc_read(channel_one));//-133)*0.819672131147541;
     710:	8d 2f       	mov	r24, r29
     712:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     716:	28 2f       	mov	r18, r24
	struct Joystick global_joystick;
	global_joystick.x_pos = x_pos;
	global_joystick.y_pos = y_pos;
	//printf("X: %i, Y: %i \n", x_pos,y_pos);

	return global_joystick;
     718:	6c 2f       	mov	r22, r28
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	82 2f       	mov	r24, r18
     71e:	90 e0       	ldi	r25, 0x00	; 0
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	08 95       	ret

00000726 <read_slider_position>:
struct Slider read_slider_position(uint8_t channel_one, uint8_t channel_two){
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	d6 2f       	mov	r29, r22
	int slider1 = adc_read(channel_one);
     72c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     730:	c8 2f       	mov	r28, r24
	//_delay_ms(100);
	int slider2 = adc_read(channel_two);
     732:	8d 2f       	mov	r24, r29
     734:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     738:	28 2f       	mov	r18, r24
	struct Slider global_slider;
	global_slider.slider1 = slider1;
	global_slider.slider2 = slider2;
	return global_slider;
     73a:	6c 2f       	mov	r22, r28
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	82 2f       	mov	r24, r18
     740:	90 e0       	ldi	r25, 0x00	; 0
	//printf("Slider 1: %i, Slider 2: %i \n", slider1,slider2);
}
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <main>:
volatile char* oled_adresse = 0x1200;
volatile char* adc_adresse = 0x1400;
volatile char* ram_adresse = 0x1800;
int main(void)
{
	DDRB = 0b00000000;
     748:	17 ba       	out	0x17, r1	; 23

	EXT_MEM_Init();
     74a:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <EXT_MEM_Init>
	USART_Init(31);				
     74e:	8f e1       	ldi	r24, 0x1F	; 31
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 82 06 	call	0xd04	; 0xd04 <USART_Init>
	oled_init();
     756:	0e 94 aa 05 	call	0xb54	; 0xb54 <oled_init>
	oled_reset();
     75a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <oled_reset>
	adc_init();
     75e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	CAN_init();
     762:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <CAN_init>
//	menu_initialize();
	printf("Init er good\n");
     766:	81 e2       	ldi	r24, 0x21	; 33
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 13 08 	call	0x1026	; 0x1026 <puts>
    // Setter spillet i default -> survival med slider control
    chosen_game.id = 0x0a;
    chosen_game.data[5] = 1;
    chosen_game.data[6] = 2;
	
	oled_reset();
     76e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <oled_reset>
	
	MENU *main_menu = menu_create();
     772:	0e 94 c4 04 	call	0x988	; 0x988 <menu_create>
	//oled_reset();
	printf("reseted\n");
     776:	8e e2       	ldi	r24, 0x2E	; 46
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 13 08 	call	0x1026	; 0x1026 <puts>
	
	
	//EEPROMTEST
	uint8_t Adr = 0x01;
	uint8_t Data = 0x02;
	EEPROM_write(Adr, Data);
     77e:	62 e0       	ldi	r22, 0x02	; 2
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 6f 03 	call	0x6de	; 0x6de <EEPROM_write>
	char* dat = EEPROM_read(Adr);
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	0e 94 78 03 	call	0x6f0	; 0x6f0 <EEPROM_read>
	printf("data inn %x, data ut %x", Data, dat);
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	1f 92       	push	r1
     792:	82 e0       	ldi	r24, 0x02	; 2
     794:	8f 93       	push	r24
     796:	86 e3       	ldi	r24, 0x36	; 54
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	9f 93       	push	r25
     79c:	8f 93       	push	r24
     79e:	0e 94 ff 07 	call	0xffe	; 0xffe <printf>
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	0f 90       	pop	r0
     7ae:	ff cf       	rjmp	.-2      	; 0x7ae <main+0x66>

000007b0 <select_CAN>:
#include "MCP2515.h"
#define DD_SS PB4
#include "SPI.h"

void select_CAN(void){
	clear_bit(PORTB, DD_SS);
     7b0:	c4 98       	cbi	0x18, 4	; 24
     7b2:	08 95       	ret

000007b4 <deselect_CAN>:
}

void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
     7b4:	c4 9a       	sbi	0x18, 4	; 24
     7b6:	08 95       	ret

000007b8 <MCP_write>:
void MCP_init(){
	SPI_MasterInit();
	MCP_reset();
}

void MCP_write(uint8_t data, uint8_t address){
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	c8 2f       	mov	r28, r24
     7be:	d6 2f       	mov	r29, r22
	// printf("MCP_write data = %x, address = %x \n", data, address);
	select_CAN();
     7c0:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <select_CAN>
	
	SPI_MasterTransmit(MCP_WRITE);
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     7ca:	8d 2f       	mov	r24, r29
     7cc:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     7d0:	8c 2f       	mov	r24, r28
     7d2:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	deselect_CAN();
     7d6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <deselect_CAN>
}
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <MCP_read>:

uint8_t MCP_read(uint8_t address){
     7e0:	cf 93       	push	r28
     7e2:	c8 2f       	mov	r28, r24
	uint8_t temp;
	
	select_CAN();
     7e4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <select_CAN>
	
	SPI_MasterTransmit(MCP_READ);
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     7ee:	8c 2f       	mov	r24, r28
     7f0:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	temp = SPI_MasterReceive();
     7f4:	0e 94 59 06 	call	0xcb2	; 0xcb2 <SPI_MasterReceive>
     7f8:	c8 2f       	mov	r28, r24
	deselect_CAN();
     7fa:	0e 94 da 03 	call	0x7b4	; 0x7b4 <deselect_CAN>
	// printf("I MCP_read, temp = %x, address = %x \n", temp, address);
	return temp;
}
     7fe:	8c 2f       	mov	r24, r28
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <MCP_rts>:

void MCP_rts(uint8_t reg){
     804:	cf 93       	push	r28
	
if (reg <= 7)
     806:	88 30       	cpi	r24, 0x08	; 8
     808:	18 f4       	brcc	.+6      	; 0x810 <MCP_rts+0xc>
{reg = MCP_RTS | reg;
     80a:	c8 2f       	mov	r28, r24
     80c:	c0 68       	ori	r28, 0x80	; 128
     80e:	01 c0       	rjmp	.+2      	; 0x812 <MCP_rts+0xe>
}
else{
	reg = MCP_RTS;
     810:	c0 e8       	ldi	r28, 0x80	; 128
}	
	select_CAN();
     812:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <select_CAN>
	SPI_MasterTransmit(reg);
     816:	8c 2f       	mov	r24, r28
     818:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	deselect_CAN();	
     81c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <deselect_CAN>
}
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <MCP_bit_mod>:
	SPI_MasterTransmit(MCP_READ_STATUS);
	deselect_CAN();
	return SPI_MasterReceive();
}

void MCP_bit_mod(uint8_t address, uint8_t m_byte, uint8_t d_byte){
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	18 2f       	mov	r17, r24
     82c:	d6 2f       	mov	r29, r22
     82e:	c4 2f       	mov	r28, r20
	select_CAN();
     830:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <select_CAN>
	SPI_MasterTransmit(MCP_BITMOD);
     834:	85 e0       	ldi	r24, 0x05	; 5
     836:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     83a:	81 2f       	mov	r24, r17
     83c:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	SPI_MasterTransmit(m_byte);
     840:	8d 2f       	mov	r24, r29
     842:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	SPI_MasterTransmit(d_byte);
     846:	8c 2f       	mov	r24, r28
     848:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	deselect_CAN();
     84c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <deselect_CAN>
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	08 95       	ret

00000858 <MCP_reset>:

void MCP_reset(){
	select_CAN();
     858:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <select_CAN>
	SPI_MasterTransmit(MCP_RESET);
     85c:	80 ec       	ldi	r24, 0xC0	; 192
     85e:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	deselect_CAN();
     862:	0e 94 da 03 	call	0x7b4	; 0x7b4 <deselect_CAN>
	uint8_t mode = MCP_read(MCP_CANSTAT);
     866:	8e e0       	ldi	r24, 0x0E	; 14
     868:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <MCP_read>
	if ((mode&MODE_MASK)!=MODE_CONFIG)
     86c:	80 7e       	andi	r24, 0xE0	; 224
     86e:	80 38       	cpi	r24, 0x80	; 128
     870:	21 f0       	breq	.+8      	; 0x87a <MCP_reset+0x22>
	{
		printf("Not in config after reset\n");
     872:	8e e4       	ldi	r24, 0x4E	; 78
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 13 08 	call	0x1026	; 0x1026 <puts>
     87a:	08 95       	ret

0000087c <MCP_init>:
void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
}

void MCP_init(){
	SPI_MasterInit();
     87c:	0e 94 50 06 	call	0xca0	; 0xca0 <SPI_MasterInit>
	MCP_reset();
     880:	0e 94 2c 04 	call	0x858	; 0x858 <MCP_reset>
     884:	08 95       	ret

00000886 <init_menu>:
#include "CAN_bus.h"
//static MENU *current_menu;
struct Hashtag hashtag;
bool navy = false;
bool navx = false;
MENU* init_menu(char*title){
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ec 01       	movw	r28, r24
	MENU *main_menu = (MENU*)malloc(sizeof(MENU));
     88c:	8b e1       	ldi	r24, 0x1B	; 27
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 8d 06 	call	0xd1a	; 0xd1a <malloc>
     894:	fc 01       	movw	r30, r24
	
	if (main_menu == NULL){
     896:	00 97       	sbiw	r24, 0x00	; 0
     898:	41 f4       	brne	.+16     	; 0x8aa <init_menu+0x24>
		printf("Cant continue, memory full\n");
     89a:	88 e6       	ldi	r24, 0x68	; 104
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 13 08 	call	0x1026	; 0x1026 <puts>
		exit(1);
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 12 0b 	call	0x1624	; 0x1624 <_exit>
	}
	
	main_menu->text = title;
     8aa:	d1 83       	std	Z+1, r29	; 0x01
     8ac:	c0 83       	st	Z, r28
	main_menu->parent = NULL;
     8ae:	10 8e       	std	Z+24, r1	; 0x18
     8b0:	17 8a       	std	Z+23, r1	; 0x17
	main_menu->sub = NULL;
     8b2:	12 8e       	std	Z+26, r1	; 0x1a
     8b4:	11 8e       	std	Z+25, r1	; 0x19
	main_menu->over = NULL;
     8b6:	14 8a       	std	Z+20, r1	; 0x14
     8b8:	13 8a       	std	Z+19, r1	; 0x13
	main_menu->under = NULL;
     8ba:	16 8a       	std	Z+22, r1	; 0x16
     8bc:	15 8a       	std	Z+21, r1	; 0x15
	main_menu->sub_menus = 0;
     8be:	10 8a       	std	Z+16, r1	; 0x10
     8c0:	17 86       	std	Z+15, r1	; 0x0f
	main_menu->goto_func = NULL;
     8c2:	12 8a       	std	Z+18, r1	; 0x12
     8c4:	11 8a       	std	Z+17, r1	; 0x11
	main_menu->page = 0x00;
     8c6:	16 86       	std	Z+14, r1	; 0x0e
	return main_menu;
	
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <menu_add_submenu>:

MENU* menu_add_submenu(MENU *parent, void (*goto_func)(), char*text){
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	ec 01       	movw	r28, r24
     8dc:	8b 01       	movw	r16, r22
     8de:	7a 01       	movw	r14, r20
	MENU *menu = (MENU*)malloc(sizeof(MENU));
     8e0:	8b e1       	ldi	r24, 0x1B	; 27
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 8d 06 	call	0xd1a	; 0xd1a <malloc>
     8e8:	fc 01       	movw	r30, r24
	
	menu->text = text;
     8ea:	f1 82       	std	Z+1, r15	; 0x01
     8ec:	e0 82       	st	Z, r14
	menu->parent = parent;
     8ee:	d0 8f       	std	Z+24, r29	; 0x18
     8f0:	c7 8b       	std	Z+23, r28	; 0x17
	menu->sub = NULL;
     8f2:	12 8e       	std	Z+26, r1	; 0x1a
     8f4:	11 8e       	std	Z+25, r1	; 0x19
	menu->over = NULL;
     8f6:	14 8a       	std	Z+20, r1	; 0x14
     8f8:	13 8a       	std	Z+19, r1	; 0x13
	menu->under = NULL;
     8fa:	16 8a       	std	Z+22, r1	; 0x16
     8fc:	15 8a       	std	Z+21, r1	; 0x15
	menu->sub_menus = 0;
     8fe:	10 8a       	std	Z+16, r1	; 0x10
     900:	17 86       	std	Z+15, r1	; 0x0f
	menu->goto_func = goto_func;
     902:	12 8b       	std	Z+18, r17	; 0x12
     904:	01 8b       	std	Z+17, r16	; 0x11
	menu->page = 0x02;
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	86 87       	std	Z+14, r24	; 0x0e
	parent->sub = menu;
     90a:	fa 8f       	std	Y+26, r31	; 0x1a
     90c:	e9 8f       	std	Y+25, r30	; 0x19
	parent->sub_menus +=1;
     90e:	8f 85       	ldd	r24, Y+15	; 0x0f
     910:	98 89       	ldd	r25, Y+16	; 0x10
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	98 8b       	std	Y+16, r25	; 0x10
     916:	8f 87       	std	Y+15, r24	; 0x0f
	return menu;
}
     918:	cf 01       	movw	r24, r30
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	1f 91       	pop	r17
     920:	0f 91       	pop	r16
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	08 95       	ret

00000928 <menu_add_node>:

MENU* menu_add_node(MENU *over, MENU *under, void (*goto_func)(), char*text){
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	ec 01       	movw	r28, r24
     93a:	6b 01       	movw	r12, r22
     93c:	7a 01       	movw	r14, r20
     93e:	89 01       	movw	r16, r18
	MENU *node = (MENU*)malloc(sizeof(MENU));
     940:	8b e1       	ldi	r24, 0x1B	; 27
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 8d 06 	call	0xd1a	; 0xd1a <malloc>
     948:	fc 01       	movw	r30, r24
	
	node->parent = over->parent;
     94a:	8f 89       	ldd	r24, Y+23	; 0x17
     94c:	98 8d       	ldd	r25, Y+24	; 0x18
     94e:	90 8f       	std	Z+24, r25	; 0x18
     950:	87 8b       	std	Z+23, r24	; 0x17
	node->sub = NULL;
     952:	12 8e       	std	Z+26, r1	; 0x1a
     954:	11 8e       	std	Z+25, r1	; 0x19
	node->over = over;
     956:	d4 8b       	std	Z+20, r29	; 0x14
     958:	c3 8b       	std	Z+19, r28	; 0x13
	over->under = node;
     95a:	fe 8b       	std	Y+22, r31	; 0x16
     95c:	ed 8b       	std	Y+21, r30	; 0x15
	node->under = under;
     95e:	d6 8a       	std	Z+22, r13	; 0x16
     960:	c5 8a       	std	Z+21, r12	; 0x15
	node->text = text;
     962:	11 83       	std	Z+1, r17	; 0x01
     964:	00 83       	st	Z, r16
	node->page = over->page + 0x01;
     966:	8e 85       	ldd	r24, Y+14	; 0x0e
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	86 87       	std	Z+14, r24	; 0x0e
	node->sub_menus = 0;
     96c:	10 8a       	std	Z+16, r1	; 0x10
     96e:	17 86       	std	Z+15, r1	; 0x0f
	node->goto_func = goto_func;
     970:	f2 8a       	std	Z+18, r15	; 0x12
     972:	e1 8a       	std	Z+17, r14	; 0x11
	return node;
}
     974:	cf 01       	movw	r24, r30
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	ef 90       	pop	r14
     982:	df 90       	pop	r13
     984:	cf 90       	pop	r12
     986:	08 95       	ret

00000988 <menu_create>:
		default:
			break;
	}
}

MENU* menu_create(){
     988:	2f 92       	push	r2
     98a:	3f 92       	push	r3
     98c:	4f 92       	push	r4
     98e:	5f 92       	push	r5
     990:	6f 92       	push	r6
     992:	7f 92       	push	r7
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
	MENU *main_menu = init_menu("Main Menu");
     9ac:	83 e8       	ldi	r24, 0x83	; 131
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	0e 94 43 04 	call	0x886	; 0x886 <init_menu>
     9b4:	6c 01       	movw	r12, r24
	
	MENU *start_game = menu_add_node(NULL,NULL,menu_start_game,"Play");
     9b6:	2d e8       	ldi	r18, 0x8D	; 141
     9b8:	31 e0       	ldi	r19, 0x01	; 1
     9ba:	4e e5       	ldi	r20, 0x5E	; 94
     9bc:	56 e0       	ldi	r21, 0x06	; 6
     9be:	60 e0       	ldi	r22, 0x00	; 0
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	0e 94 94 04 	call	0x928	; 0x928 <menu_add_node>
     9ca:	ec 01       	movw	r28, r24
	//return current;
//}
void menu_add_description(MENU* node, char* description, int line){
	switch(line){
		case 1:
			node->line1 = description;
     9cc:	82 e9       	ldi	r24, 0x92	; 146
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	9b 83       	std	Y+3, r25	; 0x03
     9d2:	8a 83       	std	Y+2, r24	; 0x02
	MENU *main_menu = init_menu("Main Menu");
	
	MENU *start_game = menu_add_node(NULL,NULL,menu_start_game,"Play");
	menu_add_description(start_game,"Joy mode!",1) ;
	menu_add_description(start_game,"Green",1) ;
	start_game->page = 0x02;
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	8e 87       	std	Y+14, r24	; 0x0e

	// highscore nodes	
	MENU *highscore = menu_add_node(start_game,start_game,NULL,"Highscores");
     9d8:	28 e9       	ldi	r18, 0x98	; 152
     9da:	31 e0       	ldi	r19, 0x01	; 1
     9dc:	40 e0       	ldi	r20, 0x00	; 0
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	be 01       	movw	r22, r28
     9e2:	ce 01       	movw	r24, r28
     9e4:	0e 94 94 04 	call	0x928	; 0x928 <menu_add_node>
     9e8:	8c 01       	movw	r16, r24
	MENU *hs_print = menu_add_submenu(highscore,menu_print_HS,"Print");
     9ea:	43 ea       	ldi	r20, 0xA3	; 163
     9ec:	51 e0       	ldi	r21, 0x01	; 1
     9ee:	61 e6       	ldi	r22, 0x61	; 97
     9f0:	76 e0       	ldi	r23, 0x06	; 6
     9f2:	0e 94 67 04 	call	0x8ce	; 0x8ce <menu_add_submenu>
	MENU *hs_reset = menu_add_node(hs_print,hs_print,menu_reset_HS, "Reset");
     9f6:	29 ea       	ldi	r18, 0xA9	; 169
     9f8:	31 e0       	ldi	r19, 0x01	; 1
     9fa:	42 e6       	ldi	r20, 0x62	; 98
     9fc:	56 e0       	ldi	r21, 0x06	; 6
     9fe:	bc 01       	movw	r22, r24
     a00:	0e 94 94 04 	call	0x928	; 0x928 <menu_add_node>
     a04:	2c 01       	movw	r4, r24
	
	// all option nodes		
	MENU *options = menu_add_node(highscore,highscore,NULL,"Options");
     a06:	2f ea       	ldi	r18, 0xAF	; 175
     a08:	31 e0       	ldi	r19, 0x01	; 1
     a0a:	40 e0       	ldi	r20, 0x00	; 0
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	b8 01       	movw	r22, r16
     a10:	c8 01       	movw	r24, r16
     a12:	0e 94 94 04 	call	0x928	; 0x928 <menu_add_node>
     a16:	7c 01       	movw	r14, r24
	MENU *option_modes = menu_add_submenu(options,NULL,"Modes");
     a18:	47 eb       	ldi	r20, 0xB7	; 183
     a1a:	51 e0       	ldi	r21, 0x01	; 1
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	0e 94 67 04 	call	0x8ce	; 0x8ce <menu_add_submenu>
     a24:	5c 01       	movw	r10, r24
	MENU *option_modes_goalie = menu_add_submenu(option_modes,menu_choose_goalie_mode,"Goalie");
     a26:	4d eb       	ldi	r20, 0xBD	; 189
     a28:	51 e0       	ldi	r21, 0x01	; 1
     a2a:	63 e6       	ldi	r22, 0x63	; 99
     a2c:	76 e0       	ldi	r23, 0x06	; 6
     a2e:	0e 94 67 04 	call	0x8ce	; 0x8ce <menu_add_submenu>
	MENU *option_modes_survival = menu_add_node(option_modes_goalie,option_modes_goalie,menu_choose_survival_mode, "Survival");
     a32:	24 ec       	ldi	r18, 0xC4	; 196
     a34:	31 e0       	ldi	r19, 0x01	; 1
     a36:	46 e6       	ldi	r20, 0x66	; 102
     a38:	56 e0       	ldi	r21, 0x06	; 6
     a3a:	bc 01       	movw	r22, r24
     a3c:	0e 94 94 04 	call	0x928	; 0x928 <menu_add_node>
     a40:	1c 01       	movw	r2, r24
	MENU *option_controller = menu_add_node(option_modes,option_modes,NULL,"Controller");
     a42:	2d ec       	ldi	r18, 0xCD	; 205
     a44:	31 e0       	ldi	r19, 0x01	; 1
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	b5 01       	movw	r22, r10
     a4c:	c5 01       	movw	r24, r10
     a4e:	0e 94 94 04 	call	0x928	; 0x928 <menu_add_node>
     a52:	5c 01       	movw	r10, r24
	MENU *option_controller_joystick = menu_add_submenu(option_controller,menu_controller_joystick,"Joystick");
     a54:	48 ed       	ldi	r20, 0xD8	; 216
     a56:	51 e0       	ldi	r21, 0x01	; 1
     a58:	69 e6       	ldi	r22, 0x69	; 105
     a5a:	76 e0       	ldi	r23, 0x06	; 6
     a5c:	0e 94 67 04 	call	0x8ce	; 0x8ce <menu_add_submenu>
	MENU *option_controller_slider = menu_add_node(option_controller_joystick,option_controller_joystick, menu_controller_slider,"Slider");
     a60:	21 ee       	ldi	r18, 0xE1	; 225
     a62:	31 e0       	ldi	r19, 0x01	; 1
     a64:	4c e6       	ldi	r20, 0x6C	; 108
     a66:	56 e0       	ldi	r21, 0x06	; 6
     a68:	bc 01       	movw	r22, r24
     a6a:	0e 94 94 04 	call	0x928	; 0x928 <menu_add_node>
     a6e:	4c 01       	movw	r8, r24
	MENU *exit_program = menu_add_node(options,NULL,program_exit,"Exit");
     a70:	28 ee       	ldi	r18, 0xE8	; 232
     a72:	31 e0       	ldi	r19, 0x01	; 1
     a74:	4f e6       	ldi	r20, 0x6F	; 111
     a76:	56 e0       	ldi	r21, 0x06	; 6
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	c7 01       	movw	r24, r14
     a7e:	0e 94 94 04 	call	0x928	; 0x928 <menu_add_node>
     a82:	3c 01       	movw	r6, r24
	options->parent = NULL;
     a84:	f7 01       	movw	r30, r14
     a86:	10 8e       	std	Z+24, r1	; 0x18
     a88:	17 8a       	std	Z+23, r1	; 0x17
	start_game->parent = NULL;
     a8a:	18 8e       	std	Y+24, r1	; 0x18
     a8c:	1f 8a       	std	Y+23, r1	; 0x17
	highscore->parent = NULL;
     a8e:	f8 01       	movw	r30, r16
     a90:	10 8e       	std	Z+24, r1	; 0x18
     a92:	17 8a       	std	Z+23, r1	; 0x17
	exit_program->parent = NULL;
     a94:	fc 01       	movw	r30, r24
     a96:	10 8e       	std	Z+24, r1	; 0x18
     a98:	17 8a       	std	Z+23, r1	; 0x17
	start_game->under = highscore;
     a9a:	1e 8b       	std	Y+22, r17	; 0x16
     a9c:	0d 8b       	std	Y+21, r16	; 0x15
	hs_reset->under = NULL;
     a9e:	f2 01       	movw	r30, r4
     aa0:	16 8a       	std	Z+22, r1	; 0x16
     aa2:	15 8a       	std	Z+21, r1	; 0x15
	option_controller->under = NULL;
     aa4:	f5 01       	movw	r30, r10
     aa6:	16 8a       	std	Z+22, r1	; 0x16
     aa8:	15 8a       	std	Z+21, r1	; 0x15
	main_menu->under = start_game;
     aaa:	f6 01       	movw	r30, r12
     aac:	d6 8b       	std	Z+22, r29	; 0x16
     aae:	c5 8b       	std	Z+21, r28	; 0x15
	option_modes_survival->under = NULL;
     ab0:	f1 01       	movw	r30, r2
     ab2:	16 8a       	std	Z+22, r1	; 0x16
     ab4:	15 8a       	std	Z+21, r1	; 0x15
	option_controller_slider->under = NULL;
     ab6:	f4 01       	movw	r30, r8
     ab8:	16 8a       	std	Z+22, r1	; 0x16
     aba:	15 8a       	std	Z+21, r1	; 0x15
	//Creating loopover for first element to last, skipping main menu
	//start_game->over = exit_program;
	exit_program->page = 0x06;
     abc:	86 e0       	ldi	r24, 0x06	; 6
     abe:	f3 01       	movw	r30, r6
     ac0:	86 87       	std	Z+14, r24	; 0x0e
	//printf("sg:%d	hs:%d	hsp:%d	hsr:%d	opt:%d	optm:%d	 optmg:%d	optms:%d\n",
	//start_game->page,highscore->page,hs_print->page,hs_reset->page,options->page,option_modes->page,option_modes_goalie->page,option_modes_survival->page);
	// Print starting menu
	MENU *temp = main_menu;

	oled_print(main_menu->text,0x00,0x1c,0x25);
     ac2:	25 e2       	ldi	r18, 0x25	; 37
     ac4:	4c e1       	ldi	r20, 0x1C	; 28
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	f6 01       	movw	r30, r12
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	0e 94 1f 06 	call	0xc3e	; 0xc3e <oled_print>
	oled_print(start_game->text,0x02,0x1c,0x25);
     ad2:	25 e2       	ldi	r18, 0x25	; 37
     ad4:	4c e1       	ldi	r20, 0x1C	; 28
     ad6:	62 e0       	ldi	r22, 0x02	; 2
     ad8:	88 81       	ld	r24, Y
     ada:	99 81       	ldd	r25, Y+1	; 0x01
     adc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <oled_print>
	oled_print(highscore->text,0x03,0x1c,0x25);
     ae0:	25 e2       	ldi	r18, 0x25	; 37
     ae2:	4c e1       	ldi	r20, 0x1C	; 28
     ae4:	63 e0       	ldi	r22, 0x03	; 3
     ae6:	f8 01       	movw	r30, r16
     ae8:	80 81       	ld	r24, Z
     aea:	91 81       	ldd	r25, Z+1	; 0x01
     aec:	0e 94 1f 06 	call	0xc3e	; 0xc3e <oled_print>
	oled_print(options->text,0x04,0x1c,0x25);
     af0:	25 e2       	ldi	r18, 0x25	; 37
     af2:	4c e1       	ldi	r20, 0x1C	; 28
     af4:	64 e0       	ldi	r22, 0x04	; 4
     af6:	f7 01       	movw	r30, r14
     af8:	80 81       	ld	r24, Z
     afa:	91 81       	ldd	r25, Z+1	; 0x01
     afc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <oled_print>
	oled_print(exit_program->text,0x06,0x1c,0x25);
     b00:	25 e2       	ldi	r18, 0x25	; 37
     b02:	4c e1       	ldi	r20, 0x1C	; 28
     b04:	66 e0       	ldi	r22, 0x06	; 6
     b06:	f3 01       	movw	r30, r6
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	0e 94 1f 06 	call	0xc3e	; 0xc3e <oled_print>
	oled_print_letter('#',0x02,0x00,0x08);
     b10:	28 e0       	ldi	r18, 0x08	; 8
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	62 e0       	ldi	r22, 0x02	; 2
     b16:	83 e2       	ldi	r24, 0x23	; 35
     b18:	0e 94 01 06 	call	0xc02	; 0xc02 <oled_print_letter>
	hashtag.moveY = 0;
     b1c:	10 92 91 02 	sts	0x0291, r1
     b20:	10 92 90 02 	sts	0x0290, r1
	hashtag.moveX = 0;
     b24:	10 92 93 02 	sts	0x0293, r1
     b28:	10 92 92 02 	sts	0x0292, r1
	return main_menu;
}
     b2c:	c6 01       	movw	r24, r12
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	df 90       	pop	r13
     b3c:	cf 90       	pop	r12
     b3e:	bf 90       	pop	r11
     b40:	af 90       	pop	r10
     b42:	9f 90       	pop	r9
     b44:	8f 90       	pop	r8
     b46:	7f 90       	pop	r7
     b48:	6f 90       	pop	r6
     b4a:	5f 90       	pop	r5
     b4c:	4f 90       	pop	r4
     b4e:	3f 90       	pop	r3
     b50:	2f 90       	pop	r2
     b52:	08 95       	ret

00000b54 <oled_init>:

int coloumn_counter = 0;
int tall = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     b54:	e0 e0       	ldi	r30, 0x00	; 0
     b56:	f0 e1       	ldi	r31, 0x10	; 16
     b58:	8e ea       	ldi	r24, 0xAE	; 174
     b5a:	80 83       	st	Z, r24
     b5c:	81 ea       	ldi	r24, 0xA1	; 161
     b5e:	80 83       	st	Z, r24
     b60:	8a ed       	ldi	r24, 0xDA	; 218
     b62:	80 83       	st	Z, r24
     b64:	82 e1       	ldi	r24, 0x12	; 18
     b66:	80 83       	st	Z, r24
     b68:	88 ec       	ldi	r24, 0xC8	; 200
     b6a:	80 83       	st	Z, r24
     b6c:	88 ea       	ldi	r24, 0xA8	; 168
     b6e:	80 83       	st	Z, r24
     b70:	8f e3       	ldi	r24, 0x3F	; 63
     b72:	80 83       	st	Z, r24
     b74:	85 ed       	ldi	r24, 0xD5	; 213
     b76:	80 83       	st	Z, r24
     b78:	80 e8       	ldi	r24, 0x80	; 128
     b7a:	80 83       	st	Z, r24
     b7c:	81 e8       	ldi	r24, 0x81	; 129
     b7e:	80 83       	st	Z, r24
     b80:	80 e5       	ldi	r24, 0x50	; 80
     b82:	80 83       	st	Z, r24
     b84:	89 ed       	ldi	r24, 0xD9	; 217
     b86:	80 83       	st	Z, r24
     b88:	81 e2       	ldi	r24, 0x21	; 33
     b8a:	80 83       	st	Z, r24
     b8c:	80 e2       	ldi	r24, 0x20	; 32
     b8e:	80 83       	st	Z, r24
     b90:	82 e0       	ldi	r24, 0x02	; 2
     b92:	80 83       	st	Z, r24
     b94:	8b ed       	ldi	r24, 0xDB	; 219
     b96:	80 83       	st	Z, r24
     b98:	80 e3       	ldi	r24, 0x30	; 48
     b9a:	80 83       	st	Z, r24
     b9c:	8d ea       	ldi	r24, 0xAD	; 173
     b9e:	80 83       	st	Z, r24
     ba0:	10 82       	st	Z, r1
     ba2:	84 ea       	ldi	r24, 0xA4	; 164
     ba4:	80 83       	st	Z, r24
     ba6:	86 ea       	ldi	r24, 0xA6	; 166
     ba8:	80 83       	st	Z, r24
     baa:	8f ea       	ldi	r24, 0xAF	; 175
     bac:	80 83       	st	Z, r24
     bae:	08 95       	ret

00000bb0 <oled_clear_page>:
		oled_clear_page(i);
	}
	//oled_init();
}
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
     bb0:	80 55       	subi	r24, 0x50	; 80

int coloumn_counter = 0;
int tall = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     bb2:	e0 e0       	ldi	r30, 0x00	; 0
     bb4:	f0 e1       	ldi	r31, 0x10	; 16
     bb6:	80 83       	st	Z, r24
     bb8:	81 e2       	ldi	r24, 0x21	; 33
     bba:	80 83       	st	Z, r24
     bbc:	10 82       	st	Z, r1
     bbe:	8f e7       	ldi	r24, 0x7F	; 127
     bc0:	80 83       	st	Z, r24
	write_c(coloumn_end);
}
void oled_clear_page(uint8_t page){
	oled_goto_page(page);
	oled_goto_coloumn(0x00,0x7f);
		for (uint8_t i = 0;i<0x7f;i++){
     bc2:	80 e0       	ldi	r24, 0x00	; 0

int coloumn_counter = 0;
int tall = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     bc4:	21 e2       	ldi	r18, 0x21	; 33
     bc6:	9f e7       	ldi	r25, 0x7F	; 127
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b2 e1       	ldi	r27, 0x12	; 18

int coloumn_counter = 0;
int tall = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     bcc:	20 83       	st	Z, r18
     bce:	80 83       	st	Z, r24
     bd0:	90 83       	st	Z, r25
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     bd2:	1c 92       	st	X, r1
	write_c(coloumn_end);
}
void oled_clear_page(uint8_t page){
	oled_goto_page(page);
	oled_goto_coloumn(0x00,0x7f);
		for (uint8_t i = 0;i<0x7f;i++){
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	8f 37       	cpi	r24, 0x7F	; 127
     bd8:	c9 f7       	brne	.-14     	; 0xbcc <oled_clear_page+0x1c>
			oled_goto_coloumn(i,0x7f);
			write_d(0x00);
		}
}
     bda:	08 95       	ret

00000bdc <oled_reset>:
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
     bdc:	cf 93       	push	r28
	for (uint8_t i=0x00; i<0x08;i++){
     bde:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_page(i);
     be0:	8c 2f       	mov	r24, r28
     be2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <oled_clear_page>
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
	for (uint8_t i=0x00; i<0x08;i++){
     be6:	cf 5f       	subi	r28, 0xFF	; 255
     be8:	c8 30       	cpi	r28, 0x08	; 8
     bea:	d1 f7       	brne	.-12     	; 0xbe0 <oled_reset+0x4>
		oled_clear_page(i);
	}
	//oled_init();
}
     bec:	cf 91       	pop	r28
     bee:	08 95       	ret

00000bf0 <oled_pos>:
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
     bf0:	80 55       	subi	r24, 0x50	; 80

int coloumn_counter = 0;
int tall = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     bf2:	e0 e0       	ldi	r30, 0x00	; 0
     bf4:	f0 e1       	ldi	r31, 0x10	; 16
     bf6:	80 83       	st	Z, r24
     bf8:	81 e2       	ldi	r24, 0x21	; 33
     bfa:	80 83       	st	Z, r24
     bfc:	60 83       	st	Z, r22
     bfe:	40 83       	st	Z, r20
     c00:	08 95       	ret

00000c02 <oled_print_letter>:
			oled_goto_coloumn(i,0x7f);
			write_d(0x00);
		}
}

void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
     c02:	cf 93       	push	r28
     c04:	c8 2f       	mov	r28, r24
     c06:	86 2f       	mov	r24, r22
     c08:	64 2f       	mov	r22, r20
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
     c0a:	42 2f       	mov	r20, r18
     c0c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <oled_pos>
     c10:	ec 2f       	mov	r30, r28
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	e0 59       	subi	r30, 0x90	; 144
     c22:	f0 40       	sbci	r31, 0x00	; 0
	int ltr;
	for (int i = 0;i<8;i++){
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     c28:	a0 e0       	ldi	r26, 0x00	; 0
     c2a:	b2 e1       	ldi	r27, 0x12	; 18
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
		ltr = pgm_read_byte(&(font8[letter-32][i]));
     c2c:	24 91       	lpm	r18, Z
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     c2e:	2c 93       	st	X, r18
void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	88 30       	cpi	r24, 0x08	; 8
     c36:	91 05       	cpc	r25, r1
     c38:	c9 f7       	brne	.-14     	; 0xc2c <oled_print_letter+0x2a>
		ltr = pgm_read_byte(&(font8[letter-32][i]));
		write_d(ltr);
	}
	//printf("printet letter\n");
}
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret

00000c3e <oled_print>:
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}


void oled_print(char* word,uint8_t page,uint8_t coloumn_start,uint8_t coloumn_end){
     c3e:	df 92       	push	r13
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	8c 01       	movw	r16, r24
     c4e:	e6 2e       	mov	r14, r22
	
	//uint8_t coloumn_start = 0x09;
	//uint8_t coloumn_end = 0x11;
	//uint8_t page = 0x02;	
	for (int i = 0; word[i] != '\0'; i++){
     c50:	fc 01       	movw	r30, r24
     c52:	80 81       	ld	r24, Z
     c54:	88 23       	and	r24, r24
     c56:	e1 f0       	breq	.+56     	; 0xc90 <oled_print+0x52>
     c58:	f4 2e       	mov	r15, r20
     c5a:	c0 e0       	ldi	r28, 0x00	; 0
     c5c:	d0 e0       	ldi	r29, 0x00	; 0
     c5e:	d2 2e       	mov	r13, r18
     c60:	d4 1a       	sub	r13, r20
     c62:	2d 2d       	mov	r18, r13
     c64:	2f 0d       	add	r18, r15
		if(word[i] == 44){
     c66:	8c 32       	cpi	r24, 0x2C	; 44
     c68:	11 f4       	brne	.+4      	; 0xc6e <oled_print+0x30>
			page +=0x01;
     c6a:	e3 94       	inc	r14
			//coloumn_start = 0x09;
			//coloumn_end = 0x11;
			i++;
     c6c:	21 96       	adiw	r28, 0x01	; 1
		}			
		oled_print_letter(word[i], page, coloumn_start,coloumn_end);
     c6e:	f8 01       	movw	r30, r16
     c70:	ec 0f       	add	r30, r28
     c72:	fd 1f       	adc	r31, r29
     c74:	4f 2d       	mov	r20, r15
     c76:	6e 2d       	mov	r22, r14
     c78:	80 81       	ld	r24, Z
     c7a:	0e 94 01 06 	call	0xc02	; 0xc02 <oled_print_letter>
		coloumn_start += 0x09;
     c7e:	f9 e0       	ldi	r31, 0x09	; 9
     c80:	ff 0e       	add	r15, r31
void oled_print(char* word,uint8_t page,uint8_t coloumn_start,uint8_t coloumn_end){
	
	//uint8_t coloumn_start = 0x09;
	//uint8_t coloumn_end = 0x11;
	//uint8_t page = 0x02;	
	for (int i = 0; word[i] != '\0'; i++){
     c82:	21 96       	adiw	r28, 0x01	; 1
     c84:	f8 01       	movw	r30, r16
     c86:	ec 0f       	add	r30, r28
     c88:	fd 1f       	adc	r31, r29
     c8a:	80 81       	ld	r24, Z
     c8c:	81 11       	cpse	r24, r1
     c8e:	e9 cf       	rjmp	.-46     	; 0xc62 <oled_print+0x24>
		coloumn_end += 0x09;


	}
	
}
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	08 95       	ret

00000ca0 <SPI_MasterInit>:

#include "SPI.h"

void SPI_MasterInit(void){
	/* Set MOSI,SCK and SS output, all others input */
	DDRB = (1<<DD_MOSI) | (1<<DD_SCK) | (1 << DD_SS) | (1 << PB0);
     ca0:	81 eb       	ldi	r24, 0xB1	; 177
     ca2:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
     ca4:	81 e5       	ldi	r24, 0x51	; 81
     ca6:	8d b9       	out	0x0d, r24	; 13
     ca8:	08 95       	ret

00000caa <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData){
	/* Start transmission */
	SPDR = cData;
     caa:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while	(!(SPSR & (1<<SPIF)));
     cac:	77 9b       	sbis	0x0e, 7	; 14
     cae:	fe cf       	rjmp	.-4      	; 0xcac <SPI_MasterTransmit+0x2>
}
     cb0:	08 95       	ret

00000cb2 <SPI_MasterReceive>:

char SPI_MasterReceive(void){
	/* Send dummy data to read from slave */	
	SPI_MasterTransmit(0);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	0e 94 55 06 	call	0xcaa	; 0xcaa <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	// while	(!(SPSR & (1<<SPIF)));
	
	/* Return data register */
	return	SPDR;
     cb8:	8f b1       	in	r24, 0x0f	; 15
     cba:	08 95       	ret

00000cbc <menu_start_game>:
 */ 
#include "menu_functions.h"
#include "menu_system.h"
#include "CAN_bus.h"
int menu_start_game(int mode, int opt){
	start_game(mode, opt);
     cbc:	0e 94 ed 02 	call	0x5da	; 0x5da <start_game>
}
     cc0:	08 95       	ret

00000cc2 <menu_print_HS>:

int menu_print_HS(int mode, int opt){
	
}
     cc2:	08 95       	ret

00000cc4 <menu_reset_HS>:

int menu_reset_HS(int mode, int opt){
	
}
     cc4:	08 95       	ret

00000cc6 <menu_choose_goalie_mode>:

int menu_choose_goalie_mode(int mode, int opt){
	return 2;
}
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	08 95       	ret

00000ccc <menu_choose_survival_mode>:

int menu_choose_survival_mode(int mode, int opt){
	return 1;
}
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	08 95       	ret

00000cd2 <menu_controller_joystick>:

int menu_controller_joystick(int mode, int opt){
	return 2;
}
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	08 95       	ret

00000cd8 <menu_controller_slider>:

int menu_controller_slider(int mode, int opt){
	return 1;
}
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	08 95       	ret

00000cde <program_exit>:

int program_exit(int mode, int opt){
	exit(1);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 12 0b 	call	0x1624	; 0x1624 <_exit>

00000ce6 <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

// Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     ce6:	5d 9b       	sbis	0x0b, 5	; 11
     ce8:	fe cf       	rjmp	.-4      	; 0xce6 <USART_Transmit>
  
//Put data into buffer, sends the data
	UDR0 = data;
     cea:	8c b9       	out	0x0c, r24	; 12
     cec:	08 95       	ret

00000cee <USART_Receive>:
}

unsigned char USART_Receive( void ){

//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
     cee:	5f 9b       	sbis	0x0b, 7	; 11
     cf0:	fe cf       	rjmp	.-4      	; 0xcee <USART_Receive>
//Get and return received data from buffer
	return UDR0;
     cf2:	8c b1       	in	r24, 0x0c	; 12
}
     cf4:	08 95       	ret

00000cf6 <EXT_MEM_Init>:
#include <avr/io.h>
#include "uart.h"
#include <stdlib.h>

void EXT_MEM_Init(void){
	set_bit(MCUCR,SRE);
     cf6:	85 b7       	in	r24, 0x35	; 53
     cf8:	80 68       	ori	r24, 0x80	; 128
     cfa:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
     cfc:	80 b7       	in	r24, 0x30	; 48
     cfe:	80 62       	ori	r24, 0x20	; 32
     d00:	80 bf       	out	0x30, r24	; 48
     d02:	08 95       	ret

00000d04 <USART_Init>:
	//set_bit(SFIOR,XMM0);
}
void USART_Init( unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     d04:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     d06:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter	*/
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
     d08:	88 e1       	ldi	r24, 0x18	; 24
     d0a:	8a b9       	out	0x0a, r24	; 10
	fdevopen(USART_Transmit,USART_Receive);
     d0c:	67 e7       	ldi	r22, 0x77	; 119
     d0e:	76 e0       	ldi	r23, 0x06	; 6
     d10:	83 e7       	ldi	r24, 0x73	; 115
     d12:	96 e0       	ldi	r25, 0x06	; 6
     d14:	0e 94 b4 07 	call	0xf68	; 0xf68 <fdevopen>
     d18:	08 95       	ret

00000d1a <malloc>:
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	82 30       	cpi	r24, 0x02	; 2
     d20:	91 05       	cpc	r25, r1
     d22:	10 f4       	brcc	.+4      	; 0xd28 <malloc+0xe>
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	e0 91 96 02 	lds	r30, 0x0296
     d2c:	f0 91 97 02 	lds	r31, 0x0297
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	a0 e0       	ldi	r26, 0x00	; 0
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	30 97       	sbiw	r30, 0x00	; 0
     d3a:	39 f1       	breq	.+78     	; 0xd8a <malloc+0x70>
     d3c:	40 81       	ld	r20, Z
     d3e:	51 81       	ldd	r21, Z+1	; 0x01
     d40:	48 17       	cp	r20, r24
     d42:	59 07       	cpc	r21, r25
     d44:	b8 f0       	brcs	.+46     	; 0xd74 <malloc+0x5a>
     d46:	48 17       	cp	r20, r24
     d48:	59 07       	cpc	r21, r25
     d4a:	71 f4       	brne	.+28     	; 0xd68 <malloc+0x4e>
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	10 97       	sbiw	r26, 0x00	; 0
     d52:	29 f0       	breq	.+10     	; 0xd5e <malloc+0x44>
     d54:	13 96       	adiw	r26, 0x03	; 3
     d56:	9c 93       	st	X, r25
     d58:	8e 93       	st	-X, r24
     d5a:	12 97       	sbiw	r26, 0x02	; 2
     d5c:	2c c0       	rjmp	.+88     	; 0xdb6 <malloc+0x9c>
     d5e:	90 93 97 02 	sts	0x0297, r25
     d62:	80 93 96 02 	sts	0x0296, r24
     d66:	27 c0       	rjmp	.+78     	; 0xdb6 <malloc+0x9c>
     d68:	21 15       	cp	r18, r1
     d6a:	31 05       	cpc	r19, r1
     d6c:	31 f0       	breq	.+12     	; 0xd7a <malloc+0x60>
     d6e:	42 17       	cp	r20, r18
     d70:	53 07       	cpc	r21, r19
     d72:	18 f0       	brcs	.+6      	; 0xd7a <malloc+0x60>
     d74:	a9 01       	movw	r20, r18
     d76:	db 01       	movw	r26, r22
     d78:	01 c0       	rjmp	.+2      	; 0xd7c <malloc+0x62>
     d7a:	ef 01       	movw	r28, r30
     d7c:	9a 01       	movw	r18, r20
     d7e:	bd 01       	movw	r22, r26
     d80:	df 01       	movw	r26, r30
     d82:	02 80       	ldd	r0, Z+2	; 0x02
     d84:	f3 81       	ldd	r31, Z+3	; 0x03
     d86:	e0 2d       	mov	r30, r0
     d88:	d7 cf       	rjmp	.-82     	; 0xd38 <malloc+0x1e>
     d8a:	21 15       	cp	r18, r1
     d8c:	31 05       	cpc	r19, r1
     d8e:	f9 f0       	breq	.+62     	; 0xdce <malloc+0xb4>
     d90:	28 1b       	sub	r18, r24
     d92:	39 0b       	sbc	r19, r25
     d94:	24 30       	cpi	r18, 0x04	; 4
     d96:	31 05       	cpc	r19, r1
     d98:	80 f4       	brcc	.+32     	; 0xdba <malloc+0xa0>
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	9b 81       	ldd	r25, Y+3	; 0x03
     d9e:	61 15       	cp	r22, r1
     da0:	71 05       	cpc	r23, r1
     da2:	21 f0       	breq	.+8      	; 0xdac <malloc+0x92>
     da4:	fb 01       	movw	r30, r22
     da6:	93 83       	std	Z+3, r25	; 0x03
     da8:	82 83       	std	Z+2, r24	; 0x02
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <malloc+0x9a>
     dac:	90 93 97 02 	sts	0x0297, r25
     db0:	80 93 96 02 	sts	0x0296, r24
     db4:	fe 01       	movw	r30, r28
     db6:	32 96       	adiw	r30, 0x02	; 2
     db8:	44 c0       	rjmp	.+136    	; 0xe42 <malloc+0x128>
     dba:	fe 01       	movw	r30, r28
     dbc:	e2 0f       	add	r30, r18
     dbe:	f3 1f       	adc	r31, r19
     dc0:	81 93       	st	Z+, r24
     dc2:	91 93       	st	Z+, r25
     dc4:	22 50       	subi	r18, 0x02	; 2
     dc6:	31 09       	sbc	r19, r1
     dc8:	39 83       	std	Y+1, r19	; 0x01
     dca:	28 83       	st	Y, r18
     dcc:	3a c0       	rjmp	.+116    	; 0xe42 <malloc+0x128>
     dce:	20 91 94 02 	lds	r18, 0x0294
     dd2:	30 91 95 02 	lds	r19, 0x0295
     dd6:	23 2b       	or	r18, r19
     dd8:	41 f4       	brne	.+16     	; 0xdea <malloc+0xd0>
     dda:	20 91 02 01 	lds	r18, 0x0102
     dde:	30 91 03 01 	lds	r19, 0x0103
     de2:	30 93 95 02 	sts	0x0295, r19
     de6:	20 93 94 02 	sts	0x0294, r18
     dea:	20 91 00 01 	lds	r18, 0x0100
     dee:	30 91 01 01 	lds	r19, 0x0101
     df2:	21 15       	cp	r18, r1
     df4:	31 05       	cpc	r19, r1
     df6:	41 f4       	brne	.+16     	; 0xe08 <malloc+0xee>
     df8:	2d b7       	in	r18, 0x3d	; 61
     dfa:	3e b7       	in	r19, 0x3e	; 62
     dfc:	40 91 04 01 	lds	r20, 0x0104
     e00:	50 91 05 01 	lds	r21, 0x0105
     e04:	24 1b       	sub	r18, r20
     e06:	35 0b       	sbc	r19, r21
     e08:	e0 91 94 02 	lds	r30, 0x0294
     e0c:	f0 91 95 02 	lds	r31, 0x0295
     e10:	e2 17       	cp	r30, r18
     e12:	f3 07       	cpc	r31, r19
     e14:	a0 f4       	brcc	.+40     	; 0xe3e <malloc+0x124>
     e16:	2e 1b       	sub	r18, r30
     e18:	3f 0b       	sbc	r19, r31
     e1a:	28 17       	cp	r18, r24
     e1c:	39 07       	cpc	r19, r25
     e1e:	78 f0       	brcs	.+30     	; 0xe3e <malloc+0x124>
     e20:	ac 01       	movw	r20, r24
     e22:	4e 5f       	subi	r20, 0xFE	; 254
     e24:	5f 4f       	sbci	r21, 0xFF	; 255
     e26:	24 17       	cp	r18, r20
     e28:	35 07       	cpc	r19, r21
     e2a:	48 f0       	brcs	.+18     	; 0xe3e <malloc+0x124>
     e2c:	4e 0f       	add	r20, r30
     e2e:	5f 1f       	adc	r21, r31
     e30:	50 93 95 02 	sts	0x0295, r21
     e34:	40 93 94 02 	sts	0x0294, r20
     e38:	81 93       	st	Z+, r24
     e3a:	91 93       	st	Z+, r25
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <malloc+0x128>
     e3e:	e0 e0       	ldi	r30, 0x00	; 0
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	cf 01       	movw	r24, r30
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	08 95       	ret

00000e4a <free>:
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	09 f4       	brne	.+2      	; 0xe54 <free+0xa>
     e52:	87 c0       	rjmp	.+270    	; 0xf62 <free+0x118>
     e54:	fc 01       	movw	r30, r24
     e56:	32 97       	sbiw	r30, 0x02	; 2
     e58:	13 82       	std	Z+3, r1	; 0x03
     e5a:	12 82       	std	Z+2, r1	; 0x02
     e5c:	c0 91 96 02 	lds	r28, 0x0296
     e60:	d0 91 97 02 	lds	r29, 0x0297
     e64:	20 97       	sbiw	r28, 0x00	; 0
     e66:	81 f4       	brne	.+32     	; 0xe88 <free+0x3e>
     e68:	20 81       	ld	r18, Z
     e6a:	31 81       	ldd	r19, Z+1	; 0x01
     e6c:	28 0f       	add	r18, r24
     e6e:	39 1f       	adc	r19, r25
     e70:	80 91 94 02 	lds	r24, 0x0294
     e74:	90 91 95 02 	lds	r25, 0x0295
     e78:	82 17       	cp	r24, r18
     e7a:	93 07       	cpc	r25, r19
     e7c:	79 f5       	brne	.+94     	; 0xedc <free+0x92>
     e7e:	f0 93 95 02 	sts	0x0295, r31
     e82:	e0 93 94 02 	sts	0x0294, r30
     e86:	6d c0       	rjmp	.+218    	; 0xf62 <free+0x118>
     e88:	de 01       	movw	r26, r28
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	ae 17       	cp	r26, r30
     e90:	bf 07       	cpc	r27, r31
     e92:	50 f4       	brcc	.+20     	; 0xea8 <free+0x5e>
     e94:	12 96       	adiw	r26, 0x02	; 2
     e96:	4d 91       	ld	r20, X+
     e98:	5c 91       	ld	r21, X
     e9a:	13 97       	sbiw	r26, 0x03	; 3
     e9c:	9d 01       	movw	r18, r26
     e9e:	41 15       	cp	r20, r1
     ea0:	51 05       	cpc	r21, r1
     ea2:	09 f1       	breq	.+66     	; 0xee6 <free+0x9c>
     ea4:	da 01       	movw	r26, r20
     ea6:	f3 cf       	rjmp	.-26     	; 0xe8e <free+0x44>
     ea8:	b3 83       	std	Z+3, r27	; 0x03
     eaa:	a2 83       	std	Z+2, r26	; 0x02
     eac:	40 81       	ld	r20, Z
     eae:	51 81       	ldd	r21, Z+1	; 0x01
     eb0:	84 0f       	add	r24, r20
     eb2:	95 1f       	adc	r25, r21
     eb4:	8a 17       	cp	r24, r26
     eb6:	9b 07       	cpc	r25, r27
     eb8:	71 f4       	brne	.+28     	; 0xed6 <free+0x8c>
     eba:	8d 91       	ld	r24, X+
     ebc:	9c 91       	ld	r25, X
     ebe:	11 97       	sbiw	r26, 0x01	; 1
     ec0:	84 0f       	add	r24, r20
     ec2:	95 1f       	adc	r25, r21
     ec4:	02 96       	adiw	r24, 0x02	; 2
     ec6:	91 83       	std	Z+1, r25	; 0x01
     ec8:	80 83       	st	Z, r24
     eca:	12 96       	adiw	r26, 0x02	; 2
     ecc:	8d 91       	ld	r24, X+
     ece:	9c 91       	ld	r25, X
     ed0:	13 97       	sbiw	r26, 0x03	; 3
     ed2:	93 83       	std	Z+3, r25	; 0x03
     ed4:	82 83       	std	Z+2, r24	; 0x02
     ed6:	21 15       	cp	r18, r1
     ed8:	31 05       	cpc	r19, r1
     eda:	29 f4       	brne	.+10     	; 0xee6 <free+0x9c>
     edc:	f0 93 97 02 	sts	0x0297, r31
     ee0:	e0 93 96 02 	sts	0x0296, r30
     ee4:	3e c0       	rjmp	.+124    	; 0xf62 <free+0x118>
     ee6:	d9 01       	movw	r26, r18
     ee8:	13 96       	adiw	r26, 0x03	; 3
     eea:	fc 93       	st	X, r31
     eec:	ee 93       	st	-X, r30
     eee:	12 97       	sbiw	r26, 0x02	; 2
     ef0:	4d 91       	ld	r20, X+
     ef2:	5d 91       	ld	r21, X+
     ef4:	a4 0f       	add	r26, r20
     ef6:	b5 1f       	adc	r27, r21
     ef8:	ea 17       	cp	r30, r26
     efa:	fb 07       	cpc	r31, r27
     efc:	79 f4       	brne	.+30     	; 0xf1c <free+0xd2>
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	84 0f       	add	r24, r20
     f04:	95 1f       	adc	r25, r21
     f06:	02 96       	adiw	r24, 0x02	; 2
     f08:	d9 01       	movw	r26, r18
     f0a:	11 96       	adiw	r26, 0x01	; 1
     f0c:	9c 93       	st	X, r25
     f0e:	8e 93       	st	-X, r24
     f10:	82 81       	ldd	r24, Z+2	; 0x02
     f12:	93 81       	ldd	r25, Z+3	; 0x03
     f14:	13 96       	adiw	r26, 0x03	; 3
     f16:	9c 93       	st	X, r25
     f18:	8e 93       	st	-X, r24
     f1a:	12 97       	sbiw	r26, 0x02	; 2
     f1c:	e0 e0       	ldi	r30, 0x00	; 0
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	9b 81       	ldd	r25, Y+3	; 0x03
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	19 f0       	breq	.+6      	; 0xf2e <free+0xe4>
     f28:	fe 01       	movw	r30, r28
     f2a:	ec 01       	movw	r28, r24
     f2c:	f9 cf       	rjmp	.-14     	; 0xf20 <free+0xd6>
     f2e:	ce 01       	movw	r24, r28
     f30:	02 96       	adiw	r24, 0x02	; 2
     f32:	28 81       	ld	r18, Y
     f34:	39 81       	ldd	r19, Y+1	; 0x01
     f36:	82 0f       	add	r24, r18
     f38:	93 1f       	adc	r25, r19
     f3a:	20 91 94 02 	lds	r18, 0x0294
     f3e:	30 91 95 02 	lds	r19, 0x0295
     f42:	28 17       	cp	r18, r24
     f44:	39 07       	cpc	r19, r25
     f46:	69 f4       	brne	.+26     	; 0xf62 <free+0x118>
     f48:	30 97       	sbiw	r30, 0x00	; 0
     f4a:	29 f4       	brne	.+10     	; 0xf56 <free+0x10c>
     f4c:	10 92 97 02 	sts	0x0297, r1
     f50:	10 92 96 02 	sts	0x0296, r1
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <free+0x110>
     f56:	13 82       	std	Z+3, r1	; 0x03
     f58:	12 82       	std	Z+2, r1	; 0x02
     f5a:	d0 93 95 02 	sts	0x0295, r29
     f5e:	c0 93 94 02 	sts	0x0294, r28
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <fdevopen>:
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	ec 01       	movw	r28, r24
     f72:	8b 01       	movw	r16, r22
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	31 f4       	brne	.+12     	; 0xf84 <fdevopen+0x1c>
     f78:	61 15       	cp	r22, r1
     f7a:	71 05       	cpc	r23, r1
     f7c:	19 f4       	brne	.+6      	; 0xf84 <fdevopen+0x1c>
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	38 c0       	rjmp	.+112    	; 0xff4 <fdevopen+0x8c>
     f84:	6e e0       	ldi	r22, 0x0E	; 14
     f86:	70 e0       	ldi	r23, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 12 0a 	call	0x1424	; 0x1424 <calloc>
     f90:	fc 01       	movw	r30, r24
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	a1 f3       	breq	.-24     	; 0xf7e <fdevopen+0x16>
     f96:	80 e8       	ldi	r24, 0x80	; 128
     f98:	83 83       	std	Z+3, r24	; 0x03
     f9a:	01 15       	cp	r16, r1
     f9c:	11 05       	cpc	r17, r1
     f9e:	71 f0       	breq	.+28     	; 0xfbc <fdevopen+0x54>
     fa0:	13 87       	std	Z+11, r17	; 0x0b
     fa2:	02 87       	std	Z+10, r16	; 0x0a
     fa4:	81 e8       	ldi	r24, 0x81	; 129
     fa6:	83 83       	std	Z+3, r24	; 0x03
     fa8:	80 91 98 02 	lds	r24, 0x0298
     fac:	90 91 99 02 	lds	r25, 0x0299
     fb0:	89 2b       	or	r24, r25
     fb2:	21 f4       	brne	.+8      	; 0xfbc <fdevopen+0x54>
     fb4:	f0 93 99 02 	sts	0x0299, r31
     fb8:	e0 93 98 02 	sts	0x0298, r30
     fbc:	20 97       	sbiw	r28, 0x00	; 0
     fbe:	c9 f0       	breq	.+50     	; 0xff2 <fdevopen+0x8a>
     fc0:	d1 87       	std	Z+9, r29	; 0x09
     fc2:	c0 87       	std	Z+8, r28	; 0x08
     fc4:	83 81       	ldd	r24, Z+3	; 0x03
     fc6:	82 60       	ori	r24, 0x02	; 2
     fc8:	83 83       	std	Z+3, r24	; 0x03
     fca:	80 91 9a 02 	lds	r24, 0x029A
     fce:	90 91 9b 02 	lds	r25, 0x029B
     fd2:	89 2b       	or	r24, r25
     fd4:	71 f4       	brne	.+28     	; 0xff2 <fdevopen+0x8a>
     fd6:	f0 93 9b 02 	sts	0x029B, r31
     fda:	e0 93 9a 02 	sts	0x029A, r30
     fde:	80 91 9c 02 	lds	r24, 0x029C
     fe2:	90 91 9d 02 	lds	r25, 0x029D
     fe6:	89 2b       	or	r24, r25
     fe8:	21 f4       	brne	.+8      	; 0xff2 <fdevopen+0x8a>
     fea:	f0 93 9d 02 	sts	0x029D, r31
     fee:	e0 93 9c 02 	sts	0x029C, r30
     ff2:	cf 01       	movw	r24, r30
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <printf>:
     ffe:	a0 e0       	ldi	r26, 0x00	; 0
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e0       	ldi	r30, 0x05	; 5
    1004:	f8 e0       	ldi	r31, 0x08	; 8
    1006:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__prologue_saves__+0x20>
    100a:	fe 01       	movw	r30, r28
    100c:	35 96       	adiw	r30, 0x05	; 5
    100e:	61 91       	ld	r22, Z+
    1010:	71 91       	ld	r23, Z+
    1012:	af 01       	movw	r20, r30
    1014:	80 91 9a 02 	lds	r24, 0x029A
    1018:	90 91 9b 02 	lds	r25, 0x029B
    101c:	0e 94 40 08 	call	0x1080	; 0x1080 <vfprintf>
    1020:	e2 e0       	ldi	r30, 0x02	; 2
    1022:	0c 94 07 0b 	jmp	0x160e	; 0x160e <__epilogue_restores__+0x20>

00001026 <puts>:
    1026:	0f 93       	push	r16
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	e0 91 9a 02 	lds	r30, 0x029A
    1032:	f0 91 9b 02 	lds	r31, 0x029B
    1036:	23 81       	ldd	r18, Z+3	; 0x03
    1038:	21 ff       	sbrs	r18, 1
    103a:	1b c0       	rjmp	.+54     	; 0x1072 <puts+0x4c>
    103c:	ec 01       	movw	r28, r24
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	89 91       	ld	r24, Y+
    1044:	60 91 9a 02 	lds	r22, 0x029A
    1048:	70 91 9b 02 	lds	r23, 0x029B
    104c:	db 01       	movw	r26, r22
    104e:	18 96       	adiw	r26, 0x08	; 8
    1050:	ed 91       	ld	r30, X+
    1052:	fc 91       	ld	r31, X
    1054:	19 97       	sbiw	r26, 0x09	; 9
    1056:	88 23       	and	r24, r24
    1058:	31 f0       	breq	.+12     	; 0x1066 <puts+0x40>
    105a:	09 95       	icall
    105c:	89 2b       	or	r24, r25
    105e:	89 f3       	breq	.-30     	; 0x1042 <puts+0x1c>
    1060:	0f ef       	ldi	r16, 0xFF	; 255
    1062:	1f ef       	ldi	r17, 0xFF	; 255
    1064:	ee cf       	rjmp	.-36     	; 0x1042 <puts+0x1c>
    1066:	8a e0       	ldi	r24, 0x0A	; 10
    1068:	09 95       	icall
    106a:	89 2b       	or	r24, r25
    106c:	11 f4       	brne	.+4      	; 0x1072 <puts+0x4c>
    106e:	c8 01       	movw	r24, r16
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <puts+0x50>
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	9f ef       	ldi	r25, 0xFF	; 255
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	1f 91       	pop	r17
    107c:	0f 91       	pop	r16
    107e:	08 95       	ret

00001080 <vfprintf>:
    1080:	ac e0       	ldi	r26, 0x0C	; 12
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e4       	ldi	r30, 0x46	; 70
    1086:	f8 e0       	ldi	r31, 0x08	; 8
    1088:	0c 94 db 0a 	jmp	0x15b6	; 0x15b6 <__prologue_saves__>
    108c:	7c 01       	movw	r14, r24
    108e:	6b 01       	movw	r12, r22
    1090:	8a 01       	movw	r16, r20
    1092:	fc 01       	movw	r30, r24
    1094:	17 82       	std	Z+7, r1	; 0x07
    1096:	16 82       	std	Z+6, r1	; 0x06
    1098:	83 81       	ldd	r24, Z+3	; 0x03
    109a:	81 ff       	sbrs	r24, 1
    109c:	bd c1       	rjmp	.+890    	; 0x1418 <vfprintf+0x398>
    109e:	ce 01       	movw	r24, r28
    10a0:	01 96       	adiw	r24, 0x01	; 1
    10a2:	4c 01       	movw	r8, r24
    10a4:	f7 01       	movw	r30, r14
    10a6:	93 81       	ldd	r25, Z+3	; 0x03
    10a8:	f6 01       	movw	r30, r12
    10aa:	93 fd       	sbrc	r25, 3
    10ac:	85 91       	lpm	r24, Z+
    10ae:	93 ff       	sbrs	r25, 3
    10b0:	81 91       	ld	r24, Z+
    10b2:	6f 01       	movw	r12, r30
    10b4:	88 23       	and	r24, r24
    10b6:	09 f4       	brne	.+2      	; 0x10ba <vfprintf+0x3a>
    10b8:	ab c1       	rjmp	.+854    	; 0x1410 <vfprintf+0x390>
    10ba:	85 32       	cpi	r24, 0x25	; 37
    10bc:	39 f4       	brne	.+14     	; 0x10cc <vfprintf+0x4c>
    10be:	93 fd       	sbrc	r25, 3
    10c0:	85 91       	lpm	r24, Z+
    10c2:	93 ff       	sbrs	r25, 3
    10c4:	81 91       	ld	r24, Z+
    10c6:	6f 01       	movw	r12, r30
    10c8:	85 32       	cpi	r24, 0x25	; 37
    10ca:	29 f4       	brne	.+10     	; 0x10d6 <vfprintf+0x56>
    10cc:	b7 01       	movw	r22, r14
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <fputc>
    10d4:	e7 cf       	rjmp	.-50     	; 0x10a4 <vfprintf+0x24>
    10d6:	51 2c       	mov	r5, r1
    10d8:	31 2c       	mov	r3, r1
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	20 32       	cpi	r18, 0x20	; 32
    10de:	a0 f4       	brcc	.+40     	; 0x1108 <vfprintf+0x88>
    10e0:	8b 32       	cpi	r24, 0x2B	; 43
    10e2:	69 f0       	breq	.+26     	; 0x10fe <vfprintf+0x7e>
    10e4:	30 f4       	brcc	.+12     	; 0x10f2 <vfprintf+0x72>
    10e6:	80 32       	cpi	r24, 0x20	; 32
    10e8:	59 f0       	breq	.+22     	; 0x1100 <vfprintf+0x80>
    10ea:	83 32       	cpi	r24, 0x23	; 35
    10ec:	69 f4       	brne	.+26     	; 0x1108 <vfprintf+0x88>
    10ee:	20 61       	ori	r18, 0x10	; 16
    10f0:	2c c0       	rjmp	.+88     	; 0x114a <vfprintf+0xca>
    10f2:	8d 32       	cpi	r24, 0x2D	; 45
    10f4:	39 f0       	breq	.+14     	; 0x1104 <vfprintf+0x84>
    10f6:	80 33       	cpi	r24, 0x30	; 48
    10f8:	39 f4       	brne	.+14     	; 0x1108 <vfprintf+0x88>
    10fa:	21 60       	ori	r18, 0x01	; 1
    10fc:	26 c0       	rjmp	.+76     	; 0x114a <vfprintf+0xca>
    10fe:	22 60       	ori	r18, 0x02	; 2
    1100:	24 60       	ori	r18, 0x04	; 4
    1102:	23 c0       	rjmp	.+70     	; 0x114a <vfprintf+0xca>
    1104:	28 60       	ori	r18, 0x08	; 8
    1106:	21 c0       	rjmp	.+66     	; 0x114a <vfprintf+0xca>
    1108:	27 fd       	sbrc	r18, 7
    110a:	27 c0       	rjmp	.+78     	; 0x115a <vfprintf+0xda>
    110c:	30 ed       	ldi	r19, 0xD0	; 208
    110e:	38 0f       	add	r19, r24
    1110:	3a 30       	cpi	r19, 0x0A	; 10
    1112:	78 f4       	brcc	.+30     	; 0x1132 <vfprintf+0xb2>
    1114:	26 ff       	sbrs	r18, 6
    1116:	06 c0       	rjmp	.+12     	; 0x1124 <vfprintf+0xa4>
    1118:	fa e0       	ldi	r31, 0x0A	; 10
    111a:	5f 9e       	mul	r5, r31
    111c:	30 0d       	add	r19, r0
    111e:	11 24       	eor	r1, r1
    1120:	53 2e       	mov	r5, r19
    1122:	13 c0       	rjmp	.+38     	; 0x114a <vfprintf+0xca>
    1124:	8a e0       	ldi	r24, 0x0A	; 10
    1126:	38 9e       	mul	r3, r24
    1128:	30 0d       	add	r19, r0
    112a:	11 24       	eor	r1, r1
    112c:	33 2e       	mov	r3, r19
    112e:	20 62       	ori	r18, 0x20	; 32
    1130:	0c c0       	rjmp	.+24     	; 0x114a <vfprintf+0xca>
    1132:	8e 32       	cpi	r24, 0x2E	; 46
    1134:	21 f4       	brne	.+8      	; 0x113e <vfprintf+0xbe>
    1136:	26 fd       	sbrc	r18, 6
    1138:	6b c1       	rjmp	.+726    	; 0x1410 <vfprintf+0x390>
    113a:	20 64       	ori	r18, 0x40	; 64
    113c:	06 c0       	rjmp	.+12     	; 0x114a <vfprintf+0xca>
    113e:	8c 36       	cpi	r24, 0x6C	; 108
    1140:	11 f4       	brne	.+4      	; 0x1146 <vfprintf+0xc6>
    1142:	20 68       	ori	r18, 0x80	; 128
    1144:	02 c0       	rjmp	.+4      	; 0x114a <vfprintf+0xca>
    1146:	88 36       	cpi	r24, 0x68	; 104
    1148:	41 f4       	brne	.+16     	; 0x115a <vfprintf+0xda>
    114a:	f6 01       	movw	r30, r12
    114c:	93 fd       	sbrc	r25, 3
    114e:	85 91       	lpm	r24, Z+
    1150:	93 ff       	sbrs	r25, 3
    1152:	81 91       	ld	r24, Z+
    1154:	6f 01       	movw	r12, r30
    1156:	81 11       	cpse	r24, r1
    1158:	c1 cf       	rjmp	.-126    	; 0x10dc <vfprintf+0x5c>
    115a:	98 2f       	mov	r25, r24
    115c:	9f 7d       	andi	r25, 0xDF	; 223
    115e:	95 54       	subi	r25, 0x45	; 69
    1160:	93 30       	cpi	r25, 0x03	; 3
    1162:	28 f4       	brcc	.+10     	; 0x116e <vfprintf+0xee>
    1164:	0c 5f       	subi	r16, 0xFC	; 252
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	ff e3       	ldi	r31, 0x3F	; 63
    116a:	f9 83       	std	Y+1, r31	; 0x01
    116c:	0d c0       	rjmp	.+26     	; 0x1188 <vfprintf+0x108>
    116e:	83 36       	cpi	r24, 0x63	; 99
    1170:	31 f0       	breq	.+12     	; 0x117e <vfprintf+0xfe>
    1172:	83 37       	cpi	r24, 0x73	; 115
    1174:	71 f0       	breq	.+28     	; 0x1192 <vfprintf+0x112>
    1176:	83 35       	cpi	r24, 0x53	; 83
    1178:	09 f0       	breq	.+2      	; 0x117c <vfprintf+0xfc>
    117a:	5b c0       	rjmp	.+182    	; 0x1232 <vfprintf+0x1b2>
    117c:	22 c0       	rjmp	.+68     	; 0x11c2 <vfprintf+0x142>
    117e:	f8 01       	movw	r30, r16
    1180:	80 81       	ld	r24, Z
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	0e 5f       	subi	r16, 0xFE	; 254
    1186:	1f 4f       	sbci	r17, 0xFF	; 255
    1188:	44 24       	eor	r4, r4
    118a:	43 94       	inc	r4
    118c:	51 2c       	mov	r5, r1
    118e:	54 01       	movw	r10, r8
    1190:	15 c0       	rjmp	.+42     	; 0x11bc <vfprintf+0x13c>
    1192:	38 01       	movw	r6, r16
    1194:	f2 e0       	ldi	r31, 0x02	; 2
    1196:	6f 0e       	add	r6, r31
    1198:	71 1c       	adc	r7, r1
    119a:	f8 01       	movw	r30, r16
    119c:	a0 80       	ld	r10, Z
    119e:	b1 80       	ldd	r11, Z+1	; 0x01
    11a0:	26 ff       	sbrs	r18, 6
    11a2:	03 c0       	rjmp	.+6      	; 0x11aa <vfprintf+0x12a>
    11a4:	65 2d       	mov	r22, r5
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <vfprintf+0x12e>
    11aa:	6f ef       	ldi	r22, 0xFF	; 255
    11ac:	7f ef       	ldi	r23, 0xFF	; 255
    11ae:	c5 01       	movw	r24, r10
    11b0:	2c 87       	std	Y+12, r18	; 0x0c
    11b2:	0e 94 40 0a 	call	0x1480	; 0x1480 <strnlen>
    11b6:	2c 01       	movw	r4, r24
    11b8:	83 01       	movw	r16, r6
    11ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    11bc:	2f 77       	andi	r18, 0x7F	; 127
    11be:	22 2e       	mov	r2, r18
    11c0:	17 c0       	rjmp	.+46     	; 0x11f0 <vfprintf+0x170>
    11c2:	38 01       	movw	r6, r16
    11c4:	f2 e0       	ldi	r31, 0x02	; 2
    11c6:	6f 0e       	add	r6, r31
    11c8:	71 1c       	adc	r7, r1
    11ca:	f8 01       	movw	r30, r16
    11cc:	a0 80       	ld	r10, Z
    11ce:	b1 80       	ldd	r11, Z+1	; 0x01
    11d0:	26 ff       	sbrs	r18, 6
    11d2:	03 c0       	rjmp	.+6      	; 0x11da <vfprintf+0x15a>
    11d4:	65 2d       	mov	r22, r5
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <vfprintf+0x15e>
    11da:	6f ef       	ldi	r22, 0xFF	; 255
    11dc:	7f ef       	ldi	r23, 0xFF	; 255
    11de:	c5 01       	movw	r24, r10
    11e0:	2c 87       	std	Y+12, r18	; 0x0c
    11e2:	0e 94 2e 0a 	call	0x145c	; 0x145c <strnlen_P>
    11e6:	2c 01       	movw	r4, r24
    11e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11ea:	20 68       	ori	r18, 0x80	; 128
    11ec:	22 2e       	mov	r2, r18
    11ee:	83 01       	movw	r16, r6
    11f0:	23 fc       	sbrc	r2, 3
    11f2:	1b c0       	rjmp	.+54     	; 0x122a <vfprintf+0x1aa>
    11f4:	83 2d       	mov	r24, r3
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	48 16       	cp	r4, r24
    11fa:	59 06       	cpc	r5, r25
    11fc:	b0 f4       	brcc	.+44     	; 0x122a <vfprintf+0x1aa>
    11fe:	b7 01       	movw	r22, r14
    1200:	80 e2       	ldi	r24, 0x20	; 32
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 4b 0a 	call	0x1496	; 0x1496 <fputc>
    1208:	3a 94       	dec	r3
    120a:	f4 cf       	rjmp	.-24     	; 0x11f4 <vfprintf+0x174>
    120c:	f5 01       	movw	r30, r10
    120e:	27 fc       	sbrc	r2, 7
    1210:	85 91       	lpm	r24, Z+
    1212:	27 fe       	sbrs	r2, 7
    1214:	81 91       	ld	r24, Z+
    1216:	5f 01       	movw	r10, r30
    1218:	b7 01       	movw	r22, r14
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <fputc>
    1220:	31 10       	cpse	r3, r1
    1222:	3a 94       	dec	r3
    1224:	f1 e0       	ldi	r31, 0x01	; 1
    1226:	4f 1a       	sub	r4, r31
    1228:	51 08       	sbc	r5, r1
    122a:	41 14       	cp	r4, r1
    122c:	51 04       	cpc	r5, r1
    122e:	71 f7       	brne	.-36     	; 0x120c <vfprintf+0x18c>
    1230:	e5 c0       	rjmp	.+458    	; 0x13fc <vfprintf+0x37c>
    1232:	84 36       	cpi	r24, 0x64	; 100
    1234:	11 f0       	breq	.+4      	; 0x123a <vfprintf+0x1ba>
    1236:	89 36       	cpi	r24, 0x69	; 105
    1238:	39 f5       	brne	.+78     	; 0x1288 <vfprintf+0x208>
    123a:	f8 01       	movw	r30, r16
    123c:	27 ff       	sbrs	r18, 7
    123e:	07 c0       	rjmp	.+14     	; 0x124e <vfprintf+0x1ce>
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	0c 5f       	subi	r16, 0xFC	; 252
    124a:	1f 4f       	sbci	r17, 0xFF	; 255
    124c:	08 c0       	rjmp	.+16     	; 0x125e <vfprintf+0x1de>
    124e:	60 81       	ld	r22, Z
    1250:	71 81       	ldd	r23, Z+1	; 0x01
    1252:	88 27       	eor	r24, r24
    1254:	77 fd       	sbrc	r23, 7
    1256:	80 95       	com	r24
    1258:	98 2f       	mov	r25, r24
    125a:	0e 5f       	subi	r16, 0xFE	; 254
    125c:	1f 4f       	sbci	r17, 0xFF	; 255
    125e:	2f 76       	andi	r18, 0x6F	; 111
    1260:	b2 2e       	mov	r11, r18
    1262:	97 ff       	sbrs	r25, 7
    1264:	09 c0       	rjmp	.+18     	; 0x1278 <vfprintf+0x1f8>
    1266:	90 95       	com	r25
    1268:	80 95       	com	r24
    126a:	70 95       	com	r23
    126c:	61 95       	neg	r22
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	20 68       	ori	r18, 0x80	; 128
    1276:	b2 2e       	mov	r11, r18
    1278:	2a e0       	ldi	r18, 0x0A	; 10
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	a4 01       	movw	r20, r8
    127e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__ultoa_invert>
    1282:	a8 2e       	mov	r10, r24
    1284:	a8 18       	sub	r10, r8
    1286:	44 c0       	rjmp	.+136    	; 0x1310 <vfprintf+0x290>
    1288:	85 37       	cpi	r24, 0x75	; 117
    128a:	29 f4       	brne	.+10     	; 0x1296 <vfprintf+0x216>
    128c:	2f 7e       	andi	r18, 0xEF	; 239
    128e:	b2 2e       	mov	r11, r18
    1290:	2a e0       	ldi	r18, 0x0A	; 10
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	25 c0       	rjmp	.+74     	; 0x12e0 <vfprintf+0x260>
    1296:	f2 2f       	mov	r31, r18
    1298:	f9 7f       	andi	r31, 0xF9	; 249
    129a:	bf 2e       	mov	r11, r31
    129c:	8f 36       	cpi	r24, 0x6F	; 111
    129e:	c1 f0       	breq	.+48     	; 0x12d0 <vfprintf+0x250>
    12a0:	18 f4       	brcc	.+6      	; 0x12a8 <vfprintf+0x228>
    12a2:	88 35       	cpi	r24, 0x58	; 88
    12a4:	79 f0       	breq	.+30     	; 0x12c4 <vfprintf+0x244>
    12a6:	b4 c0       	rjmp	.+360    	; 0x1410 <vfprintf+0x390>
    12a8:	80 37       	cpi	r24, 0x70	; 112
    12aa:	19 f0       	breq	.+6      	; 0x12b2 <vfprintf+0x232>
    12ac:	88 37       	cpi	r24, 0x78	; 120
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <vfprintf+0x238>
    12b0:	af c0       	rjmp	.+350    	; 0x1410 <vfprintf+0x390>
    12b2:	2f 2f       	mov	r18, r31
    12b4:	20 61       	ori	r18, 0x10	; 16
    12b6:	b2 2e       	mov	r11, r18
    12b8:	b4 fe       	sbrs	r11, 4
    12ba:	0d c0       	rjmp	.+26     	; 0x12d6 <vfprintf+0x256>
    12bc:	8b 2d       	mov	r24, r11
    12be:	84 60       	ori	r24, 0x04	; 4
    12c0:	b8 2e       	mov	r11, r24
    12c2:	09 c0       	rjmp	.+18     	; 0x12d6 <vfprintf+0x256>
    12c4:	24 ff       	sbrs	r18, 4
    12c6:	0a c0       	rjmp	.+20     	; 0x12dc <vfprintf+0x25c>
    12c8:	9f 2f       	mov	r25, r31
    12ca:	96 60       	ori	r25, 0x06	; 6
    12cc:	b9 2e       	mov	r11, r25
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <vfprintf+0x25c>
    12d0:	28 e0       	ldi	r18, 0x08	; 8
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	05 c0       	rjmp	.+10     	; 0x12e0 <vfprintf+0x260>
    12d6:	20 e1       	ldi	r18, 0x10	; 16
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <vfprintf+0x260>
    12dc:	20 e1       	ldi	r18, 0x10	; 16
    12de:	32 e0       	ldi	r19, 0x02	; 2
    12e0:	f8 01       	movw	r30, r16
    12e2:	b7 fe       	sbrs	r11, 7
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <vfprintf+0x274>
    12e6:	60 81       	ld	r22, Z
    12e8:	71 81       	ldd	r23, Z+1	; 0x01
    12ea:	82 81       	ldd	r24, Z+2	; 0x02
    12ec:	93 81       	ldd	r25, Z+3	; 0x03
    12ee:	0c 5f       	subi	r16, 0xFC	; 252
    12f0:	1f 4f       	sbci	r17, 0xFF	; 255
    12f2:	06 c0       	rjmp	.+12     	; 0x1300 <vfprintf+0x280>
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 5f       	subi	r16, 0xFE	; 254
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	a4 01       	movw	r20, r8
    1302:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <__ultoa_invert>
    1306:	a8 2e       	mov	r10, r24
    1308:	a8 18       	sub	r10, r8
    130a:	fb 2d       	mov	r31, r11
    130c:	ff 77       	andi	r31, 0x7F	; 127
    130e:	bf 2e       	mov	r11, r31
    1310:	b6 fe       	sbrs	r11, 6
    1312:	0b c0       	rjmp	.+22     	; 0x132a <vfprintf+0x2aa>
    1314:	2b 2d       	mov	r18, r11
    1316:	2e 7f       	andi	r18, 0xFE	; 254
    1318:	a5 14       	cp	r10, r5
    131a:	50 f4       	brcc	.+20     	; 0x1330 <vfprintf+0x2b0>
    131c:	b4 fe       	sbrs	r11, 4
    131e:	0a c0       	rjmp	.+20     	; 0x1334 <vfprintf+0x2b4>
    1320:	b2 fc       	sbrc	r11, 2
    1322:	08 c0       	rjmp	.+16     	; 0x1334 <vfprintf+0x2b4>
    1324:	2b 2d       	mov	r18, r11
    1326:	2e 7e       	andi	r18, 0xEE	; 238
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <vfprintf+0x2b4>
    132a:	7a 2c       	mov	r7, r10
    132c:	2b 2d       	mov	r18, r11
    132e:	03 c0       	rjmp	.+6      	; 0x1336 <vfprintf+0x2b6>
    1330:	7a 2c       	mov	r7, r10
    1332:	01 c0       	rjmp	.+2      	; 0x1336 <vfprintf+0x2b6>
    1334:	75 2c       	mov	r7, r5
    1336:	24 ff       	sbrs	r18, 4
    1338:	0d c0       	rjmp	.+26     	; 0x1354 <vfprintf+0x2d4>
    133a:	fe 01       	movw	r30, r28
    133c:	ea 0d       	add	r30, r10
    133e:	f1 1d       	adc	r31, r1
    1340:	80 81       	ld	r24, Z
    1342:	80 33       	cpi	r24, 0x30	; 48
    1344:	11 f4       	brne	.+4      	; 0x134a <vfprintf+0x2ca>
    1346:	29 7e       	andi	r18, 0xE9	; 233
    1348:	09 c0       	rjmp	.+18     	; 0x135c <vfprintf+0x2dc>
    134a:	22 ff       	sbrs	r18, 2
    134c:	06 c0       	rjmp	.+12     	; 0x135a <vfprintf+0x2da>
    134e:	73 94       	inc	r7
    1350:	73 94       	inc	r7
    1352:	04 c0       	rjmp	.+8      	; 0x135c <vfprintf+0x2dc>
    1354:	82 2f       	mov	r24, r18
    1356:	86 78       	andi	r24, 0x86	; 134
    1358:	09 f0       	breq	.+2      	; 0x135c <vfprintf+0x2dc>
    135a:	73 94       	inc	r7
    135c:	23 fd       	sbrc	r18, 3
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <vfprintf+0x306>
    1360:	20 ff       	sbrs	r18, 0
    1362:	06 c0       	rjmp	.+12     	; 0x1370 <vfprintf+0x2f0>
    1364:	5a 2c       	mov	r5, r10
    1366:	73 14       	cp	r7, r3
    1368:	18 f4       	brcc	.+6      	; 0x1370 <vfprintf+0x2f0>
    136a:	53 0c       	add	r5, r3
    136c:	57 18       	sub	r5, r7
    136e:	73 2c       	mov	r7, r3
    1370:	73 14       	cp	r7, r3
    1372:	68 f4       	brcc	.+26     	; 0x138e <vfprintf+0x30e>
    1374:	b7 01       	movw	r22, r14
    1376:	80 e2       	ldi	r24, 0x20	; 32
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	2c 87       	std	Y+12, r18	; 0x0c
    137c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <fputc>
    1380:	73 94       	inc	r7
    1382:	2c 85       	ldd	r18, Y+12	; 0x0c
    1384:	f5 cf       	rjmp	.-22     	; 0x1370 <vfprintf+0x2f0>
    1386:	73 14       	cp	r7, r3
    1388:	10 f4       	brcc	.+4      	; 0x138e <vfprintf+0x30e>
    138a:	37 18       	sub	r3, r7
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <vfprintf+0x310>
    138e:	31 2c       	mov	r3, r1
    1390:	24 ff       	sbrs	r18, 4
    1392:	12 c0       	rjmp	.+36     	; 0x13b8 <vfprintf+0x338>
    1394:	b7 01       	movw	r22, r14
    1396:	80 e3       	ldi	r24, 0x30	; 48
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	2c 87       	std	Y+12, r18	; 0x0c
    139c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <fputc>
    13a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13a2:	22 ff       	sbrs	r18, 2
    13a4:	17 c0       	rjmp	.+46     	; 0x13d4 <vfprintf+0x354>
    13a6:	21 ff       	sbrs	r18, 1
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <vfprintf+0x330>
    13aa:	88 e5       	ldi	r24, 0x58	; 88
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <vfprintf+0x334>
    13b0:	88 e7       	ldi	r24, 0x78	; 120
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	b7 01       	movw	r22, r14
    13b6:	0c c0       	rjmp	.+24     	; 0x13d0 <vfprintf+0x350>
    13b8:	82 2f       	mov	r24, r18
    13ba:	86 78       	andi	r24, 0x86	; 134
    13bc:	59 f0       	breq	.+22     	; 0x13d4 <vfprintf+0x354>
    13be:	21 fd       	sbrc	r18, 1
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <vfprintf+0x346>
    13c2:	80 e2       	ldi	r24, 0x20	; 32
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <vfprintf+0x348>
    13c6:	8b e2       	ldi	r24, 0x2B	; 43
    13c8:	27 fd       	sbrc	r18, 7
    13ca:	8d e2       	ldi	r24, 0x2D	; 45
    13cc:	b7 01       	movw	r22, r14
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <fputc>
    13d4:	a5 14       	cp	r10, r5
    13d6:	38 f4       	brcc	.+14     	; 0x13e6 <vfprintf+0x366>
    13d8:	b7 01       	movw	r22, r14
    13da:	80 e3       	ldi	r24, 0x30	; 48
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 4b 0a 	call	0x1496	; 0x1496 <fputc>
    13e2:	5a 94       	dec	r5
    13e4:	f7 cf       	rjmp	.-18     	; 0x13d4 <vfprintf+0x354>
    13e6:	aa 94       	dec	r10
    13e8:	f4 01       	movw	r30, r8
    13ea:	ea 0d       	add	r30, r10
    13ec:	f1 1d       	adc	r31, r1
    13ee:	80 81       	ld	r24, Z
    13f0:	b7 01       	movw	r22, r14
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 4b 0a 	call	0x1496	; 0x1496 <fputc>
    13f8:	a1 10       	cpse	r10, r1
    13fa:	f5 cf       	rjmp	.-22     	; 0x13e6 <vfprintf+0x366>
    13fc:	33 20       	and	r3, r3
    13fe:	09 f4       	brne	.+2      	; 0x1402 <vfprintf+0x382>
    1400:	51 ce       	rjmp	.-862    	; 0x10a4 <vfprintf+0x24>
    1402:	b7 01       	movw	r22, r14
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 4b 0a 	call	0x1496	; 0x1496 <fputc>
    140c:	3a 94       	dec	r3
    140e:	f6 cf       	rjmp	.-20     	; 0x13fc <vfprintf+0x37c>
    1410:	f7 01       	movw	r30, r14
    1412:	86 81       	ldd	r24, Z+6	; 0x06
    1414:	97 81       	ldd	r25, Z+7	; 0x07
    1416:	02 c0       	rjmp	.+4      	; 0x141c <vfprintf+0x39c>
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	9f ef       	ldi	r25, 0xFF	; 255
    141c:	2c 96       	adiw	r28, 0x0c	; 12
    141e:	e2 e1       	ldi	r30, 0x12	; 18
    1420:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <__epilogue_restores__>

00001424 <calloc>:
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	86 9f       	mul	r24, r22
    142e:	80 01       	movw	r16, r0
    1430:	87 9f       	mul	r24, r23
    1432:	10 0d       	add	r17, r0
    1434:	96 9f       	mul	r25, r22
    1436:	10 0d       	add	r17, r0
    1438:	11 24       	eor	r1, r1
    143a:	c8 01       	movw	r24, r16
    143c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <malloc>
    1440:	ec 01       	movw	r28, r24
    1442:	00 97       	sbiw	r24, 0x00	; 0
    1444:	29 f0       	breq	.+10     	; 0x1450 <calloc+0x2c>
    1446:	a8 01       	movw	r20, r16
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	70 e0       	ldi	r23, 0x00	; 0
    144c:	0e 94 39 0a 	call	0x1472	; 0x1472 <memset>
    1450:	ce 01       	movw	r24, r28
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <strnlen_P>:
    145c:	fc 01       	movw	r30, r24
    145e:	05 90       	lpm	r0, Z+
    1460:	61 50       	subi	r22, 0x01	; 1
    1462:	70 40       	sbci	r23, 0x00	; 0
    1464:	01 10       	cpse	r0, r1
    1466:	d8 f7       	brcc	.-10     	; 0x145e <strnlen_P+0x2>
    1468:	80 95       	com	r24
    146a:	90 95       	com	r25
    146c:	8e 0f       	add	r24, r30
    146e:	9f 1f       	adc	r25, r31
    1470:	08 95       	ret

00001472 <memset>:
    1472:	dc 01       	movw	r26, r24
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <memset+0x6>
    1476:	6d 93       	st	X+, r22
    1478:	41 50       	subi	r20, 0x01	; 1
    147a:	50 40       	sbci	r21, 0x00	; 0
    147c:	e0 f7       	brcc	.-8      	; 0x1476 <memset+0x4>
    147e:	08 95       	ret

00001480 <strnlen>:
    1480:	fc 01       	movw	r30, r24
    1482:	61 50       	subi	r22, 0x01	; 1
    1484:	70 40       	sbci	r23, 0x00	; 0
    1486:	01 90       	ld	r0, Z+
    1488:	01 10       	cpse	r0, r1
    148a:	d8 f7       	brcc	.-10     	; 0x1482 <strnlen+0x2>
    148c:	80 95       	com	r24
    148e:	90 95       	com	r25
    1490:	8e 0f       	add	r24, r30
    1492:	9f 1f       	adc	r25, r31
    1494:	08 95       	ret

00001496 <fputc>:
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	18 2f       	mov	r17, r24
    14a0:	09 2f       	mov	r16, r25
    14a2:	eb 01       	movw	r28, r22
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	81 fd       	sbrc	r24, 1
    14a8:	03 c0       	rjmp	.+6      	; 0x14b0 <fputc+0x1a>
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	9f ef       	ldi	r25, 0xFF	; 255
    14ae:	20 c0       	rjmp	.+64     	; 0x14f0 <fputc+0x5a>
    14b0:	82 ff       	sbrs	r24, 2
    14b2:	10 c0       	rjmp	.+32     	; 0x14d4 <fputc+0x3e>
    14b4:	4e 81       	ldd	r20, Y+6	; 0x06
    14b6:	5f 81       	ldd	r21, Y+7	; 0x07
    14b8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ba:	3d 81       	ldd	r19, Y+5	; 0x05
    14bc:	42 17       	cp	r20, r18
    14be:	53 07       	cpc	r21, r19
    14c0:	7c f4       	brge	.+30     	; 0x14e0 <fputc+0x4a>
    14c2:	e8 81       	ld	r30, Y
    14c4:	f9 81       	ldd	r31, Y+1	; 0x01
    14c6:	9f 01       	movw	r18, r30
    14c8:	2f 5f       	subi	r18, 0xFF	; 255
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	39 83       	std	Y+1, r19	; 0x01
    14ce:	28 83       	st	Y, r18
    14d0:	10 83       	st	Z, r17
    14d2:	06 c0       	rjmp	.+12     	; 0x14e0 <fputc+0x4a>
    14d4:	e8 85       	ldd	r30, Y+8	; 0x08
    14d6:	f9 85       	ldd	r31, Y+9	; 0x09
    14d8:	81 2f       	mov	r24, r17
    14da:	09 95       	icall
    14dc:	89 2b       	or	r24, r25
    14de:	29 f7       	brne	.-54     	; 0x14aa <fputc+0x14>
    14e0:	2e 81       	ldd	r18, Y+6	; 0x06
    14e2:	3f 81       	ldd	r19, Y+7	; 0x07
    14e4:	2f 5f       	subi	r18, 0xFF	; 255
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	3f 83       	std	Y+7, r19	; 0x07
    14ea:	2e 83       	std	Y+6, r18	; 0x06
    14ec:	81 2f       	mov	r24, r17
    14ee:	90 2f       	mov	r25, r16
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <__ultoa_invert>:
    14fa:	fa 01       	movw	r30, r20
    14fc:	aa 27       	eor	r26, r26
    14fe:	28 30       	cpi	r18, 0x08	; 8
    1500:	51 f1       	breq	.+84     	; 0x1556 <__ultoa_invert+0x5c>
    1502:	20 31       	cpi	r18, 0x10	; 16
    1504:	81 f1       	breq	.+96     	; 0x1566 <__ultoa_invert+0x6c>
    1506:	e8 94       	clt
    1508:	6f 93       	push	r22
    150a:	6e 7f       	andi	r22, 0xFE	; 254
    150c:	6e 5f       	subi	r22, 0xFE	; 254
    150e:	7f 4f       	sbci	r23, 0xFF	; 255
    1510:	8f 4f       	sbci	r24, 0xFF	; 255
    1512:	9f 4f       	sbci	r25, 0xFF	; 255
    1514:	af 4f       	sbci	r26, 0xFF	; 255
    1516:	b1 e0       	ldi	r27, 0x01	; 1
    1518:	3e d0       	rcall	.+124    	; 0x1596 <__ultoa_invert+0x9c>
    151a:	b4 e0       	ldi	r27, 0x04	; 4
    151c:	3c d0       	rcall	.+120    	; 0x1596 <__ultoa_invert+0x9c>
    151e:	67 0f       	add	r22, r23
    1520:	78 1f       	adc	r23, r24
    1522:	89 1f       	adc	r24, r25
    1524:	9a 1f       	adc	r25, r26
    1526:	a1 1d       	adc	r26, r1
    1528:	68 0f       	add	r22, r24
    152a:	79 1f       	adc	r23, r25
    152c:	8a 1f       	adc	r24, r26
    152e:	91 1d       	adc	r25, r1
    1530:	a1 1d       	adc	r26, r1
    1532:	6a 0f       	add	r22, r26
    1534:	71 1d       	adc	r23, r1
    1536:	81 1d       	adc	r24, r1
    1538:	91 1d       	adc	r25, r1
    153a:	a1 1d       	adc	r26, r1
    153c:	20 d0       	rcall	.+64     	; 0x157e <__ultoa_invert+0x84>
    153e:	09 f4       	brne	.+2      	; 0x1542 <__ultoa_invert+0x48>
    1540:	68 94       	set
    1542:	3f 91       	pop	r19
    1544:	2a e0       	ldi	r18, 0x0A	; 10
    1546:	26 9f       	mul	r18, r22
    1548:	11 24       	eor	r1, r1
    154a:	30 19       	sub	r19, r0
    154c:	30 5d       	subi	r19, 0xD0	; 208
    154e:	31 93       	st	Z+, r19
    1550:	de f6       	brtc	.-74     	; 0x1508 <__ultoa_invert+0xe>
    1552:	cf 01       	movw	r24, r30
    1554:	08 95       	ret
    1556:	46 2f       	mov	r20, r22
    1558:	47 70       	andi	r20, 0x07	; 7
    155a:	40 5d       	subi	r20, 0xD0	; 208
    155c:	41 93       	st	Z+, r20
    155e:	b3 e0       	ldi	r27, 0x03	; 3
    1560:	0f d0       	rcall	.+30     	; 0x1580 <__ultoa_invert+0x86>
    1562:	c9 f7       	brne	.-14     	; 0x1556 <__ultoa_invert+0x5c>
    1564:	f6 cf       	rjmp	.-20     	; 0x1552 <__ultoa_invert+0x58>
    1566:	46 2f       	mov	r20, r22
    1568:	4f 70       	andi	r20, 0x0F	; 15
    156a:	40 5d       	subi	r20, 0xD0	; 208
    156c:	4a 33       	cpi	r20, 0x3A	; 58
    156e:	18 f0       	brcs	.+6      	; 0x1576 <__ultoa_invert+0x7c>
    1570:	49 5d       	subi	r20, 0xD9	; 217
    1572:	31 fd       	sbrc	r19, 1
    1574:	40 52       	subi	r20, 0x20	; 32
    1576:	41 93       	st	Z+, r20
    1578:	02 d0       	rcall	.+4      	; 0x157e <__ultoa_invert+0x84>
    157a:	a9 f7       	brne	.-22     	; 0x1566 <__ultoa_invert+0x6c>
    157c:	ea cf       	rjmp	.-44     	; 0x1552 <__ultoa_invert+0x58>
    157e:	b4 e0       	ldi	r27, 0x04	; 4
    1580:	a6 95       	lsr	r26
    1582:	97 95       	ror	r25
    1584:	87 95       	ror	r24
    1586:	77 95       	ror	r23
    1588:	67 95       	ror	r22
    158a:	ba 95       	dec	r27
    158c:	c9 f7       	brne	.-14     	; 0x1580 <__ultoa_invert+0x86>
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	61 05       	cpc	r22, r1
    1592:	71 05       	cpc	r23, r1
    1594:	08 95       	ret
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	0a 2e       	mov	r0, r26
    159c:	06 94       	lsr	r0
    159e:	57 95       	ror	r21
    15a0:	47 95       	ror	r20
    15a2:	37 95       	ror	r19
    15a4:	27 95       	ror	r18
    15a6:	ba 95       	dec	r27
    15a8:	c9 f7       	brne	.-14     	; 0x159c <__ultoa_invert+0xa2>
    15aa:	62 0f       	add	r22, r18
    15ac:	73 1f       	adc	r23, r19
    15ae:	84 1f       	adc	r24, r20
    15b0:	95 1f       	adc	r25, r21
    15b2:	a0 1d       	adc	r26, r0
    15b4:	08 95       	ret

000015b6 <__prologue_saves__>:
    15b6:	2f 92       	push	r2
    15b8:	3f 92       	push	r3
    15ba:	4f 92       	push	r4
    15bc:	5f 92       	push	r5
    15be:	6f 92       	push	r6
    15c0:	7f 92       	push	r7
    15c2:	8f 92       	push	r8
    15c4:	9f 92       	push	r9
    15c6:	af 92       	push	r10
    15c8:	bf 92       	push	r11
    15ca:	cf 92       	push	r12
    15cc:	df 92       	push	r13
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	ca 1b       	sub	r28, r26
    15e0:	db 0b       	sbc	r29, r27
    15e2:	0f b6       	in	r0, 0x3f	; 63
    15e4:	f8 94       	cli
    15e6:	de bf       	out	0x3e, r29	; 62
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	cd bf       	out	0x3d, r28	; 61
    15ec:	09 94       	ijmp

000015ee <__epilogue_restores__>:
    15ee:	2a 88       	ldd	r2, Y+18	; 0x12
    15f0:	39 88       	ldd	r3, Y+17	; 0x11
    15f2:	48 88       	ldd	r4, Y+16	; 0x10
    15f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    15f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    15f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    15fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    15fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    15fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1600:	b9 84       	ldd	r11, Y+9	; 0x09
    1602:	c8 84       	ldd	r12, Y+8	; 0x08
    1604:	df 80       	ldd	r13, Y+7	; 0x07
    1606:	ee 80       	ldd	r14, Y+6	; 0x06
    1608:	fd 80       	ldd	r15, Y+5	; 0x05
    160a:	0c 81       	ldd	r16, Y+4	; 0x04
    160c:	1b 81       	ldd	r17, Y+3	; 0x03
    160e:	aa 81       	ldd	r26, Y+2	; 0x02
    1610:	b9 81       	ldd	r27, Y+1	; 0x01
    1612:	ce 0f       	add	r28, r30
    1614:	d1 1d       	adc	r29, r1
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	ed 01       	movw	r28, r26
    1622:	08 95       	ret

00001624 <_exit>:
    1624:	f8 94       	cli

00001626 <__stop_program>:
    1626:	ff cf       	rjmp	.-2      	; 0x1626 <__stop_program>
