
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  00001256  000012ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080017e  0080017e  00001368  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002483  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d28  00000000  00000000  00003a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c5b  00000000  00000000  000047b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000057c  00000000  00000000  00005414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000656  00000000  00000000  00005990  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001013  00000000  00000000  00005fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00006ff9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 96 02 	jmp	0x52c	; 0x52c <__vector_1>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <vfprintf+0xe2>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e5       	ldi	r30, 0x56	; 86
     37c:	f2 e1       	ldi	r31, 0x12	; 18
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 37       	cpi	r26, 0x7E	; 126
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	ae e7       	ldi	r26, 0x7E	; 126
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 38       	cpi	r26, 0x8E	; 142
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <main>
     39e:	0c 94 29 09 	jmp	0x1252	; 0x1252 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc_init>:
#include <string.h>
#include "uart.h"
#include <avr/io.h>
#include <util/delay.h>
void adc_init(void){
	set_bit(MCUCR,SRE);
     3a6:	85 b7       	in	r24, 0x35	; 53
     3a8:	80 68       	ori	r24, 0x80	; 128
     3aa:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
     3ac:	80 b7       	in	r24, 0x30	; 48
     3ae:	80 62       	ori	r24, 0x20	; 32
     3b0:	80 bf       	out	0x30, r24	; 48
	clear_bit(DDRE,DDE0);
     3b2:	30 98       	cbi	0x06, 0	; 6
     3b4:	08 95       	ret

000003b6 <adc_read>:
}

uint8_t adc_read(uint8_t channel){
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	1f 92       	push	r1
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
	
	volatile char* adc_adr = (char *) 0x1400;
	adc_adr[0] = channel;
     3c0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c4:	92 e4       	ldi	r25, 0x42	; 66
     3c6:	9a 95       	dec	r25
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <adc_read+0x10>
     3ca:	00 c0       	rjmp	.+0      	; 0x3cc <adc_read+0x16>
	_delay_us(200);
	volatile uint8_t retreived_value = adc_adr[channel];
     3cc:	e8 2f       	mov	r30, r24
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	fc 5e       	subi	r31, 0xEC	; 236
     3d2:	80 81       	ld	r24, Z
     3d4:	89 83       	std	Y+1, r24	; 0x01
	return retreived_value;
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     3d8:	0f 90       	pop	r0
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <CAN_init>:
#include "MCPkontroll.h"

uint8_t rx_flag = 0;

void CAN_init(){
	MCP_init();
     3e0:	0e 94 ba 03 	call	0x774	; 0x774 <MCP_init>
	// Turn mask/filters off
	MCP_bit_mod(MCP_RXB0CTRL, 0b01100100, 0xFF);
     3e4:	4f ef       	ldi	r20, 0xFF	; 255
     3e6:	64 e6       	ldi	r22, 0x64	; 100
     3e8:	80 e6       	ldi	r24, 0x60	; 96
     3ea:	0e 94 89 03 	call	0x712	; 0x712 <MCP_bit_mod>
	
	// Set LoopBack mode on
	MCP_bit_mod(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); // MCP_CANCTRL = MODE_LOOPBACK;
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	60 ee       	ldi	r22, 0xE0	; 224
     3f2:	8f e0       	ldi	r24, 0x0F	; 15
     3f4:	0e 94 89 03 	call	0x712	; 0x712 <MCP_bit_mod>
	
	// Enable interrupt when a valid message has been received
	MCP_bit_mod(MCP_CANINTE, MCP_RX0IF, 1);
     3f8:	41 e0       	ldi	r20, 0x01	; 1
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	8b e2       	ldi	r24, 0x2B	; 43
     3fe:	0e 94 89 03 	call	0x712	; 0x712 <MCP_bit_mod>
	MCP_bit_mod(MCP_CANINTE, MCP_TX0IF, 1);
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	64 e0       	ldi	r22, 0x04	; 4
     406:	8b e2       	ldi	r24, 0x2B	; 43
     408:	0e 94 89 03 	call	0x712	; 0x712 <MCP_bit_mod>
	if ((MCP_read(MCP_CANSTAT) & MODE_MASK) != MODE_NORMAL)
     40c:	8e e0       	ldi	r24, 0x0E	; 14
     40e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <MCP_read>
     412:	80 7e       	andi	r24, 0xE0	; 224
     414:	21 f0       	breq	.+8      	; 0x41e <CAN_init+0x3e>
	{
		printf("NOT in NORMAL mode!\n");
     416:	86 e0       	ldi	r24, 0x06	; 6
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	0e 94 03 05 	call	0xa06	; 0xa06 <puts>
	}
	
	char temp = MCP_read(MCP_CANCTRL);
     41e:	8f e0       	ldi	r24, 0x0F	; 15
     420:	0e 94 64 03 	call	0x6c8	; 0x6c8 <MCP_read>
     424:	08 95       	ret

00000426 <CAN_check_error>:
	}
	return 0;
}

int CAN_check_error(void){
	uint8_t error = MCP_read(MCP_TXB0CTRL);
     426:	80 e3       	ldi	r24, 0x30	; 48
     428:	0e 94 64 03 	call	0x6c8	; 0x6c8 <MCP_read>
	// Checking transmission error
	if(test_bit(error,4)){return -1;}
     42c:	84 fd       	sbrc	r24, 4
     42e:	05 c0       	rjmp	.+10     	; 0x43a <CAN_check_error+0x14>
		
	// checking for message lost arbitration
	if(test_bit(error,5)){return -2;}
     430:	85 ff       	sbrs	r24, 5
     432:	06 c0       	rjmp	.+12     	; 0x440 <CAN_check_error+0x1a>
     434:	8e ef       	ldi	r24, 0xFE	; 254
     436:	9f ef       	ldi	r25, 0xFF	; 255
     438:	08 95       	ret
}

int CAN_check_error(void){
	uint8_t error = MCP_read(MCP_TXB0CTRL);
	// Checking transmission error
	if(test_bit(error,4)){return -1;}
     43a:	8f ef       	ldi	r24, 0xFF	; 255
     43c:	9f ef       	ldi	r25, 0xFF	; 255
     43e:	08 95       	ret
		
	// checking for message lost arbitration
	if(test_bit(error,5)){return -2;}
	else{return 1;}
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
}
     444:	08 95       	ret

00000446 <CAN_completed_transmit>:

int CAN_completed_transmit(void){
	if (test_bit(MCP_read(MCP_TXB0CTRL),3)){
     446:	80 e3       	ldi	r24, 0x30	; 48
     448:	0e 94 64 03 	call	0x6c8	; 0x6c8 <MCP_read>
     44c:	86 95       	lsr	r24
     44e:	86 95       	lsr	r24
     450:	86 95       	lsr	r24
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	89 27       	eor	r24, r25
	}
	else{
		return 1;
	}
	
}
     456:	81 70       	andi	r24, 0x01	; 1
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	08 95       	ret

0000045c <CAN_transmit>:
	
	char temp = MCP_read(MCP_CANCTRL);
	
}

int CAN_transmit(struct CAN_message message){
     45c:	ef 92       	push	r14
     45e:	ff 92       	push	r15
     460:	0f 93       	push	r16
     462:	1f 93       	push	r17
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	2a 97       	sbiw	r28, 0x0a	; 10
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	09 83       	std	Y+1, r16	; 0x01
     47a:	e1 2e       	mov	r14, r17
     47c:	1a 83       	std	Y+2, r17	; 0x02
     47e:	2b 83       	std	Y+3, r18	; 0x03
     480:	3c 83       	std	Y+4, r19	; 0x04
     482:	4d 83       	std	Y+5, r20	; 0x05
     484:	5e 83       	std	Y+6, r21	; 0x06
     486:	6f 83       	std	Y+7, r22	; 0x07
     488:	78 87       	std	Y+8, r23	; 0x08
     48a:	89 87       	std	Y+9, r24	; 0x09
     48c:	9a 87       	std	Y+10, r25	; 0x0a
	// Setting the standard identifier
	MCP_write(message.id >> 3, MCP_TXB0SIDH);
     48e:	61 e3       	ldi	r22, 0x31	; 49
     490:	80 2f       	mov	r24, r16
     492:	86 95       	lsr	r24
     494:	86 95       	lsr	r24
     496:	86 95       	lsr	r24
     498:	0e 94 4d 03 	call	0x69a	; 0x69a <MCP_write>
	MCP_write(message.id << 5, MCP_TXB0SIDL);
     49c:	62 e3       	ldi	r22, 0x32	; 50
     49e:	80 2f       	mov	r24, r16
     4a0:	82 95       	swap	r24
     4a2:	88 0f       	add	r24, r24
     4a4:	80 7e       	andi	r24, 0xE0	; 224
     4a6:	0e 94 4d 03 	call	0x69a	; 0x69a <MCP_write>
	
	// setting data length
	MCP_write((0x0F) & message.length, MCP_TXB0DLC);
     4aa:	65 e3       	ldi	r22, 0x35	; 53
     4ac:	81 2f       	mov	r24, r17
     4ae:	8f 70       	andi	r24, 0x0F	; 15
     4b0:	0e 94 4d 03 	call	0x69a	; 0x69a <MCP_write>
	
	// setting data bytes
	for (uint8_t i = 0x00; i< message.length; i++){
     4b4:	11 23       	and	r17, r17
     4b6:	91 f0       	breq	.+36     	; 0x4dc <CAN_transmit+0x80>
     4b8:	8e 01       	movw	r16, r28
     4ba:	0d 5f       	subi	r16, 0xFD	; 253
     4bc:	1f 4f       	sbci	r17, 0xFF	; 255
     4be:	86 e3       	ldi	r24, 0x36	; 54
     4c0:	e8 0e       	add	r14, r24
     4c2:	0f 2e       	mov	r0, r31
     4c4:	f6 e3       	ldi	r31, 0x36	; 54
     4c6:	ff 2e       	mov	r15, r31
     4c8:	f0 2d       	mov	r31, r0
	MCP_write(message.data[i], MCP_TXB0D0+i);
     4ca:	6f 2d       	mov	r22, r15
     4cc:	f8 01       	movw	r30, r16
     4ce:	81 91       	ld	r24, Z+
     4d0:	8f 01       	movw	r16, r30
     4d2:	0e 94 4d 03 	call	0x69a	; 0x69a <MCP_write>
     4d6:	f3 94       	inc	r15
	
	// setting data length
	MCP_write((0x0F) & message.length, MCP_TXB0DLC);
	
	// setting data bytes
	for (uint8_t i = 0x00; i< message.length; i++){
     4d8:	fe 10       	cpse	r15, r14
     4da:	f7 cf       	rjmp	.-18     	; 0x4ca <CAN_transmit+0x6e>
	MCP_write(message.data[i], MCP_TXB0D0+i);
	}
	MCP_rts(1);
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 78 03 	call	0x6f0	; 0x6f0 <MCP_rts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e2:	89 ef       	ldi	r24, 0xF9	; 249
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <CAN_transmit+0x8a>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <CAN_transmit+0x90>
     4ec:	00 00       	nop
	_delay_ms(1);
	
	if(!CAN_completed_transmit()){
     4ee:	0e 94 23 02 	call	0x446	; 0x446 <CAN_completed_transmit>
     4f2:	89 2b       	or	r24, r25
     4f4:	19 f4       	brne	.+6      	; 0x4fc <CAN_transmit+0xa0>
		//printf("Transmit not completed, bit = %i \n",test_bit(MCP_TXB0CTRL,3 ) );
		return CAN_check_error();
     4f6:	0e 94 13 02 	call	0x426	; 0x426 <CAN_check_error>
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <__stack+0x1>
	}
	return 0;
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
}
     500:	2a 96       	adiw	r28, 0x0a	; 10
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	1f 91       	pop	r17
     512:	0f 91       	pop	r16
     514:	ff 90       	pop	r15
     516:	ef 90       	pop	r14
     518:	08 95       	ret

0000051a <CAN_int_vect>:
	
}

void CAN_int_vect(void){
	// clear interrupt flag in buffer 0
	MCP_bit_mod(MCP_CANINTF, 0x01, 0);
     51a:	40 e0       	ldi	r20, 0x00	; 0
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	8c e2       	ldi	r24, 0x2C	; 44
     520:	0e 94 89 03 	call	0x712	; 0x712 <MCP_bit_mod>
	rx_flag = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	80 93 7e 01 	sts	0x017E, r24
     52a:	08 95       	ret

0000052c <__vector_1>:
	_delay_ms(370);
	return new_message;
}

// Interrupt service
ISR(INT0_vect){
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	2f 93       	push	r18
     538:	3f 93       	push	r19
     53a:	4f 93       	push	r20
     53c:	5f 93       	push	r21
     53e:	6f 93       	push	r22
     540:	7f 93       	push	r23
     542:	8f 93       	push	r24
     544:	9f 93       	push	r25
     546:	af 93       	push	r26
     548:	bf 93       	push	r27
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
     54e:	83 ec       	ldi	r24, 0xC3	; 195
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <__vector_1+0x26>
     556:	00 c0       	rjmp	.+0      	; 0x558 <__vector_1+0x2c>
     558:	00 00       	nop
	_delay_ms(10);
	CAN_int_vect();
     55a:	0e 94 8d 02 	call	0x51a	; 0x51a <CAN_int_vect>
     55e:	ff 91       	pop	r31
     560:	ef 91       	pop	r30
     562:	bf 91       	pop	r27
     564:	af 91       	pop	r26
     566:	9f 91       	pop	r25
     568:	8f 91       	pop	r24
     56a:	7f 91       	pop	r23
     56c:	6f 91       	pop	r22
     56e:	5f 91       	pop	r21
     570:	4f 91       	pop	r20
     572:	3f 91       	pop	r19
     574:	2f 91       	pop	r18
     576:	0f 90       	pop	r0
     578:	0f be       	out	0x3f, r0	; 63
     57a:	0f 90       	pop	r0
     57c:	1f 90       	pop	r1
     57e:	18 95       	reti

00000580 <read_joystick_position>:
#define loop_until_bit_is_clear( reg, bit ) while( test_bit( reg, bit ) )
#include "joystick.h"
#include "adc.h"
#include <stdbool.h>
struct Menu_position pos;
struct Joystick read_joystick_position(uint8_t channel_one, uint8_t channel_two){
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	d8 2f       	mov	r29, r24
     586:	86 2f       	mov	r24, r22
	int x_pos = (adc_read(channel_two));//-134)*0.8264462809917355;
     588:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     58c:	c8 2f       	mov	r28, r24
	int y_pos = (adc_read(channel_one));//-133)*0.819672131147541;
     58e:	8d 2f       	mov	r24, r29
     590:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     594:	28 2f       	mov	r18, r24
	struct Joystick global_joystick;
	global_joystick.x_pos = x_pos;
	global_joystick.y_pos = y_pos;
	//printf("X: %i, Y: %i \n", x_pos,y_pos);

	return global_joystick;
     596:	6c 2f       	mov	r22, r28
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	82 2f       	mov	r24, r18
     59c:	90 e0       	ldi	r25, 0x00	; 0
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <read_slider_position>:
struct Slider read_slider_position(uint8_t channel_one, uint8_t channel_two){
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	d6 2f       	mov	r29, r22
	int slider1 = adc_read(channel_one);
     5aa:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     5ae:	c8 2f       	mov	r28, r24
	//_delay_ms(100);
	int slider2 = adc_read(channel_two);
     5b0:	8d 2f       	mov	r24, r29
     5b2:	0e 94 db 01 	call	0x3b6	; 0x3b6 <adc_read>
     5b6:	28 2f       	mov	r18, r24
	struct Slider global_slider;
	global_slider.slider1 = slider1;
	global_slider.slider2 = slider2;
	return global_slider;
     5b8:	6c 2f       	mov	r22, r28
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	82 2f       	mov	r24, r18
     5be:	90 e0       	ldi	r25, 0x00	; 0
	//printf("Slider 1: %i, Slider 2: %i \n", slider1,slider2);
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <main>:

volatile char* oled_adresse = 0x1200;
volatile char* adc_adresse = 0x1400;
volatile char* ram_adresse = 0x1800;
int main(void)
{
     5c6:	cf 93       	push	r28
     5c8:	df 93       	push	r29
     5ca:	cd b7       	in	r28, 0x3d	; 61
     5cc:	de b7       	in	r29, 0x3e	; 62
     5ce:	2a 97       	sbiw	r28, 0x0a	; 10
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	de bf       	out	0x3e, r29	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	cd bf       	out	0x3d, r28	; 61
	EXT_MEM_Init();
     5da:	0e 94 8a 04 	call	0x914	; 0x914 <EXT_MEM_Init>
	USART_Init(31);
     5de:	8f e1       	ldi	r24, 0x1F	; 31
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 99 04 	call	0x932	; 0x932 <USART_Init>
	oled_init();
     5e6:	0e 94 bf 03 	call	0x77e	; 0x77e <oled_init>
	oled_reset();
     5ea:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <oled_reset>
	adc_init();
     5ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc_init>
	initialize_menu();
     5f2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <initialize_menu>
	DDRB = 0b00000000;
     5f6:	17 ba       	out	0x17, r1	; 23
	CAN_init();
     5f8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <CAN_init>
	printf("Init er GOOD\n");
     5fc:	8a e1       	ldi	r24, 0x1A	; 26
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	0e 94 03 05 	call	0xa06	; 0xa06 <puts>
	struct CAN_message usb_board;
	usb_board.id = 3;
     604:	83 e0       	ldi	r24, 0x03	; 3
     606:	89 83       	std	Y+1, r24	; 0x01
	usb_board.length = 4;
     608:	84 e0       	ldi	r24, 0x04	; 4
     60a:	8a 83       	std	Y+2, r24	; 0x02

		usb_board.data[0] = (uint8_t)read_joystick_position(channel1, channel2).x_pos;
		usb_board.data[1] = (uint8_t)read_joystick_position(channel1, channel2).y_pos;
		usb_board.data[2] = (uint8_t)read_slider_position(channel3,channel4).slider1;
		usb_board.data[3] = (uint8_t)read_slider_position(channel3,channel4).slider2;
		printf("x pos: %d		slider right: %d \n", usb_board.data[0],usb_board.data[3]);
     60c:	0f 2e       	mov	r0, r31
     60e:	f7 e2       	ldi	r31, 0x27	; 39
     610:	af 2e       	mov	r10, r31
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	bf 2e       	mov	r11, r31
     616:	f0 2d       	mov	r31, r0

	while(1)
    {
		//struct Joystick temp = read_joystick_position(channel1,channel2);

		usb_board.data[0] = (uint8_t)read_joystick_position(channel1, channel2).x_pos;
     618:	65 e0       	ldi	r22, 0x05	; 5
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	0e 94 c0 02 	call	0x580	; 0x580 <read_joystick_position>
     620:	2b 01       	movw	r4, r22
     622:	3c 01       	movw	r6, r24
		usb_board.data[1] = (uint8_t)read_joystick_position(channel1, channel2).y_pos;
     624:	65 e0       	ldi	r22, 0x05	; 5
     626:	84 e0       	ldi	r24, 0x04	; 4
     628:	0e 94 c0 02 	call	0x580	; 0x580 <read_joystick_position>
     62c:	8c 83       	std	Y+4, r24	; 0x04
		usb_board.data[2] = (uint8_t)read_slider_position(channel3,channel4).slider1;
     62e:	67 e0       	ldi	r22, 0x07	; 7
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <read_slider_position>
     636:	6d 83       	std	Y+5, r22	; 0x05
		usb_board.data[3] = (uint8_t)read_slider_position(channel3,channel4).slider2;
     638:	67 e0       	ldi	r22, 0x07	; 7
     63a:	86 e0       	ldi	r24, 0x06	; 6
     63c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <read_slider_position>
     640:	6b 01       	movw	r12, r22
     642:	7c 01       	movw	r14, r24
		printf("x pos: %d		slider right: %d \n", usb_board.data[0],usb_board.data[3]);
     644:	c7 01       	movw	r24, r14
     646:	99 27       	eor	r25, r25
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	c2 01       	movw	r24, r4
     64e:	99 27       	eor	r25, r25
     650:	9f 93       	push	r25
     652:	8f 93       	push	r24
     654:	bf 92       	push	r11
     656:	af 92       	push	r10
     658:	0e 94 ef 04 	call	0x9de	; 0x9de <printf>

	while(1)
    {
		//struct Joystick temp = read_joystick_position(channel1,channel2);

		usb_board.data[0] = (uint8_t)read_joystick_position(channel1, channel2).x_pos;
     65c:	4b 82       	std	Y+3, r4	; 0x03
		usb_board.data[1] = (uint8_t)read_joystick_position(channel1, channel2).y_pos;
		usb_board.data[2] = (uint8_t)read_slider_position(channel3,channel4).slider1;
		usb_board.data[3] = (uint8_t)read_slider_position(channel3,channel4).slider2;
     65e:	ee 82       	std	Y+6, r14	; 0x06
		printf("x pos: %d		slider right: %d \n", usb_board.data[0],usb_board.data[3]);
		int status = CAN_transmit(usb_board);
     660:	09 81       	ldd	r16, Y+1	; 0x01
     662:	1a 81       	ldd	r17, Y+2	; 0x02
     664:	24 2d       	mov	r18, r4
     666:	3c 81       	ldd	r19, Y+4	; 0x04
     668:	4d 81       	ldd	r20, Y+5	; 0x05
     66a:	5e 2d       	mov	r21, r14
     66c:	6f 81       	ldd	r22, Y+7	; 0x07
     66e:	78 85       	ldd	r23, Y+8	; 0x08
     670:	89 85       	ldd	r24, Y+9	; 0x09
     672:	9a 85       	ldd	r25, Y+10	; 0x0a
     674:	0e 94 2e 02 	call	0x45c	; 0x45c <CAN_transmit>
     678:	87 ea       	ldi	r24, 0xA7	; 167
     67a:	91 e6       	ldi	r25, 0x61	; 97
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	f1 f7       	brne	.-4      	; 0x67c <main+0xb6>
     680:	00 c0       	rjmp	.+0      	; 0x682 <main+0xbc>
     682:	00 00       	nop
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	c3 cf       	rjmp	.-122    	; 0x618 <main+0x52>

00000692 <select_CAN>:
#include "MCP2515.h"
#define DD_SS PB4


void select_CAN(void){
	clear_bit(PORTB, DD_SS);
     692:	c4 98       	cbi	0x18, 4	; 24
     694:	08 95       	ret

00000696 <deselect_CAN>:
}

void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
     696:	c4 9a       	sbi	0x18, 4	; 24
     698:	08 95       	ret

0000069a <MCP_write>:
void MCP_init(){
	SPI_MasterInit();
	MCP_reset();
}

void MCP_write(uint8_t data, uint8_t address){
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	c8 2f       	mov	r28, r24
     6a0:	d6 2f       	mov	r29, r22
	// printf("MCP_write data = %x, address = %x \n", data, address);
	select_CAN();
     6a2:	0e 94 49 03 	call	0x692	; 0x692 <select_CAN>
	
	SPI_MasterTransmit(MCP_WRITE);
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     6ae:	8d 2f       	mov	r24, r29
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     6b6:	8c 2f       	mov	r24, r28
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	deselect_CAN();
     6be:	0e 94 4b 03 	call	0x696	; 0x696 <deselect_CAN>
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <MCP_read>:

uint8_t MCP_read(uint8_t address){
     6c8:	cf 93       	push	r28
     6ca:	c8 2f       	mov	r28, r24
	uint8_t temp;
	
	select_CAN();
     6cc:	0e 94 49 03 	call	0x692	; 0x692 <select_CAN>
	
	SPI_MasterTransmit(MCP_READ);
     6d0:	83 e0       	ldi	r24, 0x03	; 3
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     6d8:	8c 2f       	mov	r24, r28
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	temp = SPI_MasterReceive();
     6e0:	0e 94 85 04 	call	0x90a	; 0x90a <SPI_MasterReceive>
     6e4:	c8 2f       	mov	r28, r24
	deselect_CAN();
     6e6:	0e 94 4b 03 	call	0x696	; 0x696 <deselect_CAN>
	// printf("I MCP_read, temp = %x, address = %x \n", temp, address);
	return temp;
}
     6ea:	8c 2f       	mov	r24, r28
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <MCP_rts>:

void MCP_rts(uint8_t reg){
     6f0:	cf 93       	push	r28
	
if (reg <= 7)
     6f2:	88 30       	cpi	r24, 0x08	; 8
     6f4:	18 f4       	brcc	.+6      	; 0x6fc <MCP_rts+0xc>
{reg = MCP_RTS | reg;
     6f6:	c8 2f       	mov	r28, r24
     6f8:	c0 68       	ori	r28, 0x80	; 128
     6fa:	01 c0       	rjmp	.+2      	; 0x6fe <MCP_rts+0xe>
}
else{
	reg = MCP_RTS;
     6fc:	c0 e8       	ldi	r28, 0x80	; 128
}	
	select_CAN();
     6fe:	0e 94 49 03 	call	0x692	; 0x692 <select_CAN>
	SPI_MasterTransmit(reg);
     702:	8c 2f       	mov	r24, r28
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	deselect_CAN();	
     70a:	0e 94 4b 03 	call	0x696	; 0x696 <deselect_CAN>
}
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <MCP_bit_mod>:
	SPI_MasterTransmit(MCP_READ_STATUS);
	deselect_CAN();
	return SPI_MasterReceive();
}

void MCP_bit_mod(uint8_t address, uint8_t m_byte, uint8_t d_byte){
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	18 2f       	mov	r17, r24
     71a:	d6 2f       	mov	r29, r22
     71c:	c4 2f       	mov	r28, r20
	select_CAN();
     71e:	0e 94 49 03 	call	0x692	; 0x692 <select_CAN>
	SPI_MasterTransmit(MCP_BITMOD);
     722:	85 e0       	ldi	r24, 0x05	; 5
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     72a:	81 2f       	mov	r24, r17
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	SPI_MasterTransmit(m_byte);
     732:	8d 2f       	mov	r24, r29
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	SPI_MasterTransmit(d_byte);
     73a:	8c 2f       	mov	r24, r28
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	deselect_CAN();
     742:	0e 94 4b 03 	call	0x696	; 0x696 <deselect_CAN>
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	08 95       	ret

0000074e <MCP_reset>:

void MCP_reset(){
	select_CAN();
     74e:	0e 94 49 03 	call	0x692	; 0x692 <select_CAN>
	SPI_MasterTransmit(MCP_RESET);
     752:	80 ec       	ldi	r24, 0xC0	; 192
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	deselect_CAN();
     75a:	0e 94 4b 03 	call	0x696	; 0x696 <deselect_CAN>
	uint8_t mode = MCP_read(MCP_CANSTAT);
     75e:	8e e0       	ldi	r24, 0x0E	; 14
     760:	0e 94 64 03 	call	0x6c8	; 0x6c8 <MCP_read>
	if ((mode&MODE_MASK)!=MODE_CONFIG)
     764:	80 7e       	andi	r24, 0xE0	; 224
     766:	80 38       	cpi	r24, 0x80	; 128
     768:	21 f0       	breq	.+8      	; 0x772 <MCP_reset+0x24>
	{
		printf("Not in config after reset\n");
     76a:	85 e4       	ldi	r24, 0x45	; 69
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 03 05 	call	0xa06	; 0xa06 <puts>
     772:	08 95       	ret

00000774 <MCP_init>:
void deselect_CAN(void){
	set_bit(PORTB, DD_SS);
}

void MCP_init(){
	SPI_MasterInit();
     774:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <SPI_MasterInit>
	MCP_reset();
     778:	0e 94 a7 03 	call	0x74e	; 0x74e <MCP_reset>
     77c:	08 95       	ret

0000077e <oled_init>:
#include "joystick.h"
#include "fonts.h"
int coloumn_counter = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     77e:	e0 e0       	ldi	r30, 0x00	; 0
     780:	f0 e1       	ldi	r31, 0x10	; 16
     782:	8e ea       	ldi	r24, 0xAE	; 174
     784:	80 83       	st	Z, r24
     786:	81 ea       	ldi	r24, 0xA1	; 161
     788:	80 83       	st	Z, r24
     78a:	8a ed       	ldi	r24, 0xDA	; 218
     78c:	80 83       	st	Z, r24
     78e:	82 e1       	ldi	r24, 0x12	; 18
     790:	80 83       	st	Z, r24
     792:	88 ec       	ldi	r24, 0xC8	; 200
     794:	80 83       	st	Z, r24
     796:	88 ea       	ldi	r24, 0xA8	; 168
     798:	80 83       	st	Z, r24
     79a:	8f e3       	ldi	r24, 0x3F	; 63
     79c:	80 83       	st	Z, r24
     79e:	85 ed       	ldi	r24, 0xD5	; 213
     7a0:	80 83       	st	Z, r24
     7a2:	80 e8       	ldi	r24, 0x80	; 128
     7a4:	80 83       	st	Z, r24
     7a6:	81 e8       	ldi	r24, 0x81	; 129
     7a8:	80 83       	st	Z, r24
     7aa:	80 e5       	ldi	r24, 0x50	; 80
     7ac:	80 83       	st	Z, r24
     7ae:	89 ed       	ldi	r24, 0xD9	; 217
     7b0:	80 83       	st	Z, r24
     7b2:	81 e2       	ldi	r24, 0x21	; 33
     7b4:	80 83       	st	Z, r24
     7b6:	80 e2       	ldi	r24, 0x20	; 32
     7b8:	80 83       	st	Z, r24
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	80 83       	st	Z, r24
     7be:	8b ed       	ldi	r24, 0xDB	; 219
     7c0:	80 83       	st	Z, r24
     7c2:	80 e3       	ldi	r24, 0x30	; 48
     7c4:	80 83       	st	Z, r24
     7c6:	8d ea       	ldi	r24, 0xAD	; 173
     7c8:	80 83       	st	Z, r24
     7ca:	10 82       	st	Z, r1
     7cc:	84 ea       	ldi	r24, 0xA4	; 164
     7ce:	80 83       	st	Z, r24
     7d0:	86 ea       	ldi	r24, 0xA6	; 166
     7d2:	80 83       	st	Z, r24
     7d4:	8f ea       	ldi	r24, 0xAF	; 175
     7d6:	80 83       	st	Z, r24
     7d8:	08 95       	ret

000007da <oled_clear_page>:
		oled_clear_page(i);
	}
	//oled_init();
}
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
     7da:	80 55       	subi	r24, 0x50	; 80
#include "joystick.h"
#include "fonts.h"
int coloumn_counter = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     7dc:	80 93 00 10 	sts	0x1000, r24
     7e0:	80 e8       	ldi	r24, 0x80	; 128
     7e2:	90 e0       	ldi	r25, 0x00	; 0
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     7e4:	e0 e0       	ldi	r30, 0x00	; 0
     7e6:	f2 e1       	ldi	r31, 0x12	; 18
     7e8:	10 82       	st	Z, r1
     7ea:	01 97       	sbiw	r24, 0x01	; 1
	write_c(coloumn_start);
	write_c(coloumn_end);
}
void oled_clear_page(page){
	oled_goto_page(page);
		for (int i = 0;i<128;i++){
     7ec:	00 97       	sbiw	r24, 0x00	; 0
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <oled_clear_page+0xe>
			write_d(0x00);
		}
}
     7f0:	08 95       	ret

000007f2 <oled_reset>:
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
	for (int i=0; i<8;i++){
     7f6:	c0 e0       	ldi	r28, 0x00	; 0
     7f8:	d0 e0       	ldi	r29, 0x00	; 0
		oled_clear_page(i);
     7fa:	ce 01       	movw	r24, r28
     7fc:	0e 94 ed 03 	call	0x7da	; 0x7da <oled_clear_page>
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
}

void oled_reset(void){
	for (int i=0; i<8;i++){
     800:	21 96       	adiw	r28, 0x01	; 1
     802:	c8 30       	cpi	r28, 0x08	; 8
     804:	d1 05       	cpc	r29, r1
     806:	c9 f7       	brne	.-14     	; 0x7fa <oled_reset+0x8>
		oled_clear_page(i);
	}
	//oled_init();
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <oled_pos>:
void oled_goto_page(uint8_t page){
	uint8_t goto2 = 0xb0+page;
     80e:	80 55       	subi	r24, 0x50	; 80
#include "joystick.h"
#include "fonts.h"
int coloumn_counter = 0;
void write_c(uint8_t command){
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
     810:	e0 e0       	ldi	r30, 0x00	; 0
     812:	f0 e1       	ldi	r31, 0x10	; 16
     814:	80 83       	st	Z, r24
     816:	81 e2       	ldi	r24, 0x21	; 33
     818:	80 83       	st	Z, r24
     81a:	60 83       	st	Z, r22
     81c:	40 83       	st	Z, r20
     81e:	08 95       	ret

00000820 <oled_print_letter>:
		for (int i = 0;i<128;i++){
			write_d(0x00);
		}
}

void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
     820:	cf 93       	push	r28
     822:	c8 2f       	mov	r28, r24
     824:	86 2f       	mov	r24, r22
     826:	64 2f       	mov	r22, r20
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
     828:	42 2f       	mov	r20, r18
     82a:	0e 94 07 04 	call	0x80e	; 0x80e <oled_pos>
     82e:	ec 2f       	mov	r30, r28
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	ee 0f       	add	r30, r30
     834:	ff 1f       	adc	r31, r31
     836:	ee 0f       	add	r30, r30
     838:	ff 1f       	adc	r31, r31
     83a:	ee 0f       	add	r30, r30
     83c:	ff 1f       	adc	r31, r31
     83e:	e0 59       	subi	r30, 0x90	; 144
     840:	f0 40       	sbci	r31, 0x00	; 0
	int ltr;
	for (int i = 0;i<8;i++){
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     846:	a0 e0       	ldi	r26, 0x00	; 0
     848:	b2 e1       	ldi	r27, 0x12	; 18
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
		ltr = pgm_read_byte(&(font8[letter-32][i]));
     84a:	24 91       	lpm	r18, Z
	volatile char *oled_c = (char *) 0x1000;
	oled_c[0] = command;
}
void write_d(uint8_t data){
	volatile char *oled_d = (char *) 0x1200;
	oled_d[0] = data;
     84c:	2c 93       	st	X, r18
void oled_print_letter(char letter,uint8_t page, uint8_t coloumn_start,uint8_t coloumn_end){
	
	//uint8_t char_alfa[8] = font8[34];
	oled_pos(page, coloumn_start, coloumn_end);
	int ltr;
	for (int i = 0;i<8;i++){
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	31 96       	adiw	r30, 0x01	; 1
     852:	88 30       	cpi	r24, 0x08	; 8
     854:	91 05       	cpc	r25, r1
     856:	c9 f7       	brne	.-14     	; 0x84a <oled_print_letter+0x2a>
		ltr = pgm_read_byte(&(font8[letter-32][i]));
		write_d(ltr);
	}
}
     858:	cf 91       	pop	r28
     85a:	08 95       	ret

0000085c <oled_print>:
void oled_pos(uint8_t page,uint8_t coloumn_start,uint8_t coloumn_end){
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
     85c:	bf 92       	push	r11
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	fc 01       	movw	r30, r24
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
     870:	80 81       	ld	r24, Z
     872:	88 23       	and	r24, r24
     874:	49 f1       	breq	.+82     	; 0x8c8 <oled_print+0x6c>
     876:	ef 01       	movw	r28, r30
     878:	21 96       	adiw	r28, 0x01	; 1
     87a:	8f 01       	movw	r16, r30
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
     87c:	dd 24       	eor	r13, r13
     87e:	d3 94       	inc	r13
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
     880:	0f 2e       	mov	r0, r31
     882:	f1 e1       	ldi	r31, 0x11	; 17
     884:	ef 2e       	mov	r14, r31
     886:	f0 2d       	mov	r31, r0
void oled_pos(uint8_t page,uint8_t coloumn_start,uint8_t coloumn_end){
	oled_goto_page(page);
	oled_goto_coloumn(coloumn_start,coloumn_end);
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
     888:	0f 2e       	mov	r0, r31
     88a:	f9 e0       	ldi	r31, 0x09	; 9
     88c:	ff 2e       	mov	r15, r31
     88e:	f0 2d       	mov	r31, r0
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
			coloumn_start = 0x09;
			coloumn_end = 0x11;
     890:	0f 2e       	mov	r0, r31
     892:	f1 e1       	ldi	r31, 0x11	; 17
     894:	bf 2e       	mov	r11, r31
     896:	f0 2d       	mov	r31, r0
		coloumn_start += 0x09;
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
			coloumn_start = 0x09;
     898:	0f 2e       	mov	r0, r31
     89a:	f9 e0       	ldi	r31, 0x09	; 9
     89c:	cf 2e       	mov	r12, r31
     89e:	f0 2d       	mov	r31, r0
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
		oled_print_letter(word[i], page, coloumn_start,coloumn_end);
     8a0:	2e 2d       	mov	r18, r14
     8a2:	4f 2d       	mov	r20, r15
     8a4:	6d 2d       	mov	r22, r13
     8a6:	0e 94 10 04 	call	0x820	; 0x820 <oled_print_letter>
		coloumn_start += 0x09;
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
     8aa:	f8 01       	movw	r30, r16
     8ac:	80 81       	ld	r24, Z
     8ae:	80 32       	cpi	r24, 0x20	; 32
     8b0:	21 f0       	breq	.+8      	; 0x8ba <oled_print+0x5e>
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
		oled_print_letter(word[i], page, coloumn_start,coloumn_end);
		coloumn_start += 0x09;
     8b2:	f9 e0       	ldi	r31, 0x09	; 9
     8b4:	ff 0e       	add	r15, r31
		coloumn_end += 0x09;
     8b6:	ef 0e       	add	r14, r31
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <oled_print+0x64>
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
     8ba:	d3 94       	inc	r13
			coloumn_start = 0x09;
			coloumn_end = 0x11;
     8bc:	eb 2c       	mov	r14, r11
		coloumn_start += 0x09;
		coloumn_end += 0x09;
		//printf("Bokstaven er: %c , coloumn_start: %u , coloumn_end: %u \n",word[i], coloumn_start, coloumn_end);
		if(word[i] == 32){
			page +=0x01;
			coloumn_start = 0x09;
     8be:	fc 2c       	mov	r15, r12
}
void oled_print(char* word ){
	uint8_t coloumn_start = 0x09;
	uint8_t coloumn_end = 0x11;
	uint8_t page = 0x01;	
	for (int i = 0; word[i] != '\0'; i++){
     8c0:	8e 01       	movw	r16, r28
     8c2:	89 91       	ld	r24, Y+
     8c4:	81 11       	cpse	r24, r1
     8c6:	ec cf       	rjmp	.-40     	; 0x8a0 <oled_print+0x44>
			coloumn_start = 0x09;
			coloumn_end = 0x11;
		}
	}
	
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	ef 90       	pop	r14
     8d4:	df 90       	pop	r13
     8d6:	cf 90       	pop	r12
     8d8:	bf 90       	pop	r11
     8da:	08 95       	ret

000008dc <initialize_menu>:
	oled_goto_page(0x00);
	oled_goto_coloumn(0x00,0x00);
}

void initialize_menu(){
	oled_print("Meny1 Meny2 Meny3 Meny4 Meny5");
     8dc:	8f e5       	ldi	r24, 0x5F	; 95
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	0e 94 2e 04 	call	0x85c	; 0x85c <oled_print>
	oled_print_letter('#',0x01,0x00,0x08);
     8e4:	28 e0       	ldi	r18, 0x08	; 8
     8e6:	40 e0       	ldi	r20, 0x00	; 0
     8e8:	61 e0       	ldi	r22, 0x01	; 1
     8ea:	83 e2       	ldi	r24, 0x23	; 35
     8ec:	0e 94 10 04 	call	0x820	; 0x820 <oled_print_letter>
	pos.current_page = 0x01;
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 7f 01 	sts	0x017F, r24
     8f6:	08 95       	ret

000008f8 <SPI_MasterInit>:

#include "SPI.h"

void SPI_MasterInit(void){
	/* Set MOSI,SCK and SS output, all others input */
	DDRB = (1<<DD_MOSI) | (1<<DD_SCK) | (1 << DD_SS) | (1 << PB0);
     8f8:	81 eb       	ldi	r24, 0xB1	; 177
     8fa:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
     8fc:	81 e5       	ldi	r24, 0x51	; 81
     8fe:	8d b9       	out	0x0d, r24	; 13
     900:	08 95       	ret

00000902 <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(char cData){
	/* Start transmission */
	SPDR = cData;
     902:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission complete */
	while	(!(SPSR & (1<<SPIF)));
     904:	77 9b       	sbis	0x0e, 7	; 14
     906:	fe cf       	rjmp	.-4      	; 0x904 <SPI_MasterTransmit+0x2>
}
     908:	08 95       	ret

0000090a <SPI_MasterReceive>:

char SPI_MasterReceive(void){
	/* Send dummy data to read from slave */	
	SPI_MasterTransmit(0);
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	0e 94 81 04 	call	0x902	; 0x902 <SPI_MasterTransmit>
	
	/* Wait for reception complete */
	// while	(!(SPSR & (1<<SPIF)));
	
	/* Return data register */
	return	SPDR;
     910:	8f b1       	in	r24, 0x0f	; 15
     912:	08 95       	ret

00000914 <EXT_MEM_Init>:
#include <avr/io.h>
#include <stdlib.h>
#include "../../delte filer/uart.h"

void EXT_MEM_Init(void){
	set_bit(MCUCR,SRE);
     914:	85 b7       	in	r24, 0x35	; 53
     916:	80 68       	ori	r24, 0x80	; 128
     918:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
     91a:	80 b7       	in	r24, 0x30	; 48
     91c:	80 62       	ori	r24, 0x20	; 32
     91e:	80 bf       	out	0x30, r24	; 48
     920:	08 95       	ret

00000922 <USART_Transmit>:
}

void USART_Transmit( unsigned char data ){

// Wait for empty transmit buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     922:	5d 9b       	sbis	0x0b, 5	; 11
     924:	fe cf       	rjmp	.-4      	; 0x922 <USART_Transmit>
  
//Put data into buffer, sends the data
	UDR0 = data;
     926:	8c b9       	out	0x0c, r24	; 12
     928:	08 95       	ret

0000092a <USART_Receive>:
}

unsigned char USART_Receive( void ){

//Wait for data to be received
	while ( !(UCSR0A & (1<<RXC0)) );
     92a:	5f 9b       	sbis	0x0b, 7	; 11
     92c:	fe cf       	rjmp	.-4      	; 0x92a <USART_Receive>
//Get and return received data from buffer
	return UDR0;
     92e:	8c b1       	in	r24, 0x0c	; 12
     930:	08 95       	ret

00000932 <USART_Init>:
	//set_bit(SFIOR,XMM2);
	////set_bit(SFIOR,XMM0);
//}
void USART_Init( unsigned int ubrr){
	// Set baud rate
	UBRR0H = (unsigned char) (ubrr>>8);
     932:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char) ubrr;
     934:	89 b9       	out	0x09, r24	; 9
	
	/* Enable receiver and transmitter	*/
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
     936:	88 e1       	ldi	r24, 0x18	; 24
     938:	8a b9       	out	0x0a, r24	; 10
	fdevopen(USART_Transmit,USART_Receive);
     93a:	65 e9       	ldi	r22, 0x95	; 149
     93c:	74 e0       	ldi	r23, 0x04	; 4
     93e:	81 e9       	ldi	r24, 0x91	; 145
     940:	94 e0       	ldi	r25, 0x04	; 4
     942:	0e 94 a4 04 	call	0x948	; 0x948 <fdevopen>
     946:	08 95       	ret

00000948 <fdevopen>:
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	ec 01       	movw	r28, r24
     952:	8b 01       	movw	r16, r22
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	31 f4       	brne	.+12     	; 0x964 <fdevopen+0x1c>
     958:	61 15       	cp	r22, r1
     95a:	71 05       	cpc	r23, r1
     95c:	19 f4       	brne	.+6      	; 0x964 <fdevopen+0x1c>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	38 c0       	rjmp	.+112    	; 0x9d4 <fdevopen+0x8c>
     964:	6e e0       	ldi	r22, 0x0E	; 14
     966:	70 e0       	ldi	r23, 0x00	; 0
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	0e 94 02 07 	call	0xe04	; 0xe04 <calloc>
     970:	fc 01       	movw	r30, r24
     972:	00 97       	sbiw	r24, 0x00	; 0
     974:	a1 f3       	breq	.-24     	; 0x95e <fdevopen+0x16>
     976:	80 e8       	ldi	r24, 0x80	; 128
     978:	83 83       	std	Z+3, r24	; 0x03
     97a:	01 15       	cp	r16, r1
     97c:	11 05       	cpc	r17, r1
     97e:	71 f0       	breq	.+28     	; 0x99c <fdevopen+0x54>
     980:	13 87       	std	Z+11, r17	; 0x0b
     982:	02 87       	std	Z+10, r16	; 0x0a
     984:	81 e8       	ldi	r24, 0x81	; 129
     986:	83 83       	std	Z+3, r24	; 0x03
     988:	80 91 84 01 	lds	r24, 0x0184
     98c:	90 91 85 01 	lds	r25, 0x0185
     990:	89 2b       	or	r24, r25
     992:	21 f4       	brne	.+8      	; 0x99c <fdevopen+0x54>
     994:	f0 93 85 01 	sts	0x0185, r31
     998:	e0 93 84 01 	sts	0x0184, r30
     99c:	20 97       	sbiw	r28, 0x00	; 0
     99e:	c9 f0       	breq	.+50     	; 0x9d2 <fdevopen+0x8a>
     9a0:	d1 87       	std	Z+9, r29	; 0x09
     9a2:	c0 87       	std	Z+8, r28	; 0x08
     9a4:	83 81       	ldd	r24, Z+3	; 0x03
     9a6:	82 60       	ori	r24, 0x02	; 2
     9a8:	83 83       	std	Z+3, r24	; 0x03
     9aa:	80 91 86 01 	lds	r24, 0x0186
     9ae:	90 91 87 01 	lds	r25, 0x0187
     9b2:	89 2b       	or	r24, r25
     9b4:	71 f4       	brne	.+28     	; 0x9d2 <fdevopen+0x8a>
     9b6:	f0 93 87 01 	sts	0x0187, r31
     9ba:	e0 93 86 01 	sts	0x0186, r30
     9be:	80 91 88 01 	lds	r24, 0x0188
     9c2:	90 91 89 01 	lds	r25, 0x0189
     9c6:	89 2b       	or	r24, r25
     9c8:	21 f4       	brne	.+8      	; 0x9d2 <fdevopen+0x8a>
     9ca:	f0 93 89 01 	sts	0x0189, r31
     9ce:	e0 93 88 01 	sts	0x0188, r30
     9d2:	cf 01       	movw	r24, r30
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	1f 91       	pop	r17
     9da:	0f 91       	pop	r16
     9dc:	08 95       	ret

000009de <printf>:
     9de:	a0 e0       	ldi	r26, 0x00	; 0
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e5 ef       	ldi	r30, 0xF5	; 245
     9e4:	f4 e0       	ldi	r31, 0x04	; 4
     9e6:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__prologue_saves__+0x20>
     9ea:	fe 01       	movw	r30, r28
     9ec:	35 96       	adiw	r30, 0x05	; 5
     9ee:	61 91       	ld	r22, Z+
     9f0:	71 91       	ld	r23, Z+
     9f2:	af 01       	movw	r20, r30
     9f4:	80 91 86 01 	lds	r24, 0x0186
     9f8:	90 91 87 01 	lds	r25, 0x0187
     9fc:	0e 94 30 05 	call	0xa60	; 0xa60 <vfprintf>
     a00:	e2 e0       	ldi	r30, 0x02	; 2
     a02:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__epilogue_restores__+0x20>

00000a06 <puts>:
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	e0 91 86 01 	lds	r30, 0x0186
     a12:	f0 91 87 01 	lds	r31, 0x0187
     a16:	23 81       	ldd	r18, Z+3	; 0x03
     a18:	21 ff       	sbrs	r18, 1
     a1a:	1b c0       	rjmp	.+54     	; 0xa52 <puts+0x4c>
     a1c:	ec 01       	movw	r28, r24
     a1e:	00 e0       	ldi	r16, 0x00	; 0
     a20:	10 e0       	ldi	r17, 0x00	; 0
     a22:	89 91       	ld	r24, Y+
     a24:	60 91 86 01 	lds	r22, 0x0186
     a28:	70 91 87 01 	lds	r23, 0x0187
     a2c:	db 01       	movw	r26, r22
     a2e:	18 96       	adiw	r26, 0x08	; 8
     a30:	ed 91       	ld	r30, X+
     a32:	fc 91       	ld	r31, X
     a34:	19 97       	sbiw	r26, 0x09	; 9
     a36:	88 23       	and	r24, r24
     a38:	31 f0       	breq	.+12     	; 0xa46 <puts+0x40>
     a3a:	09 95       	icall
     a3c:	89 2b       	or	r24, r25
     a3e:	89 f3       	breq	.-30     	; 0xa22 <puts+0x1c>
     a40:	0f ef       	ldi	r16, 0xFF	; 255
     a42:	1f ef       	ldi	r17, 0xFF	; 255
     a44:	ee cf       	rjmp	.-36     	; 0xa22 <puts+0x1c>
     a46:	8a e0       	ldi	r24, 0x0A	; 10
     a48:	09 95       	icall
     a4a:	89 2b       	or	r24, r25
     a4c:	11 f4       	brne	.+4      	; 0xa52 <puts+0x4c>
     a4e:	c8 01       	movw	r24, r16
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <puts+0x50>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9f ef       	ldi	r25, 0xFF	; 255
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	08 95       	ret

00000a60 <vfprintf>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__prologue_saves__>
     a6c:	7c 01       	movw	r14, r24
     a6e:	6b 01       	movw	r12, r22
     a70:	8a 01       	movw	r16, r20
     a72:	fc 01       	movw	r30, r24
     a74:	17 82       	std	Z+7, r1	; 0x07
     a76:	16 82       	std	Z+6, r1	; 0x06
     a78:	83 81       	ldd	r24, Z+3	; 0x03
     a7a:	81 ff       	sbrs	r24, 1
     a7c:	bd c1       	rjmp	.+890    	; 0xdf8 <vfprintf+0x398>
     a7e:	ce 01       	movw	r24, r28
     a80:	01 96       	adiw	r24, 0x01	; 1
     a82:	4c 01       	movw	r8, r24
     a84:	f7 01       	movw	r30, r14
     a86:	93 81       	ldd	r25, Z+3	; 0x03
     a88:	f6 01       	movw	r30, r12
     a8a:	93 fd       	sbrc	r25, 3
     a8c:	85 91       	lpm	r24, Z+
     a8e:	93 ff       	sbrs	r25, 3
     a90:	81 91       	ld	r24, Z+
     a92:	6f 01       	movw	r12, r30
     a94:	88 23       	and	r24, r24
     a96:	09 f4       	brne	.+2      	; 0xa9a <vfprintf+0x3a>
     a98:	ab c1       	rjmp	.+854    	; 0xdf0 <vfprintf+0x390>
     a9a:	85 32       	cpi	r24, 0x25	; 37
     a9c:	39 f4       	brne	.+14     	; 0xaac <vfprintf+0x4c>
     a9e:	93 fd       	sbrc	r25, 3
     aa0:	85 91       	lpm	r24, Z+
     aa2:	93 ff       	sbrs	r25, 3
     aa4:	81 91       	ld	r24, Z+
     aa6:	6f 01       	movw	r12, r30
     aa8:	85 32       	cpi	r24, 0x25	; 37
     aaa:	29 f4       	brne	.+10     	; 0xab6 <vfprintf+0x56>
     aac:	b7 01       	movw	r22, r14
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     ab4:	e7 cf       	rjmp	.-50     	; 0xa84 <vfprintf+0x24>
     ab6:	51 2c       	mov	r5, r1
     ab8:	31 2c       	mov	r3, r1
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	20 32       	cpi	r18, 0x20	; 32
     abe:	a0 f4       	brcc	.+40     	; 0xae8 <vfprintf+0x88>
     ac0:	8b 32       	cpi	r24, 0x2B	; 43
     ac2:	69 f0       	breq	.+26     	; 0xade <vfprintf+0x7e>
     ac4:	30 f4       	brcc	.+12     	; 0xad2 <vfprintf+0x72>
     ac6:	80 32       	cpi	r24, 0x20	; 32
     ac8:	59 f0       	breq	.+22     	; 0xae0 <vfprintf+0x80>
     aca:	83 32       	cpi	r24, 0x23	; 35
     acc:	69 f4       	brne	.+26     	; 0xae8 <vfprintf+0x88>
     ace:	20 61       	ori	r18, 0x10	; 16
     ad0:	2c c0       	rjmp	.+88     	; 0xb2a <vfprintf+0xca>
     ad2:	8d 32       	cpi	r24, 0x2D	; 45
     ad4:	39 f0       	breq	.+14     	; 0xae4 <vfprintf+0x84>
     ad6:	80 33       	cpi	r24, 0x30	; 48
     ad8:	39 f4       	brne	.+14     	; 0xae8 <vfprintf+0x88>
     ada:	21 60       	ori	r18, 0x01	; 1
     adc:	26 c0       	rjmp	.+76     	; 0xb2a <vfprintf+0xca>
     ade:	22 60       	ori	r18, 0x02	; 2
     ae0:	24 60       	ori	r18, 0x04	; 4
     ae2:	23 c0       	rjmp	.+70     	; 0xb2a <vfprintf+0xca>
     ae4:	28 60       	ori	r18, 0x08	; 8
     ae6:	21 c0       	rjmp	.+66     	; 0xb2a <vfprintf+0xca>
     ae8:	27 fd       	sbrc	r18, 7
     aea:	27 c0       	rjmp	.+78     	; 0xb3a <vfprintf+0xda>
     aec:	30 ed       	ldi	r19, 0xD0	; 208
     aee:	38 0f       	add	r19, r24
     af0:	3a 30       	cpi	r19, 0x0A	; 10
     af2:	78 f4       	brcc	.+30     	; 0xb12 <vfprintf+0xb2>
     af4:	26 ff       	sbrs	r18, 6
     af6:	06 c0       	rjmp	.+12     	; 0xb04 <vfprintf+0xa4>
     af8:	fa e0       	ldi	r31, 0x0A	; 10
     afa:	5f 9e       	mul	r5, r31
     afc:	30 0d       	add	r19, r0
     afe:	11 24       	eor	r1, r1
     b00:	53 2e       	mov	r5, r19
     b02:	13 c0       	rjmp	.+38     	; 0xb2a <vfprintf+0xca>
     b04:	8a e0       	ldi	r24, 0x0A	; 10
     b06:	38 9e       	mul	r3, r24
     b08:	30 0d       	add	r19, r0
     b0a:	11 24       	eor	r1, r1
     b0c:	33 2e       	mov	r3, r19
     b0e:	20 62       	ori	r18, 0x20	; 32
     b10:	0c c0       	rjmp	.+24     	; 0xb2a <vfprintf+0xca>
     b12:	8e 32       	cpi	r24, 0x2E	; 46
     b14:	21 f4       	brne	.+8      	; 0xb1e <vfprintf+0xbe>
     b16:	26 fd       	sbrc	r18, 6
     b18:	6b c1       	rjmp	.+726    	; 0xdf0 <vfprintf+0x390>
     b1a:	20 64       	ori	r18, 0x40	; 64
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <vfprintf+0xca>
     b1e:	8c 36       	cpi	r24, 0x6C	; 108
     b20:	11 f4       	brne	.+4      	; 0xb26 <vfprintf+0xc6>
     b22:	20 68       	ori	r18, 0x80	; 128
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <vfprintf+0xca>
     b26:	88 36       	cpi	r24, 0x68	; 104
     b28:	41 f4       	brne	.+16     	; 0xb3a <vfprintf+0xda>
     b2a:	f6 01       	movw	r30, r12
     b2c:	93 fd       	sbrc	r25, 3
     b2e:	85 91       	lpm	r24, Z+
     b30:	93 ff       	sbrs	r25, 3
     b32:	81 91       	ld	r24, Z+
     b34:	6f 01       	movw	r12, r30
     b36:	81 11       	cpse	r24, r1
     b38:	c1 cf       	rjmp	.-126    	; 0xabc <vfprintf+0x5c>
     b3a:	98 2f       	mov	r25, r24
     b3c:	9f 7d       	andi	r25, 0xDF	; 223
     b3e:	95 54       	subi	r25, 0x45	; 69
     b40:	93 30       	cpi	r25, 0x03	; 3
     b42:	28 f4       	brcc	.+10     	; 0xb4e <vfprintf+0xee>
     b44:	0c 5f       	subi	r16, 0xFC	; 252
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	ff e3       	ldi	r31, 0x3F	; 63
     b4a:	f9 83       	std	Y+1, r31	; 0x01
     b4c:	0d c0       	rjmp	.+26     	; 0xb68 <vfprintf+0x108>
     b4e:	83 36       	cpi	r24, 0x63	; 99
     b50:	31 f0       	breq	.+12     	; 0xb5e <vfprintf+0xfe>
     b52:	83 37       	cpi	r24, 0x73	; 115
     b54:	71 f0       	breq	.+28     	; 0xb72 <vfprintf+0x112>
     b56:	83 35       	cpi	r24, 0x53	; 83
     b58:	09 f0       	breq	.+2      	; 0xb5c <vfprintf+0xfc>
     b5a:	5b c0       	rjmp	.+182    	; 0xc12 <vfprintf+0x1b2>
     b5c:	22 c0       	rjmp	.+68     	; 0xba2 <vfprintf+0x142>
     b5e:	f8 01       	movw	r30, r16
     b60:	80 81       	ld	r24, Z
     b62:	89 83       	std	Y+1, r24	; 0x01
     b64:	0e 5f       	subi	r16, 0xFE	; 254
     b66:	1f 4f       	sbci	r17, 0xFF	; 255
     b68:	44 24       	eor	r4, r4
     b6a:	43 94       	inc	r4
     b6c:	51 2c       	mov	r5, r1
     b6e:	54 01       	movw	r10, r8
     b70:	15 c0       	rjmp	.+42     	; 0xb9c <vfprintf+0x13c>
     b72:	38 01       	movw	r6, r16
     b74:	f2 e0       	ldi	r31, 0x02	; 2
     b76:	6f 0e       	add	r6, r31
     b78:	71 1c       	adc	r7, r1
     b7a:	f8 01       	movw	r30, r16
     b7c:	a0 80       	ld	r10, Z
     b7e:	b1 80       	ldd	r11, Z+1	; 0x01
     b80:	26 ff       	sbrs	r18, 6
     b82:	03 c0       	rjmp	.+6      	; 0xb8a <vfprintf+0x12a>
     b84:	65 2d       	mov	r22, r5
     b86:	70 e0       	ldi	r23, 0x00	; 0
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <vfprintf+0x12e>
     b8a:	6f ef       	ldi	r22, 0xFF	; 255
     b8c:	7f ef       	ldi	r23, 0xFF	; 255
     b8e:	c5 01       	movw	r24, r10
     b90:	2c 87       	std	Y+12, r18	; 0x0c
     b92:	0e 94 57 08 	call	0x10ae	; 0x10ae <strnlen>
     b96:	2c 01       	movw	r4, r24
     b98:	83 01       	movw	r16, r6
     b9a:	2c 85       	ldd	r18, Y+12	; 0x0c
     b9c:	2f 77       	andi	r18, 0x7F	; 127
     b9e:	22 2e       	mov	r2, r18
     ba0:	17 c0       	rjmp	.+46     	; 0xbd0 <vfprintf+0x170>
     ba2:	38 01       	movw	r6, r16
     ba4:	f2 e0       	ldi	r31, 0x02	; 2
     ba6:	6f 0e       	add	r6, r31
     ba8:	71 1c       	adc	r7, r1
     baa:	f8 01       	movw	r30, r16
     bac:	a0 80       	ld	r10, Z
     bae:	b1 80       	ldd	r11, Z+1	; 0x01
     bb0:	26 ff       	sbrs	r18, 6
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <vfprintf+0x15a>
     bb4:	65 2d       	mov	r22, r5
     bb6:	70 e0       	ldi	r23, 0x00	; 0
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <vfprintf+0x15e>
     bba:	6f ef       	ldi	r22, 0xFF	; 255
     bbc:	7f ef       	ldi	r23, 0xFF	; 255
     bbe:	c5 01       	movw	r24, r10
     bc0:	2c 87       	std	Y+12, r18	; 0x0c
     bc2:	0e 94 45 08 	call	0x108a	; 0x108a <strnlen_P>
     bc6:	2c 01       	movw	r4, r24
     bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
     bca:	20 68       	ori	r18, 0x80	; 128
     bcc:	22 2e       	mov	r2, r18
     bce:	83 01       	movw	r16, r6
     bd0:	23 fc       	sbrc	r2, 3
     bd2:	1b c0       	rjmp	.+54     	; 0xc0a <vfprintf+0x1aa>
     bd4:	83 2d       	mov	r24, r3
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	48 16       	cp	r4, r24
     bda:	59 06       	cpc	r5, r25
     bdc:	b0 f4       	brcc	.+44     	; 0xc0a <vfprintf+0x1aa>
     bde:	b7 01       	movw	r22, r14
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     be8:	3a 94       	dec	r3
     bea:	f4 cf       	rjmp	.-24     	; 0xbd4 <vfprintf+0x174>
     bec:	f5 01       	movw	r30, r10
     bee:	27 fc       	sbrc	r2, 7
     bf0:	85 91       	lpm	r24, Z+
     bf2:	27 fe       	sbrs	r2, 7
     bf4:	81 91       	ld	r24, Z+
     bf6:	5f 01       	movw	r10, r30
     bf8:	b7 01       	movw	r22, r14
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     c00:	31 10       	cpse	r3, r1
     c02:	3a 94       	dec	r3
     c04:	f1 e0       	ldi	r31, 0x01	; 1
     c06:	4f 1a       	sub	r4, r31
     c08:	51 08       	sbc	r5, r1
     c0a:	41 14       	cp	r4, r1
     c0c:	51 04       	cpc	r5, r1
     c0e:	71 f7       	brne	.-36     	; 0xbec <vfprintf+0x18c>
     c10:	e5 c0       	rjmp	.+458    	; 0xddc <vfprintf+0x37c>
     c12:	84 36       	cpi	r24, 0x64	; 100
     c14:	11 f0       	breq	.+4      	; 0xc1a <vfprintf+0x1ba>
     c16:	89 36       	cpi	r24, 0x69	; 105
     c18:	39 f5       	brne	.+78     	; 0xc68 <vfprintf+0x208>
     c1a:	f8 01       	movw	r30, r16
     c1c:	27 ff       	sbrs	r18, 7
     c1e:	07 c0       	rjmp	.+14     	; 0xc2e <vfprintf+0x1ce>
     c20:	60 81       	ld	r22, Z
     c22:	71 81       	ldd	r23, Z+1	; 0x01
     c24:	82 81       	ldd	r24, Z+2	; 0x02
     c26:	93 81       	ldd	r25, Z+3	; 0x03
     c28:	0c 5f       	subi	r16, 0xFC	; 252
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <vfprintf+0x1de>
     c2e:	60 81       	ld	r22, Z
     c30:	71 81       	ldd	r23, Z+1	; 0x01
     c32:	88 27       	eor	r24, r24
     c34:	77 fd       	sbrc	r23, 7
     c36:	80 95       	com	r24
     c38:	98 2f       	mov	r25, r24
     c3a:	0e 5f       	subi	r16, 0xFE	; 254
     c3c:	1f 4f       	sbci	r17, 0xFF	; 255
     c3e:	2f 76       	andi	r18, 0x6F	; 111
     c40:	b2 2e       	mov	r11, r18
     c42:	97 ff       	sbrs	r25, 7
     c44:	09 c0       	rjmp	.+18     	; 0xc58 <vfprintf+0x1f8>
     c46:	90 95       	com	r25
     c48:	80 95       	com	r24
     c4a:	70 95       	com	r23
     c4c:	61 95       	neg	r22
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255
     c50:	8f 4f       	sbci	r24, 0xFF	; 255
     c52:	9f 4f       	sbci	r25, 0xFF	; 255
     c54:	20 68       	ori	r18, 0x80	; 128
     c56:	b2 2e       	mov	r11, r18
     c58:	2a e0       	ldi	r18, 0x0A	; 10
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	a4 01       	movw	r20, r8
     c5e:	0e 94 94 08 	call	0x1128	; 0x1128 <__ultoa_invert>
     c62:	a8 2e       	mov	r10, r24
     c64:	a8 18       	sub	r10, r8
     c66:	44 c0       	rjmp	.+136    	; 0xcf0 <vfprintf+0x290>
     c68:	85 37       	cpi	r24, 0x75	; 117
     c6a:	29 f4       	brne	.+10     	; 0xc76 <vfprintf+0x216>
     c6c:	2f 7e       	andi	r18, 0xEF	; 239
     c6e:	b2 2e       	mov	r11, r18
     c70:	2a e0       	ldi	r18, 0x0A	; 10
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	25 c0       	rjmp	.+74     	; 0xcc0 <vfprintf+0x260>
     c76:	f2 2f       	mov	r31, r18
     c78:	f9 7f       	andi	r31, 0xF9	; 249
     c7a:	bf 2e       	mov	r11, r31
     c7c:	8f 36       	cpi	r24, 0x6F	; 111
     c7e:	c1 f0       	breq	.+48     	; 0xcb0 <vfprintf+0x250>
     c80:	18 f4       	brcc	.+6      	; 0xc88 <vfprintf+0x228>
     c82:	88 35       	cpi	r24, 0x58	; 88
     c84:	79 f0       	breq	.+30     	; 0xca4 <vfprintf+0x244>
     c86:	b4 c0       	rjmp	.+360    	; 0xdf0 <vfprintf+0x390>
     c88:	80 37       	cpi	r24, 0x70	; 112
     c8a:	19 f0       	breq	.+6      	; 0xc92 <vfprintf+0x232>
     c8c:	88 37       	cpi	r24, 0x78	; 120
     c8e:	21 f0       	breq	.+8      	; 0xc98 <vfprintf+0x238>
     c90:	af c0       	rjmp	.+350    	; 0xdf0 <vfprintf+0x390>
     c92:	2f 2f       	mov	r18, r31
     c94:	20 61       	ori	r18, 0x10	; 16
     c96:	b2 2e       	mov	r11, r18
     c98:	b4 fe       	sbrs	r11, 4
     c9a:	0d c0       	rjmp	.+26     	; 0xcb6 <vfprintf+0x256>
     c9c:	8b 2d       	mov	r24, r11
     c9e:	84 60       	ori	r24, 0x04	; 4
     ca0:	b8 2e       	mov	r11, r24
     ca2:	09 c0       	rjmp	.+18     	; 0xcb6 <vfprintf+0x256>
     ca4:	24 ff       	sbrs	r18, 4
     ca6:	0a c0       	rjmp	.+20     	; 0xcbc <vfprintf+0x25c>
     ca8:	9f 2f       	mov	r25, r31
     caa:	96 60       	ori	r25, 0x06	; 6
     cac:	b9 2e       	mov	r11, r25
     cae:	06 c0       	rjmp	.+12     	; 0xcbc <vfprintf+0x25c>
     cb0:	28 e0       	ldi	r18, 0x08	; 8
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	05 c0       	rjmp	.+10     	; 0xcc0 <vfprintf+0x260>
     cb6:	20 e1       	ldi	r18, 0x10	; 16
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <vfprintf+0x260>
     cbc:	20 e1       	ldi	r18, 0x10	; 16
     cbe:	32 e0       	ldi	r19, 0x02	; 2
     cc0:	f8 01       	movw	r30, r16
     cc2:	b7 fe       	sbrs	r11, 7
     cc4:	07 c0       	rjmp	.+14     	; 0xcd4 <vfprintf+0x274>
     cc6:	60 81       	ld	r22, Z
     cc8:	71 81       	ldd	r23, Z+1	; 0x01
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	0c 5f       	subi	r16, 0xFC	; 252
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
     cd2:	06 c0       	rjmp	.+12     	; 0xce0 <vfprintf+0x280>
     cd4:	60 81       	ld	r22, Z
     cd6:	71 81       	ldd	r23, Z+1	; 0x01
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 5f       	subi	r16, 0xFE	; 254
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	a4 01       	movw	r20, r8
     ce2:	0e 94 94 08 	call	0x1128	; 0x1128 <__ultoa_invert>
     ce6:	a8 2e       	mov	r10, r24
     ce8:	a8 18       	sub	r10, r8
     cea:	fb 2d       	mov	r31, r11
     cec:	ff 77       	andi	r31, 0x7F	; 127
     cee:	bf 2e       	mov	r11, r31
     cf0:	b6 fe       	sbrs	r11, 6
     cf2:	0b c0       	rjmp	.+22     	; 0xd0a <vfprintf+0x2aa>
     cf4:	2b 2d       	mov	r18, r11
     cf6:	2e 7f       	andi	r18, 0xFE	; 254
     cf8:	a5 14       	cp	r10, r5
     cfa:	50 f4       	brcc	.+20     	; 0xd10 <vfprintf+0x2b0>
     cfc:	b4 fe       	sbrs	r11, 4
     cfe:	0a c0       	rjmp	.+20     	; 0xd14 <vfprintf+0x2b4>
     d00:	b2 fc       	sbrc	r11, 2
     d02:	08 c0       	rjmp	.+16     	; 0xd14 <vfprintf+0x2b4>
     d04:	2b 2d       	mov	r18, r11
     d06:	2e 7e       	andi	r18, 0xEE	; 238
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <vfprintf+0x2b4>
     d0a:	7a 2c       	mov	r7, r10
     d0c:	2b 2d       	mov	r18, r11
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <vfprintf+0x2b6>
     d10:	7a 2c       	mov	r7, r10
     d12:	01 c0       	rjmp	.+2      	; 0xd16 <vfprintf+0x2b6>
     d14:	75 2c       	mov	r7, r5
     d16:	24 ff       	sbrs	r18, 4
     d18:	0d c0       	rjmp	.+26     	; 0xd34 <vfprintf+0x2d4>
     d1a:	fe 01       	movw	r30, r28
     d1c:	ea 0d       	add	r30, r10
     d1e:	f1 1d       	adc	r31, r1
     d20:	80 81       	ld	r24, Z
     d22:	80 33       	cpi	r24, 0x30	; 48
     d24:	11 f4       	brne	.+4      	; 0xd2a <vfprintf+0x2ca>
     d26:	29 7e       	andi	r18, 0xE9	; 233
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <vfprintf+0x2dc>
     d2a:	22 ff       	sbrs	r18, 2
     d2c:	06 c0       	rjmp	.+12     	; 0xd3a <vfprintf+0x2da>
     d2e:	73 94       	inc	r7
     d30:	73 94       	inc	r7
     d32:	04 c0       	rjmp	.+8      	; 0xd3c <vfprintf+0x2dc>
     d34:	82 2f       	mov	r24, r18
     d36:	86 78       	andi	r24, 0x86	; 134
     d38:	09 f0       	breq	.+2      	; 0xd3c <vfprintf+0x2dc>
     d3a:	73 94       	inc	r7
     d3c:	23 fd       	sbrc	r18, 3
     d3e:	13 c0       	rjmp	.+38     	; 0xd66 <vfprintf+0x306>
     d40:	20 ff       	sbrs	r18, 0
     d42:	06 c0       	rjmp	.+12     	; 0xd50 <vfprintf+0x2f0>
     d44:	5a 2c       	mov	r5, r10
     d46:	73 14       	cp	r7, r3
     d48:	18 f4       	brcc	.+6      	; 0xd50 <vfprintf+0x2f0>
     d4a:	53 0c       	add	r5, r3
     d4c:	57 18       	sub	r5, r7
     d4e:	73 2c       	mov	r7, r3
     d50:	73 14       	cp	r7, r3
     d52:	68 f4       	brcc	.+26     	; 0xd6e <vfprintf+0x30e>
     d54:	b7 01       	movw	r22, r14
     d56:	80 e2       	ldi	r24, 0x20	; 32
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	2c 87       	std	Y+12, r18	; 0x0c
     d5c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     d60:	73 94       	inc	r7
     d62:	2c 85       	ldd	r18, Y+12	; 0x0c
     d64:	f5 cf       	rjmp	.-22     	; 0xd50 <vfprintf+0x2f0>
     d66:	73 14       	cp	r7, r3
     d68:	10 f4       	brcc	.+4      	; 0xd6e <vfprintf+0x30e>
     d6a:	37 18       	sub	r3, r7
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <vfprintf+0x310>
     d6e:	31 2c       	mov	r3, r1
     d70:	24 ff       	sbrs	r18, 4
     d72:	12 c0       	rjmp	.+36     	; 0xd98 <vfprintf+0x338>
     d74:	b7 01       	movw	r22, r14
     d76:	80 e3       	ldi	r24, 0x30	; 48
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	2c 87       	std	Y+12, r18	; 0x0c
     d7c:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     d80:	2c 85       	ldd	r18, Y+12	; 0x0c
     d82:	22 ff       	sbrs	r18, 2
     d84:	17 c0       	rjmp	.+46     	; 0xdb4 <vfprintf+0x354>
     d86:	21 ff       	sbrs	r18, 1
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <vfprintf+0x330>
     d8a:	88 e5       	ldi	r24, 0x58	; 88
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <vfprintf+0x334>
     d90:	88 e7       	ldi	r24, 0x78	; 120
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	b7 01       	movw	r22, r14
     d96:	0c c0       	rjmp	.+24     	; 0xdb0 <vfprintf+0x350>
     d98:	82 2f       	mov	r24, r18
     d9a:	86 78       	andi	r24, 0x86	; 134
     d9c:	59 f0       	breq	.+22     	; 0xdb4 <vfprintf+0x354>
     d9e:	21 fd       	sbrc	r18, 1
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <vfprintf+0x346>
     da2:	80 e2       	ldi	r24, 0x20	; 32
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <vfprintf+0x348>
     da6:	8b e2       	ldi	r24, 0x2B	; 43
     da8:	27 fd       	sbrc	r18, 7
     daa:	8d e2       	ldi	r24, 0x2D	; 45
     dac:	b7 01       	movw	r22, r14
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     db4:	a5 14       	cp	r10, r5
     db6:	38 f4       	brcc	.+14     	; 0xdc6 <vfprintf+0x366>
     db8:	b7 01       	movw	r22, r14
     dba:	80 e3       	ldi	r24, 0x30	; 48
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     dc2:	5a 94       	dec	r5
     dc4:	f7 cf       	rjmp	.-18     	; 0xdb4 <vfprintf+0x354>
     dc6:	aa 94       	dec	r10
     dc8:	f4 01       	movw	r30, r8
     dca:	ea 0d       	add	r30, r10
     dcc:	f1 1d       	adc	r31, r1
     dce:	80 81       	ld	r24, Z
     dd0:	b7 01       	movw	r22, r14
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     dd8:	a1 10       	cpse	r10, r1
     dda:	f5 cf       	rjmp	.-22     	; 0xdc6 <vfprintf+0x366>
     ddc:	33 20       	and	r3, r3
     dde:	09 f4       	brne	.+2      	; 0xde2 <vfprintf+0x382>
     de0:	51 ce       	rjmp	.-862    	; 0xa84 <vfprintf+0x24>
     de2:	b7 01       	movw	r22, r14
     de4:	80 e2       	ldi	r24, 0x20	; 32
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <fputc>
     dec:	3a 94       	dec	r3
     dee:	f6 cf       	rjmp	.-20     	; 0xddc <vfprintf+0x37c>
     df0:	f7 01       	movw	r30, r14
     df2:	86 81       	ldd	r24, Z+6	; 0x06
     df4:	97 81       	ldd	r25, Z+7	; 0x07
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x39c>
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	9f ef       	ldi	r25, 0xFF	; 255
     dfc:	2c 96       	adiw	r28, 0x0c	; 12
     dfe:	e2 e1       	ldi	r30, 0x12	; 18
     e00:	0c 94 0e 09 	jmp	0x121c	; 0x121c <__epilogue_restores__>

00000e04 <calloc>:
     e04:	0f 93       	push	r16
     e06:	1f 93       	push	r17
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
     e0c:	86 9f       	mul	r24, r22
     e0e:	80 01       	movw	r16, r0
     e10:	87 9f       	mul	r24, r23
     e12:	10 0d       	add	r17, r0
     e14:	96 9f       	mul	r25, r22
     e16:	10 0d       	add	r17, r0
     e18:	11 24       	eor	r1, r1
     e1a:	c8 01       	movw	r24, r16
     e1c:	0e 94 1e 07 	call	0xe3c	; 0xe3c <malloc>
     e20:	ec 01       	movw	r28, r24
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	29 f0       	breq	.+10     	; 0xe30 <calloc+0x2c>
     e26:	a8 01       	movw	r20, r16
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <memset>
     e30:	ce 01       	movw	r24, r28
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	08 95       	ret

00000e3c <malloc>:
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	82 30       	cpi	r24, 0x02	; 2
     e42:	91 05       	cpc	r25, r1
     e44:	10 f4       	brcc	.+4      	; 0xe4a <malloc+0xe>
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	e0 91 8c 01 	lds	r30, 0x018C
     e4e:	f0 91 8d 01 	lds	r31, 0x018D
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	a0 e0       	ldi	r26, 0x00	; 0
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	30 97       	sbiw	r30, 0x00	; 0
     e5c:	39 f1       	breq	.+78     	; 0xeac <malloc+0x70>
     e5e:	40 81       	ld	r20, Z
     e60:	51 81       	ldd	r21, Z+1	; 0x01
     e62:	48 17       	cp	r20, r24
     e64:	59 07       	cpc	r21, r25
     e66:	b8 f0       	brcs	.+46     	; 0xe96 <malloc+0x5a>
     e68:	48 17       	cp	r20, r24
     e6a:	59 07       	cpc	r21, r25
     e6c:	71 f4       	brne	.+28     	; 0xe8a <malloc+0x4e>
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	10 97       	sbiw	r26, 0x00	; 0
     e74:	29 f0       	breq	.+10     	; 0xe80 <malloc+0x44>
     e76:	13 96       	adiw	r26, 0x03	; 3
     e78:	9c 93       	st	X, r25
     e7a:	8e 93       	st	-X, r24
     e7c:	12 97       	sbiw	r26, 0x02	; 2
     e7e:	2c c0       	rjmp	.+88     	; 0xed8 <malloc+0x9c>
     e80:	90 93 8d 01 	sts	0x018D, r25
     e84:	80 93 8c 01 	sts	0x018C, r24
     e88:	27 c0       	rjmp	.+78     	; 0xed8 <malloc+0x9c>
     e8a:	21 15       	cp	r18, r1
     e8c:	31 05       	cpc	r19, r1
     e8e:	31 f0       	breq	.+12     	; 0xe9c <malloc+0x60>
     e90:	42 17       	cp	r20, r18
     e92:	53 07       	cpc	r21, r19
     e94:	18 f0       	brcs	.+6      	; 0xe9c <malloc+0x60>
     e96:	a9 01       	movw	r20, r18
     e98:	db 01       	movw	r26, r22
     e9a:	01 c0       	rjmp	.+2      	; 0xe9e <malloc+0x62>
     e9c:	ef 01       	movw	r28, r30
     e9e:	9a 01       	movw	r18, r20
     ea0:	bd 01       	movw	r22, r26
     ea2:	df 01       	movw	r26, r30
     ea4:	02 80       	ldd	r0, Z+2	; 0x02
     ea6:	f3 81       	ldd	r31, Z+3	; 0x03
     ea8:	e0 2d       	mov	r30, r0
     eaa:	d7 cf       	rjmp	.-82     	; 0xe5a <malloc+0x1e>
     eac:	21 15       	cp	r18, r1
     eae:	31 05       	cpc	r19, r1
     eb0:	f9 f0       	breq	.+62     	; 0xef0 <malloc+0xb4>
     eb2:	28 1b       	sub	r18, r24
     eb4:	39 0b       	sbc	r19, r25
     eb6:	24 30       	cpi	r18, 0x04	; 4
     eb8:	31 05       	cpc	r19, r1
     eba:	80 f4       	brcc	.+32     	; 0xedc <malloc+0xa0>
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	61 15       	cp	r22, r1
     ec2:	71 05       	cpc	r23, r1
     ec4:	21 f0       	breq	.+8      	; 0xece <malloc+0x92>
     ec6:	fb 01       	movw	r30, r22
     ec8:	93 83       	std	Z+3, r25	; 0x03
     eca:	82 83       	std	Z+2, r24	; 0x02
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <malloc+0x9a>
     ece:	90 93 8d 01 	sts	0x018D, r25
     ed2:	80 93 8c 01 	sts	0x018C, r24
     ed6:	fe 01       	movw	r30, r28
     ed8:	32 96       	adiw	r30, 0x02	; 2
     eda:	44 c0       	rjmp	.+136    	; 0xf64 <malloc+0x128>
     edc:	fe 01       	movw	r30, r28
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	81 93       	st	Z+, r24
     ee4:	91 93       	st	Z+, r25
     ee6:	22 50       	subi	r18, 0x02	; 2
     ee8:	31 09       	sbc	r19, r1
     eea:	39 83       	std	Y+1, r19	; 0x01
     eec:	28 83       	st	Y, r18
     eee:	3a c0       	rjmp	.+116    	; 0xf64 <malloc+0x128>
     ef0:	20 91 8a 01 	lds	r18, 0x018A
     ef4:	30 91 8b 01 	lds	r19, 0x018B
     ef8:	23 2b       	or	r18, r19
     efa:	41 f4       	brne	.+16     	; 0xf0c <malloc+0xd0>
     efc:	20 91 02 01 	lds	r18, 0x0102
     f00:	30 91 03 01 	lds	r19, 0x0103
     f04:	30 93 8b 01 	sts	0x018B, r19
     f08:	20 93 8a 01 	sts	0x018A, r18
     f0c:	20 91 00 01 	lds	r18, 0x0100
     f10:	30 91 01 01 	lds	r19, 0x0101
     f14:	21 15       	cp	r18, r1
     f16:	31 05       	cpc	r19, r1
     f18:	41 f4       	brne	.+16     	; 0xf2a <malloc+0xee>
     f1a:	2d b7       	in	r18, 0x3d	; 61
     f1c:	3e b7       	in	r19, 0x3e	; 62
     f1e:	40 91 04 01 	lds	r20, 0x0104
     f22:	50 91 05 01 	lds	r21, 0x0105
     f26:	24 1b       	sub	r18, r20
     f28:	35 0b       	sbc	r19, r21
     f2a:	e0 91 8a 01 	lds	r30, 0x018A
     f2e:	f0 91 8b 01 	lds	r31, 0x018B
     f32:	e2 17       	cp	r30, r18
     f34:	f3 07       	cpc	r31, r19
     f36:	a0 f4       	brcc	.+40     	; 0xf60 <malloc+0x124>
     f38:	2e 1b       	sub	r18, r30
     f3a:	3f 0b       	sbc	r19, r31
     f3c:	28 17       	cp	r18, r24
     f3e:	39 07       	cpc	r19, r25
     f40:	78 f0       	brcs	.+30     	; 0xf60 <malloc+0x124>
     f42:	ac 01       	movw	r20, r24
     f44:	4e 5f       	subi	r20, 0xFE	; 254
     f46:	5f 4f       	sbci	r21, 0xFF	; 255
     f48:	24 17       	cp	r18, r20
     f4a:	35 07       	cpc	r19, r21
     f4c:	48 f0       	brcs	.+18     	; 0xf60 <malloc+0x124>
     f4e:	4e 0f       	add	r20, r30
     f50:	5f 1f       	adc	r21, r31
     f52:	50 93 8b 01 	sts	0x018B, r21
     f56:	40 93 8a 01 	sts	0x018A, r20
     f5a:	81 93       	st	Z+, r24
     f5c:	91 93       	st	Z+, r25
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <malloc+0x128>
     f60:	e0 e0       	ldi	r30, 0x00	; 0
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	cf 01       	movw	r24, r30
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	08 95       	ret

00000f6c <free>:
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	09 f4       	brne	.+2      	; 0xf76 <free+0xa>
     f74:	87 c0       	rjmp	.+270    	; 0x1084 <free+0x118>
     f76:	fc 01       	movw	r30, r24
     f78:	32 97       	sbiw	r30, 0x02	; 2
     f7a:	13 82       	std	Z+3, r1	; 0x03
     f7c:	12 82       	std	Z+2, r1	; 0x02
     f7e:	c0 91 8c 01 	lds	r28, 0x018C
     f82:	d0 91 8d 01 	lds	r29, 0x018D
     f86:	20 97       	sbiw	r28, 0x00	; 0
     f88:	81 f4       	brne	.+32     	; 0xfaa <free+0x3e>
     f8a:	20 81       	ld	r18, Z
     f8c:	31 81       	ldd	r19, Z+1	; 0x01
     f8e:	28 0f       	add	r18, r24
     f90:	39 1f       	adc	r19, r25
     f92:	80 91 8a 01 	lds	r24, 0x018A
     f96:	90 91 8b 01 	lds	r25, 0x018B
     f9a:	82 17       	cp	r24, r18
     f9c:	93 07       	cpc	r25, r19
     f9e:	79 f5       	brne	.+94     	; 0xffe <free+0x92>
     fa0:	f0 93 8b 01 	sts	0x018B, r31
     fa4:	e0 93 8a 01 	sts	0x018A, r30
     fa8:	6d c0       	rjmp	.+218    	; 0x1084 <free+0x118>
     faa:	de 01       	movw	r26, r28
     fac:	20 e0       	ldi	r18, 0x00	; 0
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	ae 17       	cp	r26, r30
     fb2:	bf 07       	cpc	r27, r31
     fb4:	50 f4       	brcc	.+20     	; 0xfca <free+0x5e>
     fb6:	12 96       	adiw	r26, 0x02	; 2
     fb8:	4d 91       	ld	r20, X+
     fba:	5c 91       	ld	r21, X
     fbc:	13 97       	sbiw	r26, 0x03	; 3
     fbe:	9d 01       	movw	r18, r26
     fc0:	41 15       	cp	r20, r1
     fc2:	51 05       	cpc	r21, r1
     fc4:	09 f1       	breq	.+66     	; 0x1008 <free+0x9c>
     fc6:	da 01       	movw	r26, r20
     fc8:	f3 cf       	rjmp	.-26     	; 0xfb0 <free+0x44>
     fca:	b3 83       	std	Z+3, r27	; 0x03
     fcc:	a2 83       	std	Z+2, r26	; 0x02
     fce:	40 81       	ld	r20, Z
     fd0:	51 81       	ldd	r21, Z+1	; 0x01
     fd2:	84 0f       	add	r24, r20
     fd4:	95 1f       	adc	r25, r21
     fd6:	8a 17       	cp	r24, r26
     fd8:	9b 07       	cpc	r25, r27
     fda:	71 f4       	brne	.+28     	; 0xff8 <free+0x8c>
     fdc:	8d 91       	ld	r24, X+
     fde:	9c 91       	ld	r25, X
     fe0:	11 97       	sbiw	r26, 0x01	; 1
     fe2:	84 0f       	add	r24, r20
     fe4:	95 1f       	adc	r25, r21
     fe6:	02 96       	adiw	r24, 0x02	; 2
     fe8:	91 83       	std	Z+1, r25	; 0x01
     fea:	80 83       	st	Z, r24
     fec:	12 96       	adiw	r26, 0x02	; 2
     fee:	8d 91       	ld	r24, X+
     ff0:	9c 91       	ld	r25, X
     ff2:	13 97       	sbiw	r26, 0x03	; 3
     ff4:	93 83       	std	Z+3, r25	; 0x03
     ff6:	82 83       	std	Z+2, r24	; 0x02
     ff8:	21 15       	cp	r18, r1
     ffa:	31 05       	cpc	r19, r1
     ffc:	29 f4       	brne	.+10     	; 0x1008 <free+0x9c>
     ffe:	f0 93 8d 01 	sts	0x018D, r31
    1002:	e0 93 8c 01 	sts	0x018C, r30
    1006:	3e c0       	rjmp	.+124    	; 0x1084 <free+0x118>
    1008:	d9 01       	movw	r26, r18
    100a:	13 96       	adiw	r26, 0x03	; 3
    100c:	fc 93       	st	X, r31
    100e:	ee 93       	st	-X, r30
    1010:	12 97       	sbiw	r26, 0x02	; 2
    1012:	4d 91       	ld	r20, X+
    1014:	5d 91       	ld	r21, X+
    1016:	a4 0f       	add	r26, r20
    1018:	b5 1f       	adc	r27, r21
    101a:	ea 17       	cp	r30, r26
    101c:	fb 07       	cpc	r31, r27
    101e:	79 f4       	brne	.+30     	; 0x103e <free+0xd2>
    1020:	80 81       	ld	r24, Z
    1022:	91 81       	ldd	r25, Z+1	; 0x01
    1024:	84 0f       	add	r24, r20
    1026:	95 1f       	adc	r25, r21
    1028:	02 96       	adiw	r24, 0x02	; 2
    102a:	d9 01       	movw	r26, r18
    102c:	11 96       	adiw	r26, 0x01	; 1
    102e:	9c 93       	st	X, r25
    1030:	8e 93       	st	-X, r24
    1032:	82 81       	ldd	r24, Z+2	; 0x02
    1034:	93 81       	ldd	r25, Z+3	; 0x03
    1036:	13 96       	adiw	r26, 0x03	; 3
    1038:	9c 93       	st	X, r25
    103a:	8e 93       	st	-X, r24
    103c:	12 97       	sbiw	r26, 0x02	; 2
    103e:	e0 e0       	ldi	r30, 0x00	; 0
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	19 f0       	breq	.+6      	; 0x1050 <free+0xe4>
    104a:	fe 01       	movw	r30, r28
    104c:	ec 01       	movw	r28, r24
    104e:	f9 cf       	rjmp	.-14     	; 0x1042 <free+0xd6>
    1050:	ce 01       	movw	r24, r28
    1052:	02 96       	adiw	r24, 0x02	; 2
    1054:	28 81       	ld	r18, Y
    1056:	39 81       	ldd	r19, Y+1	; 0x01
    1058:	82 0f       	add	r24, r18
    105a:	93 1f       	adc	r25, r19
    105c:	20 91 8a 01 	lds	r18, 0x018A
    1060:	30 91 8b 01 	lds	r19, 0x018B
    1064:	28 17       	cp	r18, r24
    1066:	39 07       	cpc	r19, r25
    1068:	69 f4       	brne	.+26     	; 0x1084 <free+0x118>
    106a:	30 97       	sbiw	r30, 0x00	; 0
    106c:	29 f4       	brne	.+10     	; 0x1078 <free+0x10c>
    106e:	10 92 8d 01 	sts	0x018D, r1
    1072:	10 92 8c 01 	sts	0x018C, r1
    1076:	02 c0       	rjmp	.+4      	; 0x107c <free+0x110>
    1078:	13 82       	std	Z+3, r1	; 0x03
    107a:	12 82       	std	Z+2, r1	; 0x02
    107c:	d0 93 8b 01 	sts	0x018B, r29
    1080:	c0 93 8a 01 	sts	0x018A, r28
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <strnlen_P>:
    108a:	fc 01       	movw	r30, r24
    108c:	05 90       	lpm	r0, Z+
    108e:	61 50       	subi	r22, 0x01	; 1
    1090:	70 40       	sbci	r23, 0x00	; 0
    1092:	01 10       	cpse	r0, r1
    1094:	d8 f7       	brcc	.-10     	; 0x108c <strnlen_P+0x2>
    1096:	80 95       	com	r24
    1098:	90 95       	com	r25
    109a:	8e 0f       	add	r24, r30
    109c:	9f 1f       	adc	r25, r31
    109e:	08 95       	ret

000010a0 <memset>:
    10a0:	dc 01       	movw	r26, r24
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <memset+0x6>
    10a4:	6d 93       	st	X+, r22
    10a6:	41 50       	subi	r20, 0x01	; 1
    10a8:	50 40       	sbci	r21, 0x00	; 0
    10aa:	e0 f7       	brcc	.-8      	; 0x10a4 <memset+0x4>
    10ac:	08 95       	ret

000010ae <strnlen>:
    10ae:	fc 01       	movw	r30, r24
    10b0:	61 50       	subi	r22, 0x01	; 1
    10b2:	70 40       	sbci	r23, 0x00	; 0
    10b4:	01 90       	ld	r0, Z+
    10b6:	01 10       	cpse	r0, r1
    10b8:	d8 f7       	brcc	.-10     	; 0x10b0 <strnlen+0x2>
    10ba:	80 95       	com	r24
    10bc:	90 95       	com	r25
    10be:	8e 0f       	add	r24, r30
    10c0:	9f 1f       	adc	r25, r31
    10c2:	08 95       	ret

000010c4 <fputc>:
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	18 2f       	mov	r17, r24
    10ce:	09 2f       	mov	r16, r25
    10d0:	eb 01       	movw	r28, r22
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	81 fd       	sbrc	r24, 1
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <fputc+0x1a>
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	9f ef       	ldi	r25, 0xFF	; 255
    10dc:	20 c0       	rjmp	.+64     	; 0x111e <fputc+0x5a>
    10de:	82 ff       	sbrs	r24, 2
    10e0:	10 c0       	rjmp	.+32     	; 0x1102 <fputc+0x3e>
    10e2:	4e 81       	ldd	r20, Y+6	; 0x06
    10e4:	5f 81       	ldd	r21, Y+7	; 0x07
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	42 17       	cp	r20, r18
    10ec:	53 07       	cpc	r21, r19
    10ee:	7c f4       	brge	.+30     	; 0x110e <fputc+0x4a>
    10f0:	e8 81       	ld	r30, Y
    10f2:	f9 81       	ldd	r31, Y+1	; 0x01
    10f4:	9f 01       	movw	r18, r30
    10f6:	2f 5f       	subi	r18, 0xFF	; 255
    10f8:	3f 4f       	sbci	r19, 0xFF	; 255
    10fa:	39 83       	std	Y+1, r19	; 0x01
    10fc:	28 83       	st	Y, r18
    10fe:	10 83       	st	Z, r17
    1100:	06 c0       	rjmp	.+12     	; 0x110e <fputc+0x4a>
    1102:	e8 85       	ldd	r30, Y+8	; 0x08
    1104:	f9 85       	ldd	r31, Y+9	; 0x09
    1106:	81 2f       	mov	r24, r17
    1108:	09 95       	icall
    110a:	89 2b       	or	r24, r25
    110c:	29 f7       	brne	.-54     	; 0x10d8 <fputc+0x14>
    110e:	2e 81       	ldd	r18, Y+6	; 0x06
    1110:	3f 81       	ldd	r19, Y+7	; 0x07
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	3f 83       	std	Y+7, r19	; 0x07
    1118:	2e 83       	std	Y+6, r18	; 0x06
    111a:	81 2f       	mov	r24, r17
    111c:	90 2f       	mov	r25, r16
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

00001128 <__ultoa_invert>:
    1128:	fa 01       	movw	r30, r20
    112a:	aa 27       	eor	r26, r26
    112c:	28 30       	cpi	r18, 0x08	; 8
    112e:	51 f1       	breq	.+84     	; 0x1184 <__ultoa_invert+0x5c>
    1130:	20 31       	cpi	r18, 0x10	; 16
    1132:	81 f1       	breq	.+96     	; 0x1194 <__ultoa_invert+0x6c>
    1134:	e8 94       	clt
    1136:	6f 93       	push	r22
    1138:	6e 7f       	andi	r22, 0xFE	; 254
    113a:	6e 5f       	subi	r22, 0xFE	; 254
    113c:	7f 4f       	sbci	r23, 0xFF	; 255
    113e:	8f 4f       	sbci	r24, 0xFF	; 255
    1140:	9f 4f       	sbci	r25, 0xFF	; 255
    1142:	af 4f       	sbci	r26, 0xFF	; 255
    1144:	b1 e0       	ldi	r27, 0x01	; 1
    1146:	3e d0       	rcall	.+124    	; 0x11c4 <__ultoa_invert+0x9c>
    1148:	b4 e0       	ldi	r27, 0x04	; 4
    114a:	3c d0       	rcall	.+120    	; 0x11c4 <__ultoa_invert+0x9c>
    114c:	67 0f       	add	r22, r23
    114e:	78 1f       	adc	r23, r24
    1150:	89 1f       	adc	r24, r25
    1152:	9a 1f       	adc	r25, r26
    1154:	a1 1d       	adc	r26, r1
    1156:	68 0f       	add	r22, r24
    1158:	79 1f       	adc	r23, r25
    115a:	8a 1f       	adc	r24, r26
    115c:	91 1d       	adc	r25, r1
    115e:	a1 1d       	adc	r26, r1
    1160:	6a 0f       	add	r22, r26
    1162:	71 1d       	adc	r23, r1
    1164:	81 1d       	adc	r24, r1
    1166:	91 1d       	adc	r25, r1
    1168:	a1 1d       	adc	r26, r1
    116a:	20 d0       	rcall	.+64     	; 0x11ac <__ultoa_invert+0x84>
    116c:	09 f4       	brne	.+2      	; 0x1170 <__ultoa_invert+0x48>
    116e:	68 94       	set
    1170:	3f 91       	pop	r19
    1172:	2a e0       	ldi	r18, 0x0A	; 10
    1174:	26 9f       	mul	r18, r22
    1176:	11 24       	eor	r1, r1
    1178:	30 19       	sub	r19, r0
    117a:	30 5d       	subi	r19, 0xD0	; 208
    117c:	31 93       	st	Z+, r19
    117e:	de f6       	brtc	.-74     	; 0x1136 <__ultoa_invert+0xe>
    1180:	cf 01       	movw	r24, r30
    1182:	08 95       	ret
    1184:	46 2f       	mov	r20, r22
    1186:	47 70       	andi	r20, 0x07	; 7
    1188:	40 5d       	subi	r20, 0xD0	; 208
    118a:	41 93       	st	Z+, r20
    118c:	b3 e0       	ldi	r27, 0x03	; 3
    118e:	0f d0       	rcall	.+30     	; 0x11ae <__ultoa_invert+0x86>
    1190:	c9 f7       	brne	.-14     	; 0x1184 <__ultoa_invert+0x5c>
    1192:	f6 cf       	rjmp	.-20     	; 0x1180 <__ultoa_invert+0x58>
    1194:	46 2f       	mov	r20, r22
    1196:	4f 70       	andi	r20, 0x0F	; 15
    1198:	40 5d       	subi	r20, 0xD0	; 208
    119a:	4a 33       	cpi	r20, 0x3A	; 58
    119c:	18 f0       	brcs	.+6      	; 0x11a4 <__ultoa_invert+0x7c>
    119e:	49 5d       	subi	r20, 0xD9	; 217
    11a0:	31 fd       	sbrc	r19, 1
    11a2:	40 52       	subi	r20, 0x20	; 32
    11a4:	41 93       	st	Z+, r20
    11a6:	02 d0       	rcall	.+4      	; 0x11ac <__ultoa_invert+0x84>
    11a8:	a9 f7       	brne	.-22     	; 0x1194 <__ultoa_invert+0x6c>
    11aa:	ea cf       	rjmp	.-44     	; 0x1180 <__ultoa_invert+0x58>
    11ac:	b4 e0       	ldi	r27, 0x04	; 4
    11ae:	a6 95       	lsr	r26
    11b0:	97 95       	ror	r25
    11b2:	87 95       	ror	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	ba 95       	dec	r27
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__ultoa_invert+0x86>
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	61 05       	cpc	r22, r1
    11c0:	71 05       	cpc	r23, r1
    11c2:	08 95       	ret
    11c4:	9b 01       	movw	r18, r22
    11c6:	ac 01       	movw	r20, r24
    11c8:	0a 2e       	mov	r0, r26
    11ca:	06 94       	lsr	r0
    11cc:	57 95       	ror	r21
    11ce:	47 95       	ror	r20
    11d0:	37 95       	ror	r19
    11d2:	27 95       	ror	r18
    11d4:	ba 95       	dec	r27
    11d6:	c9 f7       	brne	.-14     	; 0x11ca <__ultoa_invert+0xa2>
    11d8:	62 0f       	add	r22, r18
    11da:	73 1f       	adc	r23, r19
    11dc:	84 1f       	adc	r24, r20
    11de:	95 1f       	adc	r25, r21
    11e0:	a0 1d       	adc	r26, r0
    11e2:	08 95       	ret

000011e4 <__prologue_saves__>:
    11e4:	2f 92       	push	r2
    11e6:	3f 92       	push	r3
    11e8:	4f 92       	push	r4
    11ea:	5f 92       	push	r5
    11ec:	6f 92       	push	r6
    11ee:	7f 92       	push	r7
    11f0:	8f 92       	push	r8
    11f2:	9f 92       	push	r9
    11f4:	af 92       	push	r10
    11f6:	bf 92       	push	r11
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	ca 1b       	sub	r28, r26
    120e:	db 0b       	sbc	r29, r27
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	09 94       	ijmp

0000121c <__epilogue_restores__>:
    121c:	2a 88       	ldd	r2, Y+18	; 0x12
    121e:	39 88       	ldd	r3, Y+17	; 0x11
    1220:	48 88       	ldd	r4, Y+16	; 0x10
    1222:	5f 84       	ldd	r5, Y+15	; 0x0f
    1224:	6e 84       	ldd	r6, Y+14	; 0x0e
    1226:	7d 84       	ldd	r7, Y+13	; 0x0d
    1228:	8c 84       	ldd	r8, Y+12	; 0x0c
    122a:	9b 84       	ldd	r9, Y+11	; 0x0b
    122c:	aa 84       	ldd	r10, Y+10	; 0x0a
    122e:	b9 84       	ldd	r11, Y+9	; 0x09
    1230:	c8 84       	ldd	r12, Y+8	; 0x08
    1232:	df 80       	ldd	r13, Y+7	; 0x07
    1234:	ee 80       	ldd	r14, Y+6	; 0x06
    1236:	fd 80       	ldd	r15, Y+5	; 0x05
    1238:	0c 81       	ldd	r16, Y+4	; 0x04
    123a:	1b 81       	ldd	r17, Y+3	; 0x03
    123c:	aa 81       	ldd	r26, Y+2	; 0x02
    123e:	b9 81       	ldd	r27, Y+1	; 0x01
    1240:	ce 0f       	add	r28, r30
    1242:	d1 1d       	adc	r29, r1
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	ed 01       	movw	r28, r26
    1250:	08 95       	ret

00001252 <_exit>:
    1252:	f8 94       	cli

00001254 <__stop_program>:
    1254:	ff cf       	rjmp	.-2      	; 0x1254 <__stop_program>
